{"version":3,"sources":["webpack://chess-analysis-board/./src/js/Figure.js","webpack://chess-analysis-board/./src/js/chess/chess-const.js","webpack://chess-analysis-board/./src/js/chess/chess-utils.js","webpack://chess-analysis-board/./src/js/MovesRegistry.js","webpack://chess-analysis-board/./src/js/chess/chess-squares.js","webpack://chess-analysis-board/./src/js/chess/chess-svg.js","webpack://chess-analysis-board/./src/js/utils/clipboard.js","webpack://chess-analysis-board/./src/js/chess/chess-controls.js","webpack://chess-analysis-board/./src/js/utils/url.js","webpack://chess-analysis-board/./src/index.js","webpack://chess-analysis-board/./src/js/Chess.js"],"names":["Figure","config","this","letterW","iconW","letterB","iconB","color","rows","cols","fenBase","flankC","white","black","figures","b","r","n","k","q","p","getAbsoluteRouteWithFen","fen","window","location","origin","pathname","getCellKey","colLetter","rowNumber","asSquare","letter","createSquaresMap","listCells","forEach","row","col","cellKey","push","Map","createMarkersMap","parseFenStrToObject","squaresKeyVal","allowedLetters","split","rowText","rowIdw","boardRowIdx","currentCol","character","includes","toUpperCase","figureLetter","toLowerCase","jumpCols","parseInt","c","parseMapToFenStr","squaresMap","fenSquarePositions","emptyAccumulator","rowIdx","squareName","squarePiece","get","toString","pieceLetter","length","parseConfig","flip","asIcon","asLines","withLimitation","changeHistoryWithFen","url","history","pushState","id","parsePgn","pgnStr","m","regex","registry","pgnStrNoBr","replace","exec","index","lastIndex","match","groupIndex","parsePgnNotation","pgnMove","pgnMoveClean1","figure","squareFrom","squareTo","indexOf","partsChange","pgnSquareName","pgnMoveClean2","eat","MovesRegistry","moves","moveIdx","moveEntry","from","to","currentCursor","cursor","squareColumLetter","squareRowNumber","limitation","currentColumnIdx","squares","y","lastSquare","x","yx","allowPawnMove","cellY","pCombis","cellYplus2","xy","xInc","div","addMarkerCircle","type","typeMarker","squareNode","document","getElementById","use","createElementNS","setAttribute","appendChild","addMarkerRect","addMarkerMoveLast","text","textEl","textNode","createTextNode","squareLetter","colIdx","rowInt","content","squareEl","innerHTML","className","classList","add","notClassName","contains","remove","textContent","flipedRows","flipedCols","elements","idx","children","i","markersItems","querySelectorAll","invisibleClassName","markerItem","markerId","countSupport","countDanger","targetColor","colorType","myTemporaryInputElement","createElement","value","body","select","execCommand","removeChild","e","console","error","ChessControl","callBacks","buffer","squareTarget","panelControls","self","boardSquare","addEventListener","event","targetSquareName","target","srcElement","getAttribute","checkOnSelectSquare","selectedSquare","movePiecesFromSquares","clearBufferAndSelection","clearSelectedSquareFromBuffer","setBufferSquareTarget","button","onAdd","currentTarget","onAddMarker","onClearSquare","onDomainW","onDomainB","onClear","onInit","onDomainsToggle","onDomainsSquare","onShowSquareDomainSupport","onDomainAttacksSquare","onDomainDangerSquare","onShowAttackSquare","onDangerSquare","onFlip","onShowSquareSupport","onRemoveVisuals","onToggleMarkers","onLoadFenFromInput","onLoadFenToInput","onCreateLink","onNavPrev","onNavNext","onNavRecord","onLoadPgn","onDisplayReportBalanceWhites","onDisplayReportBalanceBlacks","item","squareBase","urlParams","params","parser","href","query","search","substring","vars","pair","decodeURIComponent","fenToLoad","configA","colors","movesRegistry","markersMap","fenStr","fenToMap","render","chessControls","actionsBridge","state","isDomainWhiteOn","isDomainBlackOn","move","record","fenAsObj","Object","entries","drawBoard","then","squareControls","lab","boardCoordinate","originSquare","targetSquare","originPiece","setFigureInSquare","drawPiecesFromMap","currentFen","setMoveState","drawDomainByColor","fenInputStr","pgnInputStr","renderPgnToBoard","notations","cursorColor","notation","notationParts","rItems","rItem","flag","squareValue","squareKey","getSquarePieceAllowedSquares","keyCol","squareToCol","saveMove","set","forceRemove","squareMarkers","selectedMarkerIdInSquare","splice","drawMarkersFromMapBySquareName","targetRows","flankCColLetter","markerItemList","markerIdx","drawMarkersFromMap","svg","svgCoordinates","reverse","coorItem","squareEntry","figureText","entryFigure","asLetter","markerEntry","markerItemId","selfColor","squareMapValueA","squareMapKeyA","squareMapValueB","squareMapKeyB","piece","forcedPieceAndColor","options","squareNameParts","squareColumnLetter","squareOptions","squareOptionsVertHorz","squareOptionsDiagonal","drawClearDomains","domainClassName","squaresInDomain","squaresFromFigure","markerIdBySquareColor","addMarkerToSquare","domainSquareName","classNameDomain","classNameColor","_","markerIdByColor","optionSquareKey","pieceInOptionSquare","drawDomainBySquare","ghostPieceInDomain","nextDomainSquareName","isSquareSave","squareMapValue","squareMapKey","squaresOptionsFromFigure","squareMapSquareOptions","uniques","filter","commonSquare","isSquareSupported","drawSupportToSquare","drawSupportToSquareDomain","flipBoard","async","square","reset","drawDangerToSquareDomain","drawAttackFromSquareDomain","drawAttackFromSquare","drawDangerToSquare","drawRemoveAllMarkers","loadFenFromInput","loadFenToInput","linkHref","prevMove","drawFromMove","nextMove","loadPgnFromInput","boardSquareDangerSupportRepor"],"mappings":"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","file":"main.770c22065fcd57969f2f.js","sourcesContent":["export default class Figure {\r\n    constructor(config) {\r\n        this.letterW = config.letterW\r\n        this.iconW = config.iconW;\r\n        this.letterB = config.letterB;\r\n        this.iconB = config.iconB;\r\n    }\r\n\r\n    asLetter(color = true) {\r\n        if (color) {\r\n            return this.letterW;\r\n        }\r\n        return this.letterB;\r\n    }\r\n\r\n    asIcon(color = true) {\r\n        if (color) {\r\n            return this.iconW;\r\n        }\r\n        return this.iconB;\r\n    }\r\n}","import Figure from '../Figure.js'\r\n\r\nexport const rows = [8, 7, 6, 5, 4, 3, 2, 1];\r\nexport const cols = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];\r\n\r\nexport const fenBase = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1';\r\n\r\nexport const flankQ = ['a', 'b', 'c', 'd', ];\r\nexport const flankK = ['e', 'f', 'g', 'h', ];\r\nexport const flankC = ['c','d', 'e','f' ];\r\n\r\nexport const white = true;\r\nexport const black = false;\r\n\r\nexport const figures = {\r\n    b: new Figure({ letterW: 'B', iconW: '♗', letterB: 'b', iconB: '♝' }),\r\n    r: new Figure({ letterW: 'R', iconW: '♖', letterB: 'r', iconB: '♜' }),\r\n    n: new Figure({ letterW: 'N', iconW: '♘', letterB: 'n', iconB: '♞' }),\r\n    k: new Figure({ letterW: 'K', iconW: '♔', letterB: 'k', iconB: '♚' }),\r\n    q: new Figure({ letterW: 'Q', iconW: '♕', letterB: 'q', iconB: '♛' }),\r\n    p: new Figure({ letterW: 'P', iconW: '♙', letterB: 'p', iconB: '♟' }),\r\n};\r\n","import { cols, white, black } from './chess-const.js'\r\n\r\nfunction parseConfig(config) {\r\n    return {\r\n        flip: ('flip' in config) ? config.flip : false,\r\n        asIcon: ('asIcon' in config) ? config.asIcon : true,\r\n        asLines: ('asLines' in config) ? config.asLines : true,\r\n        withLimitation: ('withLimitation' in config) ? config.withLimitation : false,\r\n    }\r\n}\r\n\r\nfunction changeHistoryWithFen(fen) {\r\n    const url = getAbsoluteRouteWithFen(fen);\r\n    history.pushState({\r\n        id: 'game-move'\r\n    }, '', url);\r\n}\r\n\r\nfunction getAbsoluteRouteWithFen(fen) {\r\n    return `${window.location.origin}${window.location.pathname}?fen=${fen}`;\r\n}\r\n\r\nfunction getCellKey(colLetter, rowNumber) {\r\n    return `${colLetter}${rowNumber}`;\r\n}\r\n\r\nfunction createSquaresMap(rows, cols) {\r\n    const listCells = [];\r\n    rows.forEach((row) => {\r\n        cols.forEach((col) => {\r\n            const cellKey = getCellKey(col, row);\r\n            listCells.push([cellKey, null]);\r\n        })\r\n    })\r\n    return new Map(listCells);\r\n}\r\n\r\nfunction createMarkersMap(rows, cols) {\r\n    const listCells = [];\r\n    rows.forEach((row) => {\r\n        cols.forEach((col) => {\r\n            const cellKey = getCellKey(col, row);\r\n            listCells.push([cellKey, []]);\r\n        })\r\n    })\r\n    return new Map(listCells);\r\n}\r\n\r\n\r\nfunction asSquare(letter, color = white) {\r\n    if (letter) {\r\n        return {\r\n            letter: letter,\r\n            color: color,\r\n        };\r\n    } else {\r\n        return null\r\n    }\r\n\r\n}\r\n\r\nfunction parseMapToFenStr(squaresMap) {\r\n    const rows = [8, 7, 6, 5, 4, 3, 2, 1];\r\n    const cols = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];\r\n\r\n    let fenSquarePositions = '';\r\n\r\n    let emptyAccumulator = 0;\r\n\r\n    rows.forEach((row, rowIdx) => {\r\n        emptyAccumulator = 0;\r\n        cols.forEach((col) => {\r\n            const squareName = getCellKey(col, row);\r\n            const squarePiece = squaresMap.get(squareName)\r\n\r\n            if (squarePiece) {\r\n                if (emptyAccumulator !== 0) {\r\n                    fenSquarePositions += emptyAccumulator.toString();\r\n                    emptyAccumulator = 0;\r\n                }\r\n                const pieceLetter = squarePiece.color ? squarePiece.letter.toUpperCase() : squarePiece.letter.toLowerCase()\r\n                fenSquarePositions += pieceLetter;\r\n\r\n            } else {\r\n                emptyAccumulator += 1;\r\n            }\r\n\r\n        })\r\n        if (emptyAccumulator !== 0) {\r\n            fenSquarePositions += emptyAccumulator.toString();\r\n        }\r\n        if (rowIdx < rows.length - 1) {\r\n            fenSquarePositions += '/';\r\n        }\r\n\r\n    })\r\n    const fen = `${fenSquarePositions} w KQkq - 0 1`;\r\n    return fen;\r\n}\r\n\r\nfunction parseFenStrToObject(fen) {\r\n\r\n    const squaresKeyVal = {};\r\n    const allowedLetters = ['r', 'n', 'b', 'k', 'q', 'p', 'R', 'N', 'B', 'K', 'Q', 'P'];\r\n    const fenFiguresSeparator = ' ';\r\n    const fenRowsSeparator = '/';\r\n\r\n    const figuresPart = fen.split(fenFiguresSeparator)[0];\r\n    const strRows = figuresPart.split(fenRowsSeparator);\r\n\r\n    strRows.forEach((rowText, rowIdw) => {\r\n        const boardRowIdx = 8 - rowIdw; // to flip the board ->  rowIdw + 1\r\n        let currentCol = 1;\r\n        rowText.split('').forEach((character) => {\r\n            if (allowedLetters.includes(character)) {\r\n                // it´s a figure letter\r\n                const colLetter = cols[currentCol - 1];\r\n                const cellKey = getCellKey(colLetter, boardRowIdx);\r\n                const color = (character == character.toUpperCase()); // R -> true\r\n                const figureLetter = character.toLowerCase();\r\n                squaresKeyVal[cellKey] = asSquare(figureLetter, color);\r\n                currentCol += 1;\r\n\r\n            } else {\r\n                // should be a number\r\n                const jumpCols = parseInt(character, 10)\r\n                for (let c = currentCol; c < jumpCols + currentCol; c++) {\r\n                    const colLetter = cols[c - 1];\r\n                    const cellKey = getCellKey(colLetter, boardRowIdx);\r\n                    squaresKeyVal[cellKey] = null;\r\n                }\r\n                currentCol += parseInt(character, 10);\r\n            }\r\n        })\r\n    });\r\n    return squaresKeyVal;\r\n}\r\n\r\nfunction parsePgn(pgnStr) {\r\n\r\n    let m;\r\n    const regex = /([0-9]{1,2}.)\\s?([\\S]+) ([\\S]+)/gm;\r\n    const registry = [];\r\n\r\n    const pgnStrNoHeaders = pgnStr.replace(/(\\[.+\\])/g, '');\r\n    const pgnStrNoBr = pgnStrNoHeaders.replace(/(?:\\r\\n|\\r|\\n)/g, ' ');\r\n\r\n    while ((m = regex.exec(pgnStrNoBr)) !== null) {\r\n        // avoid infinite loops\r\n        if (m.index === regex.lastIndex) {\r\n            regex.lastIndex++;\r\n        }\r\n        /*\r\n         group 0: 16.Qd3 Bc6\r\n         group 1: 16.\r\n         group 2: Qd3\r\n         group 3: Bc6\r\n        */\r\n        m.forEach((match, groupIndex) => {\r\n            // console.debug(`[UTILS] parsePgn match: , group ${groupIndex}: ${match}`);\r\n            if (groupIndex === 0) {\r\n                // Index move\r\n            }\r\n            if (groupIndex === 2) {\r\n                // Whites move\r\n\r\n                registry.push(match);\r\n            }\r\n            if (groupIndex === 3) {\r\n                // Blacks move\r\n                registry.push(match);\r\n            }\r\n        });\r\n    }\r\n\r\n    return registry;\r\n}\r\n\r\n\r\nfunction parsePgnNotation(pgnMove, color = white) {\r\n    /*\r\n     * b4!\r\n     * Sf5!?\r\n     * Nxf6\r\n     * O-O\r\n     * O-O-O\r\n     * exd5\r\n     * Bc5\r\n     * Qd2#\r\n     * g8=Q\r\n     * Rf7+\r\n     * Qh8+\r\n     * Rcc8\r\n     * end games: 1-0, ...\r\n     * mate #\r\n     * */\r\n\r\n    const pgnMoveClean1 = pgnMove.replace('#', '')\r\n        .replace('+', '')\r\n        .replace('?', '')\r\n        .replace('!', '');\r\n\r\n    // endGame case\r\n    if (['1-0', '1:0', '0-1', '0:1', '1/2-1/2', '*'].includes(pgnMoveClean1)) {\r\n        return [];\r\n    }\r\n\r\n    // Short halfMove case\r\n    if (pgnMoveClean1 === 'O-O') {\r\n        if (color === white) {\r\n\r\n            return [\r\n                { figure: 'k', squareFrom: 'e1', squareTo: 'g1', color },\r\n                { figure: 'r', squareFrom: 'h1', squareTo: 'f1', color },\r\n            ];\r\n        }\r\n        return [\r\n            { figure: 'k', squareFrom: 'e8', squareTo: 'g8', color },\r\n            { figure: 'r', squareFrom: 'h8', squareTo: 'f8', color },\r\n        ];\r\n    }\r\n\r\n    // Long halfMove case\r\n    if (pgnMoveClean1 === 'O-O-O') {\r\n        if (color === white) {\r\n            return [\r\n                { figure: 'k', squareFrom: 'e1', squareTo: 'c1', color },\r\n                { figure: 'r', squareFrom: 'a1', squareTo: 'd1', color },\r\n            ];\r\n        }\r\n        return [\r\n            { figure: 'k', squareFrom: 'e8', squareTo: 'c8', color },\r\n            { figure: 'r', squareFrom: 'a8', squareTo: 'd8', color },\r\n        ];\r\n    }\r\n\r\n    // Pawn promotion case: g8=Q\r\n    if (pgnMoveClean1.indexOf('=') > -1) {\r\n        const partsChange = pgnMoveClean1.split('=');\r\n        return [{\r\n            figure: partsChange[1].toLowerCase(),\r\n            squareTo: partsChange[0],\r\n            color\r\n        }, ];\r\n    }\r\n\r\n    const regExpSquare = /([a-z]{1}[0-9]{1})/g;\r\n    const matchSquare = regExpSquare.exec(pgnMoveClean1);\r\n\r\n    const pgnSquareName = matchSquare[1];\r\n    const pgnMoveClean2 = pgnMoveClean1.replace(pgnSquareName, '');\r\n\r\n    let eat = false\r\n\r\n    if (pgnMoveClean2.includes('x')) {\r\n        eat = true;\r\n    }\r\n\r\n    // Pawn case\r\n    if (pgnMoveClean2 === pgnMoveClean2.toLowerCase()) {\r\n        return [{\r\n            figure: 'p',\r\n            squareFrom: pgnMoveClean2,\r\n            squareTo: pgnSquareName,\r\n            color,\r\n            eat\r\n        }, ];\r\n    }\r\n\r\n    let squareFrom = '';\r\n    let figure = '';\r\n    if (pgnMoveClean2.length === 2) {\r\n        squareFrom = pgnMoveClean2[1];\r\n        figure = pgnMoveClean2[0].toLowerCase();\r\n    } else {\r\n        figure = pgnMoveClean2.toLowerCase();\r\n    }\r\n    return [{\r\n        figure: figure,\r\n        squareFrom: squareFrom,\r\n        squareTo: pgnSquareName,\r\n        color,\r\n        eat\r\n    }, ];\r\n\r\n}\r\n\r\n\r\nexport default {\r\n    getCellKey,\r\n    createSquaresMap,\r\n    createMarkersMap,\r\n    parseFenStrToObject,\r\n    parseMapToFenStr,\r\n    asSquare,\r\n    parseConfig,\r\n    getAbsoluteRouteWithFen,\r\n    changeHistoryWithFen,\r\n    parsePgn,\r\n    parsePgnNotation\r\n}","import Utils from './chess/chess-utils.js';\r\n\r\nexport default class MovesRegistry {\r\n\r\n    constructor() {\r\n        this.moves = [];\r\n        this.moveIdx = 0;\r\n\r\n    }\r\n\r\n    reset() {\r\n        this.moveIdx = 0;\r\n        this.moves.length = this.moveIdx;\r\n    }\r\n\r\n    saveMove(squareFrom, squareTo, squaresMap) {\r\n        const fen = Utils.parseMapToFenStr(squaresMap);\r\n        const moveEntry = {\r\n            from: squareFrom,\r\n            to: squareTo,\r\n            fen: fen\r\n        }\r\n\r\n        const currentCursor = this.moveIdx;\r\n        if (this.moves.length !== 0) {\r\n\r\n            this.moves.length = currentCursor + 1;\r\n        }\r\n        this.moves.push(moveEntry);\r\n        this.moveIdx = this.moves.length - 1;\r\n    }\r\n\r\n    get currentMoveIdx() {\r\n        return this.moveIdx;\r\n    }\r\n\r\n    get currentMove() {\r\n        return this.moves[this.moveIdx];\r\n    }\r\n\r\n    get prevMove() {\r\n        let cursor = this.moveIdx - 1;\r\n        if (cursor <= 0) {\r\n            cursor = 0;\r\n        }\r\n        this.moveIdx = cursor;\r\n        return this.moves[cursor];\r\n    }\r\n    get nextMove() {\r\n        let cursor = this.moveIdx + 1;\r\n        if (cursor >= this.moves.length) {\r\n            cursor = this.moves.length - 1;\r\n        }\r\n        this.moveIdx = cursor;\r\n        return this.moves[cursor];\r\n    }\r\n\r\n    getMoveByIdx(moveIdx) {\r\n        if (moveIdx < this.moves.length) {\r\n            return this.moves[this.moveIdx];\r\n        }\r\n        return null;\r\n    }\r\n\r\n\r\n}","import { cols } from './chess-const.js';\r\nimport Utils from './chess-utils.js';\r\n\r\n\r\nfunction getSquaresOptionsFromSquareWithR(\r\n    squaresMap,\r\n    squareColumLetter,\r\n    squareRowNumber,\r\n    limitation = false\r\n) {\r\n    const currentColumnIdx = cols.indexOf(squareColumLetter);\r\n    const squares = [];\r\n    for (let y = squareRowNumber - 1; y >= 1; y--) {\r\n        squares.push(Utils.getCellKey(squareColumLetter, y));\r\n        const lastSquare = squares[squares.length - 1];\r\n        if (squaresMap.get(lastSquare) && limitation) {\r\n            break;\r\n        }\r\n    }\r\n    for (let y = squareRowNumber + 1; y <= 8; y++) {\r\n        squares.push(Utils.getCellKey(squareColumLetter, y));\r\n        const lastSquare = squares[squares.length - 1];\r\n        if (squaresMap.get(lastSquare) && limitation) {\r\n            break;\r\n        }\r\n    }\r\n    for (let x = currentColumnIdx + 1; x < cols.length; x++) {\r\n        squares.push(Utils.getCellKey(cols[x], squareRowNumber));\r\n        const lastSquare = squares[squares.length - 1];\r\n        if (squaresMap.get(lastSquare) && limitation) {\r\n            break;\r\n        }\r\n    }\r\n    for (let x = currentColumnIdx - 1; x >= 0; x--) {\r\n        squares.push(Utils.getCellKey(cols[x], squareRowNumber));\r\n        const lastSquare = squares[squares.length - 1];\r\n        if (squaresMap.get(lastSquare) && limitation) {\r\n            break;\r\n        }\r\n    }\r\n    return squares;\r\n}\r\n\r\n\r\nfunction getSquaresOptionsFromSquareWithN(\r\n    squareColumLetter,\r\n    squareRowNumber\r\n) {\r\n    const currentColumnIdx = cols.indexOf(squareColumLetter);\r\n    const squares = [];\r\n    const nCombisYX = [\r\n        [2, 1],\r\n        [1, 2],\r\n        [-1, 2],\r\n        [-2, 1],\r\n        [-2, -1],\r\n        [-1, -2],\r\n        [1, -2],\r\n        [2, -1],\r\n    ];\r\n    nCombisYX.forEach((yx) => {\r\n        const y = squareRowNumber + yx[0];\r\n        const x = currentColumnIdx + yx[1];\r\n        if (x >= 0 && x < cols.length && y > 0 && y <= 8) {\r\n            squares.push(Utils.getCellKey(cols[x], y));\r\n        }\r\n    })\r\n    return squares;\r\n}\r\n\r\n\r\nfunction getSquaresOptionsFromSquareWithP(\r\n    squareColumLetter,\r\n    squareRowNumber,\r\n    color,\r\n    allowPawnMove\r\n) {\r\n    const currentColumnIdx = cols.indexOf(squareColumLetter);\r\n    const squares = [];\r\n    const cellY = color ? squareRowNumber + 1 : squareRowNumber - 1;\r\n    const pCombis = [\r\n        [1, cellY],\r\n        [-1, cellY]\r\n    ];\r\n    if (allowPawnMove) {\r\n        pCombis.push([0, cellY]);\r\n        const cellYplus2 = color ? squareRowNumber + 2 : squareRowNumber - 2;\r\n        pCombis.push([0, cellYplus2]);\r\n    }\r\n    pCombis.forEach((xy) => {\r\n        const x = currentColumnIdx + xy[0];\r\n        const y = xy[1];\r\n        if (x >= 0 && x < cols.length && y > 0 && y <= 8) {\r\n            squares.push(Utils.getCellKey(cols[x], y));\r\n        }\r\n    });\r\n    return squares;\r\n}\r\n\r\n\r\nfunction getSquaresOptionsFromSquareWithB(\r\n    squaresMap,\r\n    squareColumLetter,\r\n    squareRowNumber,\r\n    limitation = false\r\n) {\r\n    const currentColumnIdx = cols.indexOf(squareColumLetter);\r\n    const squares = [];\r\n\r\n    let xInc = 1;\r\n    for (let y = squareRowNumber - 1; y >= 0; y--) {\r\n        const x = currentColumnIdx + xInc;\r\n        if (x >= 0 && x < cols.length && y > 0 && y <= 8) {\r\n\r\n            squares.push(Utils.getCellKey(cols[x], y))\r\n            xInc++;\r\n            const lastSquare = squares[squares.length - 1];\r\n            if (squaresMap.get(lastSquare) && limitation) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    xInc = 1;\r\n    for (let y = squareRowNumber - 1; y >= 0; y--) {\r\n        const x = currentColumnIdx - xInc;\r\n        if (x >= 0 && x < cols.length && y > 0 && y <= 8) {\r\n            squares.push(Utils.getCellKey(cols[x], y))\r\n            xInc++;\r\n            const lastSquare = squares[squares.length - 1];\r\n            if (squaresMap.get(lastSquare) && limitation) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    xInc = 1;\r\n    for (let y = squareRowNumber + 1; y <= 8; y++) {\r\n        const x = currentColumnIdx - xInc;\r\n        if (x >= 0 && x < cols.length && y > 0 && y <= 8) {\r\n\r\n            squares.push(Utils.getCellKey(cols[x], y))\r\n            xInc++;\r\n            const lastSquare = squares[squares.length - 1];\r\n            if (squaresMap.get(lastSquare) && limitation) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    xInc = 1;\r\n    for (let y = squareRowNumber + 1; y <= 8; y++) {\r\n        const x = currentColumnIdx + xInc;\r\n        if (x >= 0 && x < cols.length && y > 0 && y <= 8) {\r\n            squares.push(Utils.getCellKey(cols[x], y))\r\n            xInc++;\r\n            const lastSquare = squares[squares.length - 1];\r\n            if (squaresMap.get(lastSquare) && limitation) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return squares;\r\n}\r\n\r\n\r\nfunction getSquaresOptionsFromSquareWithK(\r\n    squareColumLetter,\r\n    squareRowNumber,\r\n) {\r\n    const currentColumnIdx = cols.indexOf(squareColumLetter);\r\n    const squares = [];\r\n    const kCombisXY = [\r\n        [-1, 0],\r\n        [-1, 1],\r\n        [0, 1],\r\n        [1, 1],\r\n        [1, 0],\r\n        [1, -1],\r\n        [0, -1],\r\n        [-1, -1],\r\n    ];\r\n    kCombisXY.forEach((xy) => {\r\n        const x = currentColumnIdx + xy[0];\r\n        const y = squareRowNumber + xy[1];\r\n        if (x >= 0 && x < cols.length && y > 0 && y <= 8) {\r\n            squares.push(Utils.getCellKey(cols[x], y))\r\n        }\r\n    });\r\n    return squares;\r\n}\r\n\r\nexport default {\r\n    getSquaresOptionsFromSquareWithR,\r\n    getSquaresOptionsFromSquareWithN,\r\n    getSquaresOptionsFromSquareWithP,\r\n    getSquaresOptionsFromSquareWithB,\r\n    getSquaresOptionsFromSquareWithK\r\n}","import { white, } from './chess-const.js'\r\nimport Utils from './chess-utils.js';\r\n\r\nconst boardSize = 90;\r\nconst div = (boardSize / 8);\r\n\r\nfunction drawArrowInSquares(squareFrom, squareTo) {\r\n    // @todo\r\n    // col and row index\r\n    // calculate x,y origin and target\r\n    // marker selection, color, etc..\r\n    // draw line\r\n\r\n    /* Example:\r\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 350 100\">\r\n        <defs>\r\n            <marker id=\"arrowhead\" markerWidth=\"10\" markerHeight=\"7\"\r\n            refX=\"0\" refY=\"3.5\" orient=\"auto\">\r\n            <polygon points=\"0 0, 10 3.5, 0 7\" />\r\n            </marker>\r\n        </defs>\r\n        <line x1=\"0\" y1=\"50\" x2=\"250\" y2=\"50\" stroke=\"#000\"\r\n        stroke-width=\"8\" marker-end=\"url(#arrowhead)\" />\r\n    </svg>\r\n    */\r\n}\r\n\r\nfunction toggleShowMarkersContainer() {\r\n\r\n    const markersItems = document.querySelectorAll('.markers');\r\n    const invisibleClassName = 'marker-invisible';\r\n    markersItems.forEach(markerItem => {\r\n        if (markerItem.classList.contains(invisibleClassName)) {\r\n            markerItem.classList.remove(invisibleClassName);\r\n        } else {\r\n            markerItem.classList.add(invisibleClassName);\r\n\r\n        }\r\n    });\r\n}\r\n\r\nfunction removeSquareMarkers(squareName) {\r\n    const children = document.getElementById(`markers-${squareName}`).children;\r\n    // Change live list, iterate reverse order\r\n    for (var i = children.length - 1; i >= 0; --i) {\r\n        children[i].remove();\r\n    }\r\n}\r\n\r\n\r\n\r\nfunction addMarkerCircle(squareName, type = null) {\r\n    let typeMarker = 'neutral'\r\n    if (type === white) {\r\n        typeMarker = 'white';\r\n    } else if (type === false) {\r\n        typeMarker = 'black';\r\n    }\r\n    const squareNode = document.getElementById(`markers-${squareName}`);\r\n    const use = document.createElementNS(\"http://www.w3.org/2000/svg\", \"use\");\r\n    use.setAttribute('href', `#marker-circle-${typeMarker}`);\r\n    use.setAttribute('data-square', `${squareName}`);\r\n    squareNode.appendChild(use);\r\n}\r\n\r\nfunction addMarkerRect(squareName, type = true) {\r\n    let typeMarker = type ? 'ok' : 'error';\r\n    const squareNode = document.getElementById(`markers-${squareName}`);\r\n    const use = document.createElementNS(\"http://www.w3.org/2000/svg\", \"use\");\r\n    use.setAttribute('href', `#marker-rect-${typeMarker}`);\r\n    use.setAttribute('data-square', `${squareName}`);\r\n    squareNode.appendChild(use);\r\n}\r\n\r\nfunction addMarkerMoveLast(squareName) {\r\n    const squareNode = document.getElementById(`markers-${squareName}`);\r\n    const use = document.createElementNS(\"http://www.w3.org/2000/svg\", \"use\");\r\n    use.setAttribute('href', `#marker-move-last`);\r\n    use.setAttribute('data-square', `${squareName}`);\r\n    squareNode.appendChild(use);\r\n}\r\n\r\nfunction addMarkerNotation(squareName, text, type = 'default') {\r\n    const textEl = document.createElementNS(\"http://www.w3.org/2000/svg\", \"text\");\r\n    const textNode = document.createTextNode(text);\r\n    textEl.setAttribute('x', `${div}%`);\r\n    textEl.setAttribute('y', '0');\r\n    textEl.setAttribute('dx', '-0.5');\r\n    textEl.setAttribute('dy', '3');\r\n    textEl.setAttribute('data-square', `${squareName}`);\r\n    textEl.setAttribute('class', `marker-square-notation ${type}`);\r\n    textEl.setAttribute('text-anchor', 'end');\r\n    textEl.appendChild(textNode);\r\n\r\n    const squareNode = document.getElementById(`markers-${squareName}`);\r\n    squareNode.appendChild(textEl);\r\n}\r\n\r\n\r\nfunction createSquare(squareLetter, colIdx, rowInt, rowIdx, asIcon = true) {\r\n\r\n    const squareName = Utils.getCellKey(squareLetter, rowInt);\r\n\r\n    const x = div * colIdx;\r\n    const y = div * rowIdx;\r\n\r\n    const xT = asIcon ? 1.5 : 4;\r\n    const yT = asIcon ? -1.5 : 8;\r\n    const dyT = asIcon ? 10 : 0;\r\n\r\n    const content = `\r\n        <title>${squareName}</title>\r\n        <rect id=\"base-${squareName}\" \r\n            data-square=\"${squareName}\"\r\n            class=\"base\" \r\n            width=\"${div}%\" \r\n            height=\"${div}%\"  />\r\n        <g id=\"markers-${squareName}\" \r\n            data-square=\"${squareName}\"\r\n            class=\"markers\" \r\n            width=\"${div}%\" \r\n            height=\"${div}%\"  \r\n            fill=\"transparent\"\r\n            />\r\n        <text id=\"piece-${squareName}\" \r\n            data-square=\"${squareName}\"\r\n            class=\"piece ${ asIcon ? 'asIcon' : ''}\" \r\n            text-anchor=\"start\" \r\n            x=\"${xT}\" \r\n            y=\"${yT}\" \r\n            dy=\"${dyT}\"\r\n         ></text>\r\n    `;\r\n\r\n    const squareEl = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\r\n    squareEl.setAttribute('class', 'square');\r\n    squareEl.setAttribute('id', `${squareName}`);\r\n    squareEl.setAttribute('data-square', `${squareName}`);\r\n    squareEl.setAttribute('data-square-col', `${squareLetter}`);\r\n    squareEl.setAttribute('data-square-row', `${rowInt}`);\r\n    squareEl.setAttribute('transform', `translate(${x},${y})`);\r\n\r\n    squareEl.innerHTML = content;\r\n    return squareEl;\r\n}\r\n\r\nfunction setPieceInSquare(squareName, pieceLetter = '', color = true) {\r\n    const squareNode = document.getElementById(`piece-${squareName}`);\r\n    const className = color ? 'white' : 'black';\r\n    squareNode.classList.add(className);\r\n    const notClassName = color ? 'black' : 'white';\r\n    if (color && squareNode.classList.contains(notClassName)) {\r\n        squareNode.classList.remove(notClassName);\r\n    }\r\n    squareNode.textContent = pieceLetter;\r\n}\r\n\r\nfunction createCoordinates(flipedRows, flipedCols) {\r\n    const elements = [];\r\n    flipedCols.forEach((col, idx) => {\r\n        const textEl = document.createElementNS(\"http://www.w3.org/2000/svg\", \"text\");\r\n        const textNode = document.createTextNode(col);\r\n        textEl.setAttribute('x', `${div*idx}%`);\r\n        textEl.setAttribute('y', '0');\r\n        textEl.setAttribute('dy', '0');\r\n        textEl.setAttribute('dx', '1');\r\n        textEl.setAttribute('data-coord-col', `${col}`);\r\n        textEl.setAttribute('class', 'board-coordinate board-coordinate-col');\r\n        textEl.setAttribute('text-anchor', 'start');\r\n        textEl.appendChild(textNode);\r\n\r\n        elements.push(textEl);\r\n    })\r\n\r\n    flipedRows.forEach((row, idx) => {\r\n        const textEl = document.createElementNS(\"http://www.w3.org/2000/svg\", \"text\");\r\n        const textNode = document.createTextNode(row);\r\n        textEl.setAttribute('x', '0');\r\n        textEl.setAttribute('y', `${div*idx}%`);\r\n        textEl.setAttribute('dy', '6');\r\n        textEl.setAttribute('dx', '-3');\r\n        textEl.setAttribute('data-coord-row', `${row}`);\r\n        textEl.setAttribute('class', 'board-coordinate board-coordinate-row');\r\n        textEl.setAttribute('text-anchor', 'start');\r\n        textEl.appendChild(textNode);\r\n\r\n        elements.push(textEl);\r\n    })\r\n    return elements;\r\n}\r\n\r\nfunction getMarkerCircleIdByColor(color) {\r\n    return color ? 'marker-circle-white' : 'marker-circle-black';\r\n}\r\n\r\nfunction getDomainClassNameByColor(color) {\r\n    return color ? 'with-domain-white' : 'with-domain-black';\r\n}\r\n\r\nfunction drawMarkerInSquare(squareName, markerId) {\r\n    switch (markerId) {\r\n        case 'marker-circle-white':\r\n            addMarkerCircle(squareName, true);\r\n            break;\r\n        case 'marker-circle-neutral':\r\n            addMarkerCircle(squareName);\r\n            break;\r\n        case 'marker-circle-black':\r\n            addMarkerCircle(squareName, false);\r\n            break;\r\n        case 'marker-move-last':\r\n            addMarkerMoveLast(squareName);\r\n            break;\r\n        case 'marker-rect-ok':\r\n            addMarkerRect(squareName, true);\r\n            break;\r\n        case 'marker-rect-error':\r\n            addMarkerRect(squareName, false);\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n}\r\n\r\nfunction mapNotationColorType(\r\n    countSupport,\r\n    countDanger,\r\n    squarePiece,\r\n    targetColor = white\r\n) {\r\n    let colorType = 'default';\r\n\r\n    if (countDanger === 0 && countSupport > 0 &&\r\n        ((squarePiece && squarePiece.color !== targetColor))\r\n    ) {\r\n        colorType = 'advice';\r\n    }\r\n    if (countSupport > countDanger &&\r\n        ((squarePiece && squarePiece.color !== targetColor))\r\n    ) {\r\n        colorType = 'advice';\r\n    }\r\n    if ((countDanger > 0 && countSupport === 0) || (countDanger > countSupport)) {\r\n        colorType = 'alert';\r\n    }\r\n    if (countDanger === 0 && countSupport === 0 && !squarePiece) {\r\n        colorType = 'neutral';\r\n    }\r\n    if (countDanger === countSupport && squarePiece && squarePiece.color === targetColor) {\r\n        colorType = 'alert';\r\n    }\r\n    if (countSupport > countDanger &&\r\n        ((squarePiece && squarePiece.color === targetColor) || !squarePiece)\r\n    ) {\r\n        colorType = 'ok';\r\n    }\r\n\r\n    return colorType;\r\n}\r\n\r\nexport default {\r\n    getDomainClassNameByColor,\r\n    getMarkerCircleIdByColor,\r\n    addMarkerCircle,\r\n    addMarkerRect,\r\n    addMarkerMoveLast,\r\n    addMarkerNotation,\r\n    createSquare,\r\n    setPieceInSquare,\r\n    createCoordinates,\r\n    removeSquareMarkers,\r\n    drawArrowInSquares,\r\n    toggleShowMarkersContainer,\r\n    drawMarkerInSquare,\r\n    mapNotationColorType\r\n}\r\n\r\n/*\r\nSvg.addMarkerCircle('e6', white);\r\nSvg.addMarkerRect('a1');\r\nSvg.addMarkerMoveLast('a2');\r\nSvg.addMarkerRect('e6', false);\r\nSvg.addMarkerNotation('f1', '??');\r\n*/","function addTextToClipboard( text ){\r\n    try {\r\n        let myTemporaryInputElement = document.createElement('input');\r\n        myTemporaryInputElement.type = 'text';\r\n        myTemporaryInputElement.value = text;\r\n        document.body.appendChild(myTemporaryInputElement);\r\n        myTemporaryInputElement.select();\r\n        document.execCommand('Copy');\r\n        document.body.removeChild(myTemporaryInputElement);\r\n\r\n    } catch (e) {\r\n        console.error('[Clipboard] addTextToClipboard:', e);\r\n    }\r\n}\r\n\r\nexport default {\r\n    addTextToClipboard\r\n}\r\n","export default class ChessControl {\r\n\r\n    constructor(callBacks) {\r\n        this.buffer = {\r\n            squareTarget: null,\r\n        };\r\n        this.callBacks = callBacks;\r\n        this.panelControls();\r\n\r\n    }\r\n\r\n    squareControls() {\r\n        const self = this;\r\n        document.querySelectorAll('.square').forEach(boardSquare => {\r\n            boardSquare.addEventListener('click', function(event) {\r\n                const targetElement = event.target || event.srcElement;\r\n                const targetSquareName = targetElement.getAttribute('data-square');\r\n                self.checkOnSelectSquare(targetSquareName);\r\n            }, false);\r\n        })\r\n\r\n    }\r\n\r\n    async checkOnSelectSquare(selectedSquare) {\r\n        if (this.buffer.squareTarget) {\r\n            if (selectedSquare === this.buffer.squareTarget) {\r\n                this.clearBufferAndSelection();\r\n            } else {\r\n                const moved = await this.callBacks.movePiecesFromSquares(this.buffer.squareTarget, selectedSquare);\r\n                if (moved) {\r\n                    this.clearBufferAndSelection();\r\n                } else {\r\n                    this.clearSelectedSquareFromBuffer()\r\n                    this.setBufferSquareTarget(selectedSquare);\r\n                }\r\n            }\r\n        } else {\r\n            this.setBufferSquareTarget(selectedSquare);\r\n        }\r\n    }\r\n\r\n    panelControls() {\r\n        const self = this;\r\n        document.querySelectorAll('.button-add-fig').forEach(button => {\r\n            button.addEventListener('click', function(event) {\r\n                const targetElement = event.target || event.srcElement;\r\n                const letter = targetElement.getAttribute('data-letter');\r\n                const color = letter === letter.toUpperCase();\r\n                self.callBacks.onAdd(self.buffer.squareTarget, letter.toLowerCase(), color)\r\n                self.clearSelectedSquareFromBuffer();\r\n            }, false);\r\n        })\r\n\r\n\r\n        document.querySelectorAll('.button-marker').forEach(button => {\r\n            button.addEventListener('click', function(event) {\r\n                const targetElement = event.currentTarget;\r\n                const markerId = targetElement.getAttribute('data-marker-id');\r\n                self.callBacks.onAddMarker(self.buffer.squareTarget, markerId)\r\n                self.clearSelectedSquareFromBuffer();\r\n            }, false);\r\n        })\r\n\r\n        const buttonClearSquare = document.getElementById(\"button-clear-square\");\r\n        buttonClearSquare.addEventListener('click', function() {\r\n            self.callBacks.onClearSquare(self.buffer.squareTarget);\r\n            self.clearSelectedSquareFromBuffer();\r\n        }, false);\r\n\r\n        const buttonDomainW = document.getElementById(\"button-paint-domains-w\");\r\n        buttonDomainW.addEventListener('click', function() {\r\n            self.callBacks.onDomainW();\r\n        }, false);\r\n\r\n        const buttonDomainB = document.getElementById(\"button-paint-domains-b\");\r\n        buttonDomainB.addEventListener('click', function() {\r\n            self.callBacks.onDomainB();\r\n        }, false);\r\n\r\n\r\n        const buttonClear = document.getElementById(\"button-clear\");\r\n        buttonClear.addEventListener('click', function() {\r\n            self.callBacks.onClear();\r\n        }, false);\r\n\r\n        const buttonInit = document.getElementById(\"button-init\");\r\n        buttonInit.addEventListener('click', function() {\r\n            self.callBacks.onInit();\r\n        }, false);\r\n\r\n        const buttonDomainsToggle = document.getElementById(\"button-toggle-domains\");\r\n        buttonDomainsToggle.addEventListener('click', function() {\r\n            self.callBacks.onDomainsToggle();\r\n        }, false);\r\n\r\n\r\n\r\n        const buttonSquareDomains = document.getElementById(\"button-paint-domains-square\");\r\n        buttonSquareDomains.addEventListener('click', function() {\r\n            self.callBacks.onDomainsSquare(self.buffer.squareTarget);\r\n            self.clearSelectedSquareFromBuffer();\r\n        }, false);\r\n\r\n        const buttonSquareDomainSupport = document.getElementById(\"button-paint-support-square-domain\");\r\n        buttonSquareDomainSupport.addEventListener('click', function() {\r\n            self.callBacks.onShowSquareDomainSupport(self.buffer.squareTarget);\r\n            self.clearSelectedSquareFromBuffer();\r\n        }, false);\r\n\r\n        const buttonSquareDomainAttacks = document.getElementById(\"button-paint-domain-attack-square\");\r\n        buttonSquareDomainAttacks.addEventListener('click', function() {\r\n            self.callBacks.onDomainAttacksSquare(self.buffer.squareTarget);\r\n            self.clearSelectedSquareFromBuffer();\r\n        }, false);\r\n\r\n        const buttonSquareDomainDanger = document.getElementById(\"button-paint-domain-danger-square\");\r\n        buttonSquareDomainDanger.addEventListener('click', function() {\r\n            self.callBacks.onDomainDangerSquare(self.buffer.squareTarget);\r\n            self.clearSelectedSquareFromBuffer();\r\n        }, false);\r\n\r\n\r\n        const buttonSquareAttack = document.getElementById(\"button-paint-attack-square\");\r\n        buttonSquareAttack.addEventListener('click', function() {\r\n            self.callBacks.onShowAttackSquare(self.buffer.squareTarget);\r\n            self.clearSelectedSquareFromBuffer();\r\n        }, false);\r\n\r\n        const buttonSquareDanger = document.getElementById(\"button-paint-danger-square\");\r\n        buttonSquareDanger.addEventListener('click', function() {\r\n            self.callBacks.onDangerSquare(self.buffer.squareTarget);\r\n            self.clearSelectedSquareFromBuffer();\r\n        }, false);\r\n\r\n\r\n        const buttonFlipBoard = document.getElementById(\"button-board-flip\");\r\n        buttonFlipBoard.addEventListener('click', function() {\r\n            self.callBacks.onFlip(self.buffer.squareTarget);\r\n        }, false);\r\n\r\n        const buttonSquareSupport = document.getElementById(\"button-paint-support-square\");\r\n        buttonSquareSupport.addEventListener('click', function() {\r\n            self.callBacks.onShowSquareSupport(self.buffer.squareTarget);\r\n            self.clearSelectedSquareFromBuffer();\r\n        }, false);\r\n\r\n\r\n\r\n        const buttonVisualsRemove = document.getElementById(\"button-visuals-remove\");\r\n        buttonVisualsRemove.addEventListener('click', function() {\r\n            self.callBacks.onRemoveVisuals();\r\n        }, false);\r\n\r\n        const buttonMarkersToggle = document.getElementById(\"button-markers-toggle\");\r\n        buttonMarkersToggle.addEventListener('click', function() {\r\n            self.callBacks.onToggleMarkers();\r\n        }, false);\r\n\r\n        const buttonFenCreateBoard = document.getElementById(\"button-fen-create-board\");\r\n        buttonFenCreateBoard.addEventListener('click', function() {\r\n            self.callBacks.onLoadFenFromInput();\r\n        }, false);\r\n\r\n        const buttonFenCreateFen = document.getElementById(\"button-fen-create-fen\");\r\n        buttonFenCreateFen.addEventListener('click', function() {\r\n            self.callBacks.onLoadFenToInput();\r\n        }, false);\r\n\r\n        const buttonFenCreateLink = document.getElementById(\"button-fen-create-link\");\r\n        buttonFenCreateLink.addEventListener('click', function() {\r\n            self.callBacks.onCreateLink();\r\n        }, false);\r\n\r\n        const buttonNavPrev = document.getElementById(\"button-nav-prev\");\r\n        buttonNavPrev.addEventListener('click', function() {\r\n            self.callBacks.onNavPrev();\r\n        }, false);\r\n\r\n        const buttonNavNext = document.getElementById(\"button-nav-next\");\r\n        buttonNavNext.addEventListener('click', function() {\r\n            self.callBacks.onNavNext();\r\n        }, false);\r\n\r\n        const buttonNavRecord = document.getElementById(\"button-nav-record\");\r\n        buttonNavRecord.addEventListener('click', function() {\r\n            self.callBacks.onNavRecord();\r\n        }, false);\r\n\r\n        const buttonLoadPgn = document.getElementById(\"button-pgn-import\");\r\n        buttonLoadPgn.addEventListener('click', function() {\r\n            self.callBacks.onLoadPgn();\r\n        }, false);\r\n\r\n        const buttonReportBalanceWhites = document.getElementById(\"button-paint-report-balance-whites\");\r\n        buttonReportBalanceWhites.addEventListener('click', function() {\r\n            self.callBacks.onDisplayReportBalanceWhites();\r\n        }, false);\r\n\r\n        const buttonReportBalanceBlacks = document.getElementById(\"button-paint-report-balance-blacks\");\r\n        buttonReportBalanceBlacks.addEventListener('click', function() {\r\n            self.callBacks.onDisplayReportBalanceBlacks();\r\n        }, false);\r\n\r\n    }\r\n\r\n    async setBufferSquareTarget(squareName) {\r\n        this.buffer.squareTarget = squareName;\r\n        if (squareName) {\r\n            const item = document.getElementById(`base-${squareName}`);\r\n\r\n            if (item.classList.contains('with-selection')) {\r\n                item.classList.remove('with-selection');\r\n            } else {\r\n                item.classList.add('with-selection')\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    clearSelectedSquareFromBuffer() {\r\n        const squareName = this.buffer.squareTarget;\r\n        if (squareName) {\r\n            const item = document.getElementById(`base-${squareName}`);\r\n            if (item.classList.contains('with-selection')) {\r\n                item.classList.remove('with-selection');\r\n            }\r\n            this.buffer.squareTarget = null;\r\n        }\r\n    }\r\n\r\n    clearBufferAndSelection() {\r\n        this.buffer.squareTarget = null;\r\n\r\n        document.querySelectorAll('.base').forEach(squareBase => {\r\n            squareBase.classList.remove('with-selection');\r\n        })\r\n\r\n    }\r\n}","function getParamsFromUrl(url) {\r\n    const params = {};\r\n    let parser = document.createElement('a');\r\n    parser.href = url;\r\n    const query = parser.search.substring(1);\r\n    if (!query) {\r\n        return params;\r\n    }\r\n    const vars = query.split('&');\r\n    for (let i = 0; i < vars.length; i++) {\r\n        const pair = vars[i].split('=');\r\n        params[pair[0]] = decodeURIComponent(pair[1]);\r\n    }\r\n    return params;\r\n};\r\n\r\nexport default {\r\n    getParamsFromUrl\r\n}","import Chess from './js/Chess.js'\r\nimport Url from './js/utils/url.js'\r\nimport './index.scss';\r\n\r\nconst urlParams = Url.getParamsFromUrl(window.location.href);\r\n\r\nlet fenToLoad = null;\r\nif ('fen' in urlParams) {\r\n    fenToLoad = urlParams.fen;\r\n}\r\n\r\nconst configA = {\r\n    fen: fenToLoad,\r\n    asIcon: true,\r\n    asLines: true,\r\n    withLimitation: true,\r\n    flip: false\r\n};\r\n\r\nconst chess = new Chess(configA);\r\n","import { rows, cols, fenBase, white, black, figures, flankC } from './chess/chess-const.js';\r\nimport MovesRegistry from './MovesRegistry.js';\r\nimport Utils from './chess/chess-utils.js';\r\nimport Squares from './chess/chess-squares.js';\r\nimport Svg from './chess/chess-svg.js';\r\nimport Clipboard from './utils/clipboard.js';\r\nimport ChessControls from './chess/chess-controls.js';\r\nimport MockPgn01 from './mocks/pgn-01.mocks';\r\n\r\nexport default class Chess {\r\n\r\n    constructor(config) {\r\n        // Init\r\n        this.config = Utils.parseConfig(config);\r\n\r\n        this.figures = figures;\r\n        this.colors = {\r\n            white: white,\r\n            black: black,\r\n        };\r\n\r\n        this.movesRegistry = new MovesRegistry();\r\n\r\n        // Run\r\n        this.squaresMap = Utils.createSquaresMap(rows, cols);\r\n        this.markersMap = Utils.createMarkersMap(rows, cols);\r\n\r\n        const fenStr = config.fen || fenBase;\r\n\r\n        this.fenToMap(fenStr);\r\n        this.render();\r\n        this.chessControls = new ChessControls(this.actionsBridge);\r\n\r\n        this.state = {\r\n            isDomainWhiteOn: false,\r\n            isDomainBlackOn: false,\r\n            move: null\r\n        }\r\n\r\n        this.record();\r\n    }\r\n\r\n    lab() {\r\n\r\n        // Utils.changeHistoryWithFen(fenInputStr);\r\n        // this.drawPiecesFromMap();\r\n\r\n        //this.drawFlankCenterDomains();\r\n        // Svg.drawMarkerInSquare('e4', 'id');\r\n        // this.addMarkerToSquare('e4', 'marker-circle-white');\r\n        // this.actionsBridge.onDomainB()\r\n    }\r\n\r\n    labMoves() {\r\n        // In progress\r\n        //this.move('a2', 'a3');\r\n\r\n    }\r\n\r\n    // ----------------------------------------------- Pieces & Board\r\n    fenToMap(fen) {\r\n        if (!fen || fen === '') {\r\n            return\r\n        }\r\n        const fenAsObj = Utils.parseFenStrToObject(fen);\r\n        this.squaresMap = new Map(Object.entries(fenAsObj));\r\n    }\r\n\r\n    async render() {\r\n        this.drawBoard().then(() => {\r\n            this.chessControls.squareControls();\r\n            this.lab()\r\n        });\r\n    }\r\n\r\n    flipBoard() {\r\n        this.config.flip = !this.config.flip;\r\n        const squares = document.querySelectorAll(\".square\");\r\n        const boardCoordinate = document.querySelectorAll(\".board-coordinate\");\r\n        squares.forEach(squareNode => {\r\n            squareNode.remove();\r\n        });\r\n        boardCoordinate.forEach(squareNode => {\r\n            squareNode.remove();\r\n        })\r\n\r\n        this.render();\r\n    }\r\n\r\n    async move(originSquare, targetSquare) {\r\n\r\n        const originPiece = this.squaresMap.get(originSquare);\r\n        if (originPiece) {\r\n            this.setFigureInSquare(targetSquare, originPiece.letter, originPiece.color);\r\n            this.setFigureInSquare(originSquare, null);\r\n            this.drawPiecesFromMap();\r\n            // this.movesRegistry.saveMove(originSquare, targetSquare, this.squaresMap);\r\n            // this.drawRemoveLastStepMoveMarker();\r\n            // this.addMarkerToSquare( originSquare, 'marker-move-last' );\r\n            // this.addMarkerToSquare( targetSquare, 'marker-move-last' );\r\n            const currentFen = Utils.parseMapToFenStr(this.squaresMap);\r\n            Utils.changeHistoryWithFen(currentFen);\r\n\r\n            this.setMoveState(originSquare, targetSquare);\r\n            // COM: RePaint domains on move\r\n            if (this.state.isDomainWhiteOn) {\r\n                this.drawDomainByColor(white);\r\n            }\r\n            if (this.state.isDomainBlackOn) {\r\n                this.drawDomainByColor(black);\r\n            }\r\n            return true;\r\n        }\r\n    }\r\n\r\n    setMoveState(originSquare, targetSquare) {\r\n        this.state.move = {\r\n            from: originSquare,\r\n            to: targetSquare,\r\n        };\r\n    }\r\n\r\n\r\n    loadFenFromInput() {\r\n        const fenInputStr = document.getElementById(\"fen-input\").value;\r\n        this.fenToMap(fenInputStr);\r\n        Utils.changeHistoryWithFen(fenInputStr);\r\n        this.drawPiecesFromMap();\r\n    }\r\n\r\n    loadFenToInput() {\r\n        const currentFen = Utils.parseMapToFenStr(this.squaresMap);\r\n        Utils.changeHistoryWithFen(currentFen);\r\n        document.getElementById(\"fen-input\").value = currentFen;\r\n    }\r\n\r\n    loadPgnFromInput() {\r\n        const pgnInputStr = document.getElementById(\"pgn-input\").value;\r\n        this.renderPgnToBoard(pgnInputStr);\r\n\r\n    }\r\n\r\n    renderPgnToBoard(pgnInputStr) {\r\n        const notations = Utils.parsePgn(pgnInputStr);\r\n\r\n        let cursorColor = white;\r\n        const r = [];\r\n        notations.forEach(notation => {\r\n            const notationParts = Utils.parsePgnNotation(notation, cursorColor);\r\n            cursorColor = !cursorColor;\r\n            r.push(notationParts)\r\n        });\r\n\r\n        r.forEach(rItems => {\r\n            rItems.forEach(rItem => {\r\n                const { figure, squareFrom, squareTo, color, eat } = rItem;\r\n                let flag = false;\r\n                this.squaresMap.forEach((squareValue, squareKey) => {\r\n                    if (!flag && squareFrom === squareKey) {\r\n                        this.setFigureInSquare(squareTo, figure, color);\r\n                        this.setFigureInSquare(squareFrom, null);\r\n                        this.setMoveState(squareFrom, squareTo);\r\n                        this.record();\r\n                        flag = true;\r\n                    } else if (!flag && squareValue && squareValue.color === color && squareValue.letter === figure) {\r\n                        const options = this.getSquarePieceAllowedSquares(squareKey, null, true);\r\n                        if (options.includes(squareTo)) {\r\n                            // check rItem.eat for Pawns, if false, should be same column option square\r\n                            // also jump\r\n                            if (figure === 'p') {\r\n                                const keyCol = squareKey.split('')[0];\r\n                                const squareToCol = squareTo.split('')[0];\r\n                                if (!eat && keyCol !== squareToCol) {\r\n                                    return\r\n                                }\r\n                            }\r\n\r\n                            this.setFigureInSquare(squareKey, null);\r\n                            this.setFigureInSquare(squareTo, figure, color);\r\n                            this.setMoveState(squareKey, squareTo);\r\n                            this.record();\r\n                            flag = true;\r\n                        }\r\n                    }\r\n                })\r\n\r\n            })\r\n        })\r\n\r\n        this.drawPiecesFromMap();\r\n    }\r\n\r\n    // ----------------------------------------------- Moves control\r\n\r\n    drawFromMove(move) {\r\n        // analog to this.move()\r\n        this.fenToMap(move.fen);\r\n        this.drawPiecesFromMap();\r\n        // this.drawRemoveLastStepMoveMarker();\r\n        // this.addMarkerToSquare( move.from, 'marker-move-last' );\r\n        // this.addMarkerToSquare( move.to, 'marker-move-last' );\r\n        Utils.changeHistoryWithFen(move.fen);\r\n        // COM: RePaint domains on move\r\n        if (this.state.isDomainWhiteOn) {\r\n            this.drawDomainByColor(white);\r\n        }\r\n        if (this.state.isDomainBlackOn) {\r\n            this.drawDomainByColor(black);\r\n        }\r\n    }\r\n\r\n    record() {\r\n        const from = this.state.move ? this.state.move.from : null;\r\n        const to = this.state.move ? this.state.move.to : null;\r\n        this.movesRegistry.saveMove(from, to, this.squaresMap);\r\n    }\r\n\r\n    // ----------------------------------------------- Map fcts\r\n\r\n    setFigureInSquare(squareName, letter, color = white) {\r\n        this.squaresMap.set(squareName, Utils.asSquare(letter, color));\r\n    }\r\n\r\n    addMarkerToSquare(squareName, markerId, forceRemove = false) {\r\n        if (!squareName) {\r\n            return\r\n        }\r\n        const squareMarkers = this.markersMap.get(squareName);\r\n\r\n        const selectedMarkerIdInSquare = squareMarkers.indexOf(markerId);\r\n        if (selectedMarkerIdInSquare === -1) {\r\n            squareMarkers.push(markerId);\r\n            this.markersMap.set(squareName, squareMarkers);\r\n            Svg.drawMarkerInSquare(squareName, markerId);\r\n        }\r\n        if (forceRemove && selectedMarkerIdInSquare > -1) {\r\n            squareMarkers.splice(selectedMarkerIdInSquare, 1);\r\n            this.markersMap.set(squareName, squareMarkers);\r\n            this.drawMarkersFromMapBySquareName(squareName);\r\n        }\r\n    }\r\n\r\n    // ----------------------------------------------- Draw: Markers, Pieces\r\n\r\n\r\n    drawFlankCenterDomains() {\r\n        const targetRows = [6, 5, 4, 3];\r\n        const classNameDomain = 'with-flank';\r\n        flankC.forEach(flankCColLetter => {\r\n            targetRows.forEach(row => {\r\n                const squareName = Utils.getCellKey(flankCColLetter, row);\r\n                document.getElementById(`base-${squareName}`).classList.add(classNameDomain);\r\n            })\r\n        })\r\n    }\r\n    drawRemoveLastStepMoveMarker() {\r\n        this.markersMap.forEach(markerItemList => {\r\n            const markerIdx = markerItemList.indexOf('marker-move-last');\r\n            if (markerIdx > -1) {\r\n                markerItemList.splice(markerIdx, 1);\r\n            }\r\n        })\r\n        this.drawMarkersFromMap();\r\n    }\r\n\r\n    async drawBoard() {\r\n        const svg = document.getElementById(\"svg-squares\");\r\n        const svgCoordinates = document.getElementById(\"svg-coordinates\");\r\n        const flip = this.config.flip;\r\n        const flipedRows = flip ? [...rows].reverse() : rows;\r\n        const flipedCols = flip ? [...cols].reverse() : cols;\r\n\r\n        flipedRows.forEach((row, rowIdx) => {\r\n            flipedCols.forEach((colLetter, colIdx) => {\r\n                const squareEl = Svg.createSquare(colLetter, colIdx, row, rowIdx, this.config.asIcon);\r\n                svg.appendChild(squareEl);\r\n            })\r\n        })\r\n        this.drawPiecesFromMap();\r\n        const coordinatesItems = Svg.createCoordinates(flipedRows, flipedCols);\r\n        coordinatesItems.forEach(coorItem => {\r\n            svgCoordinates.appendChild(coorItem);\r\n        })\r\n    }\r\n\r\n    drawPiecesFromMap() {\r\n        this.squaresMap.forEach((squareEntry, squareKey) => {\r\n            if (squareEntry) {\r\n                let figureText = '';\r\n                const entryFigure = figures[squareEntry.letter];\r\n                if (this.config.asIcon === true) {\r\n                    figureText = entryFigure.asIcon(squareEntry.color);\r\n                } else {\r\n                    figureText = entryFigure.asLetter(squareEntry.color);\r\n                }\r\n                Svg.setPieceInSquare(squareKey, figureText, squareEntry.color)\r\n            } else {\r\n                Svg.setPieceInSquare(squareKey)\r\n            }\r\n        })\r\n    }\r\n\r\n    drawMarkersFromMap() {\r\n        this.markersMap.forEach((markerEntry, squareKey) => {\r\n            Svg.removeSquareMarkers(squareKey);\r\n            markerEntry.forEach(markerItemId => {\r\n                Svg.drawMarkerInSquare(squareKey, markerItemId);\r\n            })\r\n        })\r\n    }\r\n\r\n    drawMarkersFromMapBySquareName(squareName) {\r\n        //remove all markers first\r\n        Svg.removeSquareMarkers(squareName);\r\n        // Redraw markers from map\r\n        const squareMarkers = this.markersMap.get(squareName);\r\n        squareMarkers.forEach(markerItemId => {\r\n            Svg.drawMarkerInSquare(squareName, markerItemId);\r\n        })\r\n    }\r\n\r\n    drawRemoveAllMarkers() {\r\n        this.markersMap = Utils.createMarkersMap(rows, cols);\r\n        this.drawMarkersFromMap()\r\n    }\r\n\r\n    // ----------------------------------------------- Engine\r\n\r\n\r\n    boardSquareDangerSupportRepor(selfColor = white) {\r\n\r\n        this.squaresMap.forEach((squareMapValueA, squareMapKeyA) => {\r\n            let countSupport = 0;\r\n            let countDanger = 0;\r\n            this.squaresMap.forEach((squareMapValueB, squareMapKeyB) => {\r\n                const piece = squareMapValueB;\r\n                if (!piece) {\r\n                    return\r\n                }\r\n                const squareMapSquareOptions = this.getSquarePieceAllowedSquares(squareMapKeyB);\r\n                if (squareMapSquareOptions.includes(squareMapKeyA)) {\r\n\r\n                    if (squareMapValueA && squareMapValueB && squareMapValueA.color === squareMapValueB.color) {\r\n                        countSupport += 1;\r\n                    } else if (squareMapValueA && squareMapValueB && squareMapValueA.color !== squareMapValueB.color) {\r\n                        countDanger += 1;\r\n                    } else if (!squareMapValueA) {\r\n                        if (piece.color === selfColor) {\r\n                            countSupport += 1;\r\n\r\n                        } else {\r\n                            countDanger += 1;\r\n                        }\r\n                    }\r\n\r\n                }\r\n\r\n            })\r\n            const colorType = Svg.mapNotationColorType(countSupport, countDanger, squareMapValueA, selfColor);\r\n            Svg.addMarkerNotation(squareMapKeyA, `${countSupport}-${countDanger}`, colorType);\r\n        })\r\n    }\r\n\r\n    getSquarePieceAllowedSquares(squareName, forcedPieceAndColor = null, allowPawnMove = false) {\r\n        const limitation = this.config.withLimitation;\r\n        const options = [];\r\n        if (!squareName) {\r\n            return;\r\n        }\r\n        const squareNameParts = squareName.split('');\r\n        const squareColumnLetter = squareNameParts[0];\r\n        const squareRowNumber = parseInt(squareNameParts[1], 10);\r\n        const { letter, color } = forcedPieceAndColor ? forcedPieceAndColor : this.squaresMap.get(squareName);\r\n        if (letter === 'r') {\r\n            const squareOptions = Squares.getSquaresOptionsFromSquareWithR(this.squaresMap, squareColumnLetter, squareRowNumber, limitation);\r\n            options.push(...squareOptions);\r\n        }\r\n        if (letter === 'n') {\r\n            const squareOptions = Squares.getSquaresOptionsFromSquareWithN(squareColumnLetter, squareRowNumber);\r\n            options.push(...squareOptions);\r\n        }\r\n        if (letter === 'p') {\r\n            const squareOptions = Squares.getSquaresOptionsFromSquareWithP(squareColumnLetter, squareRowNumber, color, allowPawnMove);\r\n            options.push(...squareOptions);\r\n        }\r\n        if (letter === 'b') {\r\n            const squareOptions = Squares.getSquaresOptionsFromSquareWithB(this.squaresMap, squareColumnLetter, squareRowNumber, limitation);\r\n            options.push(...squareOptions);\r\n        }\r\n        if (letter === 'q') {\r\n            const squareOptionsVertHorz = Squares.getSquaresOptionsFromSquareWithR(this.squaresMap, squareColumnLetter, squareRowNumber, limitation);\r\n            const squareOptionsDiagonal = Squares.getSquaresOptionsFromSquareWithB(this.squaresMap, squareColumnLetter, squareRowNumber, limitation);\r\n            options.push(...squareOptionsVertHorz, ...squareOptionsDiagonal);\r\n        }\r\n        if (letter === 'k') {\r\n            const squareOptions = Squares.getSquaresOptionsFromSquareWithK(squareColumnLetter, squareRowNumber);\r\n            options.push(...squareOptions);\r\n        }\r\n        return options;\r\n    }\r\n\r\n    drawDomainByColor(color = white) {\r\n        this.drawClearDomains(color);\r\n        if (color) {\r\n            this.state.isDomainWhiteOn = true;\r\n        } else {\r\n            this.state.isDomainBlackOn = true;\r\n        }\r\n        const domainClassName = Svg.getDomainClassNameByColor(color);\r\n        const squaresInDomain = []\r\n        this.squaresMap.forEach((squareEntry, squareName) => {\r\n            if (squareEntry && squareEntry.color === color) {\r\n                const squaresFromFigure = this.getSquarePieceAllowedSquares(squareName);\r\n                squaresInDomain.push(...squaresFromFigure);\r\n            }\r\n        })\r\n        squaresInDomain.forEach(squareName => {\r\n            // todo: domain from map\r\n            document.getElementById(`base-${squareName}`).classList.add(domainClassName);\r\n        })\r\n        return squaresInDomain;\r\n    }\r\n\r\n    drawDomainBySquare(squareName) {\r\n        const squarePiece = this.squaresMap.get(squareName);\r\n        if (squarePiece) {\r\n            const markerIdBySquareColor = Svg.getMarkerCircleIdByColor(squarePiece.color);\r\n            this.addMarkerToSquare(squareName, markerIdBySquareColor);\r\n            const squaresFromFigure = this.getSquarePieceAllowedSquares(squareName);\r\n            squaresFromFigure.forEach(domainSquareName => {\r\n                const classNameDomain = Svg.getDomainClassNameByColor(squarePiece.color);\r\n                // todo: domain from map\r\n                document.getElementById(`base-${domainSquareName}`).classList.add(classNameDomain);\r\n            })\r\n        }\r\n    }\r\n\r\n    drawClearDomains(color = white) {\r\n        if (color) {\r\n            this.state.isDomainWhiteOn = false;\r\n        } else {\r\n            this.state.isDomainBlackOn = false;\r\n        }\r\n        const classNameColor = Svg.getDomainClassNameByColor(color);\r\n        this.squaresMap.forEach((_, squareName) => {\r\n            // todo: domain from map\r\n            const classList = document.getElementById(`base-${squareName}`).classList;\r\n            classList.remove(classNameColor);\r\n        });\r\n    }\r\n\r\n    drawAttackFromSquare(squareName) {\r\n        if (!squareName) {\r\n            return;\r\n        }\r\n        const squarePiece = this.squaresMap.get(squareName);\r\n        if (squarePiece) {\r\n            const squareOptions = this.getSquarePieceAllowedSquares(squareName);\r\n            const markerIdByColor = Svg.getMarkerCircleIdByColor(squarePiece.color);\r\n            squareOptions.forEach(optionSquareKey => {\r\n                const pieceInOptionSquare = this.squaresMap.get(optionSquareKey);\r\n                if (pieceInOptionSquare && pieceInOptionSquare.color !== squarePiece.color) {\r\n                    // target!\r\n                    this.addMarkerToSquare(optionSquareKey, markerIdByColor);\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    drawAttackFromSquareDomain(squareName) {\r\n        if (!squareName) {\r\n            return;\r\n        }\r\n        const squarePiece = this.squaresMap.get(squareName);\r\n        if (squarePiece) {\r\n            const markerIdByColor = Svg.getMarkerCircleIdByColor(squarePiece.color);\r\n            const squareOptions = this.getSquarePieceAllowedSquares(squareName);\r\n            this.drawDomainBySquare(squareName);\r\n            squareOptions.forEach(domainSquareName => {\r\n                const ghostPieceInDomain = squarePiece;\r\n                const squareNextOptions = this.getSquarePieceAllowedSquares(domainSquareName, ghostPieceInDomain);\r\n                squareNextOptions.forEach(nextDomainSquareName => {\r\n                    const pieceInOptionSquare = this.squaresMap.get(nextDomainSquareName);\r\n                    if (pieceInOptionSquare && pieceInOptionSquare.color !== squarePiece.color) {\r\n                        // target!\r\n                        this.addMarkerToSquare(squareName, 'marker-circle-neutral');\r\n                        this.addMarkerToSquare(domainSquareName, markerIdByColor);\r\n                        this.addMarkerToSquare(nextDomainSquareName, markerIdByColor);\r\n                    }\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    drawDangerToSquare(squareName) {\r\n        if (!squareName) {\r\n            return;\r\n        }\r\n        let isSquareSave = true;\r\n        const squarePiece = this.squaresMap.get(squareName);\r\n        if (squarePiece) {\r\n            this.squaresMap.forEach((squareMapValue, squareMapKey) => {\r\n                if (squareMapKey !== squareName && squareMapValue && squareMapValue.color !== squarePiece.color) {\r\n                    const squareMapSquareOptions = this.getSquarePieceAllowedSquares(squareMapKey);\r\n                    // console.debug('[CHESS] drawAttacksToSquare: mapOptions', squareMapSquareOptions);\r\n                    if (squareMapSquareOptions.includes(squareName)) {\r\n                        isSquareSave = false;\r\n                        const markerIdByColor = Svg.getMarkerCircleIdByColor(squareMapValue.color);\r\n                        this.addMarkerToSquare(squareMapKey, markerIdByColor)\r\n                        this.drawDomainBySquare(squareMapKey);\r\n                    }\r\n                }\r\n            })\r\n            if (isSquareSave) {\r\n                this.addMarkerToSquare(squareName, 'marker-rect-ok');\r\n            } else {\r\n                const markerIdBySquareColor = Svg.getMarkerCircleIdByColor(squarePiece.color);\r\n                this.addMarkerToSquare(squareName, markerIdBySquareColor);\r\n            }\r\n        }\r\n    }\r\n\r\n    drawDangerToSquareDomain(squareName) {\r\n        if (!squareName) {\r\n            return;\r\n        }\r\n        let isSquareSave = true;\r\n        const squarePiece = this.squaresMap.get(squareName);\r\n        if (squarePiece) {\r\n            const squaresOptionsFromFigure = this.getSquarePieceAllowedSquares(squareName);\r\n            squaresOptionsFromFigure.forEach(domainSquareName => {\r\n                this.drawDomainBySquare(squareName);\r\n                this.squaresMap.forEach((squareMapValue, squareMapKey) => {\r\n                    if (squareMapKey !== squareName && squareMapValue && squareMapValue.color !== squarePiece.color) {\r\n                        const squareMapSquareOptions = this.getSquarePieceAllowedSquares(squareMapKey);\r\n                        // console.debug('[CHESS] drawAttacksToSquareDomain: mapOptions', squareMapSquareOptions);\r\n                        // console.debug('[CHESS] drawAttacksToSquareDomain: ´fgure', squaresOptionsFromFigure);\r\n\r\n                        const uniques = squaresOptionsFromFigure.filter(value => squareMapSquareOptions.includes(value));\r\n                        uniques.forEach((commonSquare) => {\r\n                            const markerIdByColor = Svg.getMarkerCircleIdByColor(squareMapValue.color);\r\n                            this.addMarkerToSquare(squareMapKey, markerIdByColor);\r\n                            this.addMarkerToSquare(commonSquare, markerIdByColor);\r\n\r\n                        })\r\n                        if (uniques.length > 0) {\r\n                            isSquareSave = false;\r\n                        }\r\n                    }\r\n                })\r\n            })\r\n            if (isSquareSave) {\r\n                this.addMarkerToSquare(squareName, 'marker-rect-ok');\r\n            } else {\r\n\r\n                this.addMarkerToSquare(squareName, 'marker-circle-neutral');\r\n            }\r\n        }\r\n    }\r\n\r\n    drawSupportToSquare(squareName) {\r\n        if (!squareName) {\r\n            return;\r\n        }\r\n        let isSquareSupported = false;\r\n        const squarePiece = this.squaresMap.get(squareName);\r\n        if (squarePiece) {\r\n            this.squaresMap.forEach((squareMapValue, squareMapKey) => {\r\n                if (squareMapKey !== squareName && squareMapValue && squareMapValue.color === squarePiece.color) {\r\n                    const squareMapSquareOptions = this.getSquarePieceAllowedSquares(squareMapKey);\r\n                    // console.debug('[CHESS] drawSupportToSquare: mapOptions', squareMapSquareOptions);\r\n                    if (squareMapSquareOptions.includes(squareName)) {\r\n                        isSquareSupported = true;\r\n                        const markerIdByColor = Svg.getMarkerCircleIdByColor(squareMapValue.color);\r\n                        this.addMarkerToSquare(squareMapKey, markerIdByColor)\r\n                        this.drawDomainBySquare(squareMapKey);\r\n                    }\r\n                }\r\n            })\r\n            if (isSquareSupported) {\r\n                this.addMarkerToSquare(squareName, 'marker-rect-ok');\r\n            } else {\r\n                this.addMarkerToSquare(squareName, 'marker-rect-error');\r\n            }\r\n        }\r\n    }\r\n\r\n    drawSupportToSquareDomain(squareName) {\r\n        if (!squareName) {\r\n            return;\r\n        }\r\n        let isSquareSupported = false;\r\n        const squarePiece = this.squaresMap.get(squareName);\r\n        if (squarePiece) {\r\n            this.drawDomainBySquare(squareName);\r\n\r\n            const squaresOptionsFromFigure = this.getSquarePieceAllowedSquares(squareName);\r\n            squaresOptionsFromFigure.forEach(domainSquareName => {\r\n\r\n                this.squaresMap.forEach((squareMapValue, squareMapKey) => {\r\n                    if (squareMapKey !== squareName && squareMapValue && squareMapValue.color === squarePiece.color) {\r\n                        const squareMapSquareOptions = this.getSquarePieceAllowedSquares(squareMapKey);\r\n                        // console.debug('[CHESS] drawSupportToSquareDomain: mapOptions', squareMapSquareOptions);\r\n                        // console.debug('[CHESS] drawSupportToSquareDomain: ´fgure', squaresOptionsFromFigure);\r\n                        const uniques = squaresOptionsFromFigure.filter(value => squareMapSquareOptions.includes(value));\r\n                        uniques.forEach((commonSquare) => {\r\n                            const markerIdByColor = Svg.getMarkerCircleIdByColor(squareMapValue.color);\r\n                            this.addMarkerToSquare(squareMapKey, markerIdByColor);\r\n                            this.addMarkerToSquare(commonSquare, markerIdByColor);\r\n\r\n                        })\r\n                        if (uniques.length > 0) {\r\n                            isSquareSupported = true;\r\n                        }\r\n                    }\r\n                })\r\n            })\r\n            if (isSquareSupported) {\r\n                this.addMarkerToSquare(squareName, 'marker-circle-neutral');\r\n            } else {\r\n                this.addMarkerToSquare(squareName, 'marker-rect-error');\r\n            }\r\n        }\r\n    }\r\n\r\n    // ----------------------------------------------- Control Actions Bridge\r\n    get actionsBridge() {\r\n        return {\r\n            onShowSquareSupport: (squareTarget) => {\r\n                this.drawSupportToSquare(squareTarget);\r\n            },\r\n            onShowSquareDomainSupport: (squareTarget) => {\r\n                this.drawSupportToSquareDomain(squareTarget);\r\n            },\r\n            onFlip: () => {\r\n                this.flipBoard()\r\n            },\r\n            movePiecesFromSquares: async(originSquare, targetSquare) => {\r\n                return this.move(originSquare, targetSquare);\r\n            },\r\n            onAddMarker: (squareTarget, markerId) => {\r\n                this.addMarkerToSquare(squareTarget, markerId, true);\r\n            },\r\n            onAdd: (square, letter, color) => {\r\n                if (!square) { return; }\r\n                this.setFigureInSquare(square, letter, color);\r\n                const currentFen = Utils.parseMapToFenStr(this.squaresMap);\r\n                Utils.changeHistoryWithFen(currentFen);\r\n                this.drawPiecesFromMap();\r\n            },\r\n            onClearSquare: (square) => {\r\n                if (!square) { return; }\r\n                this.setFigureInSquare(square, null);\r\n                const currentFen = Utils.parseMapToFenStr(this.squaresMap);\r\n                Utils.changeHistoryWithFen(currentFen);\r\n                this.drawPiecesFromMap();\r\n            },\r\n            onClear: () => {\r\n                this.squaresMap = Utils.createSquaresMap(rows, cols);\r\n                this.drawPiecesFromMap();\r\n                const currentFen = Utils.parseMapToFenStr(this.squaresMap);\r\n                Utils.changeHistoryWithFen(currentFen);\r\n                this.movesRegistry.reset();\r\n                this.movesRegistry.record();\r\n            },\r\n            onInit: () => {\r\n                this.fenToMap(fenBase);\r\n                this.drawPiecesFromMap();\r\n                Utils.changeHistoryWithFen(fenBase);\r\n\r\n                this.movesRegistry.reset();\r\n                this.movesRegistry.record();\r\n            },\r\n            onDomainW: async() => {\r\n                if (!this.state.isDomainWhiteOn) {\r\n                    this.drawDomainByColor(white);\r\n                } else {\r\n                    this.drawClearDomains(white);\r\n                }\r\n            },\r\n            onDomainB: async() => {\r\n                if (!this.state.isDomainBlackOn) {\r\n                    this.drawDomainByColor(black);\r\n                } else {\r\n                    this.drawClearDomains(black);\r\n                }\r\n            },\r\n            onDomainsToggle: async() => {\r\n                if (this.state.isDomainWhiteOn || this.state.isDomainBlackOn) {\r\n                    this.drawClearDomains(white);\r\n                    this.drawClearDomains(black);\r\n                } else {\r\n                    this.drawDomainByColor(white);\r\n                    this.drawDomainByColor(black);\r\n                }\r\n            },\r\n            onDomainsSquare: async(squareName) => {\r\n                this.drawDomainBySquare(squareName);\r\n            },\r\n            onDomainDangerSquare: async(squareName) => {\r\n                this.drawDangerToSquareDomain(squareName);\r\n            },\r\n            onDomainAttacksSquare: async(squareName) => {\r\n                this.drawAttackFromSquareDomain(squareName);\r\n            },\r\n            onShowAttackSquare: async(squareName) => {\r\n                this.drawAttackFromSquare(squareName)\r\n            },\r\n            onDangerSquare: async(squareName) => {\r\n                this.drawDangerToSquare(squareName)\r\n            },\r\n            onRemoveVisuals: () => {\r\n                this.drawRemoveAllMarkers();\r\n                this.drawClearDomains(white);\r\n                this.drawClearDomains(black);\r\n            },\r\n            onToggleMarkers: () => {\r\n                Svg.toggleShowMarkersContainer();\r\n\r\n            },\r\n            onLoadFenFromInput: () => {\r\n                this.loadFenFromInput();\r\n            },\r\n            onLoadFenToInput: () => {\r\n                this.loadFenToInput();\r\n            },\r\n            onCreateLink: () => {\r\n                const currentFen = Utils.parseMapToFenStr(this.squaresMap);\r\n                const linkHref = Utils.getAbsoluteRouteWithFen(currentFen);\r\n                Clipboard.addTextToClipboard(linkHref);\r\n\r\n            },\r\n            onNavPrev: () => {\r\n                const move = this.movesRegistry.prevMove;\r\n                if (!move) {\r\n                    return;\r\n                }\r\n                this.drawFromMove(move);\r\n            },\r\n            onNavNext: () => {\r\n                const move = this.movesRegistry.nextMove;\r\n                if (!move) {\r\n                    return;\r\n                }\r\n                this.drawFromMove(move);\r\n            },\r\n            onNavRecord: () => {\r\n                this.record();\r\n            },\r\n            onLoadPgn: () => {\r\n                this.loadPgnFromInput()\r\n            },\r\n            onDisplayReportBalanceWhites: () => {\r\n                this.drawRemoveAllMarkers();\r\n                this.boardSquareDangerSupportRepor(white)\r\n            },\r\n            onDisplayReportBalanceBlacks: () => {\r\n                this.drawRemoveAllMarkers();\r\n                this.boardSquareDangerSupportRepor(black);\r\n            }\r\n\r\n\r\n        }\r\n    }\r\n\r\n}"],"sourceRoot":""}