{"version":3,"sources":["webpack://chess-analysis-board/./src/js/Figure.js","webpack://chess-analysis-board/./src/js/chess/chess-const.js","webpack://chess-analysis-board/./src/js/chess/chess-utils.js","webpack://chess-analysis-board/./src/js/MovesRegistry.js","webpack://chess-analysis-board/./src/js/chess/chess-squares.js","webpack://chess-analysis-board/./src/js/chess/chess-svg.js","webpack://chess-analysis-board/./src/js/chess/chess-controls.js","webpack://chess-analysis-board/./src/index.js","webpack://chess-analysis-board/./src/js/Chess.js"],"names":["Figure","config","this","letterW","iconW","letterB","iconB","color","rows","cols","fenBase","white","black","figures","b","r","n","k","q","p","getCellKey","colLetter","rowNumber","asSquare","letter","createSquaresMap","listCells","forEach","row","col","cellKey","push","Map","createMarkersMap","parseFenStrToObject","fen","squaresKeyVal","allowedLetters","split","rowText","rowIdw","boardRowIdx","currentCol","character","includes","toUpperCase","figureLetter","toLowerCase","jumpCols","parseInt","c","parseMapToFenStr","squaresMap","fenSquarePositions","emptyAccumulator","rowIdx","squareName","squarePiece","get","toString","pieceLetter","length","MovesRegistry","moves","moveIdx","squareFrom","squareTo","moveEntry","from","to","squareColumLetter","squareRowNumber","limitation","currentColumnIdx","indexOf","squares","y","lastSquare","x","yx","cellY","xy","xInc","div","type","typeMarker","squareNode","document","getElementById","use","createElementNS","setAttribute","appendChild","squareLetter","colIdx","rowInt","asIcon","content","squareEl","innerHTML","className","classList","add","notClassName","contains","remove","textContent","flipedRows","flipedCols","elements","idx","textEl","textNode","createTextNode","children","i","markersItems","querySelectorAll","invisibleClassName","markerItem","ChessControl","callBacks","buffer","squareTarget","panelControls","self","boardSquare","addEventListener","event","targetSquareName","target","srcElement","getAttribute","checkOnSelectSquare","selectedSquare","movePiecesFromSquares","clearBufferAndSelection","clearSelectedSquareFromBuffer","setBufferSquareTarget","button","onAdd","markerId","currentTarget","onAddMarker","onClearSquare","onDomainW","onDomainB","onClear","onInit","onDomainsToggle","onDomainsSquare","onDomainAttacksSquare","onAttacksSquare","onFlip","onShowSquareSupport","onShowSquareDomainSupport","onRemoveVisuals","onToggleMarkers","onLoadFenFromInput","item","squareBase","flip","asLines","withLimitation","colors","movesRegistry","markersMap","fenStr","fenToMap","render","chessControls","actionsBridge","state","isDomainWhiteOn","isDomainBlackOn","move","console","log","currentMoveIdx","setTimeout","jumpToMove","fenAsObj","Object","entries","drawBoard","then","squareControls","lab","boardCoordinate","originSquare","targetSquare","originPiece","setFigureInSquare","drawPiecesFromMap","saveMove","fenInputStr","value","drawMarkerInSquare","set","forceRemove","squareMarkers","selectedMarkerIdInSquare","splice","drawMarkersFromMapBySquareName","svg","svgCoordinates","reverse","coorItem","squareEntry","squareKey","figureText","entryFigure","asLetter","markerEntry","markerItemId","drawMarkersFromMap","options","squareNameParts","squareColumnLetter","squareOptions","squareOptionsVertHorz","squareOptionsDiagonal","domainClassName","getDomainClassNameByColor","squaresInDomain","squaresFromFigure","getSquarePieceAllowedSquares","markerIdBySquareColor","getMarkerCircleIdByColor","addMarkerToSquare","domainSquareName","classNameDomain","classNameColor","_","isSquareSave","squareMapValue","squareMapKey","markerIdByColor","drawDomainBySquare","squaresOptionsFromFigure","squareMapSquareOptions","uniques","filter","commonSquare","isSquareSupported","debug","drawSupportToSquare","drawSupportToSquareDomain","flipBoard","async","square","drawClearDomains","drawDomainByColor","drawAttacksToSquareDomain","drawAttacksToSquare","drawRemoveAllMarkers","loadFenFromInput"],"mappings":"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","file":"main.c425276272b0671346a5.js","sourcesContent":["export default class Figure {\r\n    constructor(config) {\r\n        this.letterW = config.letterW\r\n        this.iconW = config.iconW;\r\n        this.letterB = config.letterB;\r\n        this.iconB = config.iconB;\r\n    }\r\n\r\n    asLetter(color = true) {\r\n        if (color) {\r\n            return this.letterW;\r\n        }\r\n        return this.letterB;\r\n    }\r\n\r\n    asIcon(color = true) {\r\n        if (color) {\r\n            return this.iconW;\r\n        }\r\n        return this.iconB;\r\n    }\r\n}","import Figure from '../Figure.js'\r\n\r\nexport const rows = [8, 7, 6, 5, 4, 3, 2, 1];\r\nexport const cols = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];\r\n\r\nexport const fenBase = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1';\r\n\r\nexport const flankQ = ['a', 'b', 'c', 'd', ];\r\nexport const flankK = ['e', 'f', 'g', 'h', ];\r\n\r\nexport const white = true;\r\nexport const black = false;\r\n\r\nexport const figures = {\r\n    b: new Figure({ letterW: 'B', iconW: '♗', letterB: 'b', iconB: '♝' }),\r\n    r: new Figure({ letterW: 'R', iconW: '♖', letterB: 'r', iconB: '♜' }),\r\n    n: new Figure({ letterW: 'N', iconW: '♘', letterB: 'n', iconB: '♞' }),\r\n    k: new Figure({ letterW: 'K', iconW: '♔', letterB: 'k', iconB: '♚' }),\r\n    q: new Figure({ letterW: 'Q', iconW: '♕', letterB: 'q', iconB: '♛' }),\r\n    p: new Figure({ letterW: 'P', iconW: '♙', letterB: 'p', iconB: '♟' }),\r\n};","import { cols, white, } from './chess-const.js'\r\n\r\n\r\nfunction getCellKey(colLetter, rowNumber) {\r\n    return `${colLetter}${rowNumber}`;\r\n}\r\n\r\nfunction createSquaresMap(rows, cols) {\r\n    const listCells = [];\r\n    rows.forEach((row) => {\r\n        cols.forEach((col) => {\r\n            const cellKey = getCellKey(col, row);\r\n            listCells.push([cellKey, null]);\r\n        })\r\n    })\r\n    return new Map(listCells);\r\n}\r\n\r\nfunction createMarkersMap(rows, cols) {\r\n    const listCells = [];\r\n    rows.forEach((row) => {\r\n        cols.forEach((col) => {\r\n            const cellKey = getCellKey(col, row);\r\n            listCells.push([cellKey, []]);\r\n        })\r\n    })\r\n    return new Map(listCells);\r\n}\r\n\r\n\r\nfunction asSquare(letter, color = white) {\r\n    if (letter) {\r\n        return {\r\n            letter: letter,\r\n            color: color,\r\n        };\r\n    } else {\r\n        return null\r\n    }\r\n\r\n}\r\n\r\nfunction parseMapToFenStr(squaresMap) {\r\n    const rows = [8, 7, 6, 5, 4, 3, 2, 1];\r\n    const cols = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];\r\n\r\n    let fenSquarePositions = '';\r\n\r\n    let emptyAccumulator = 0;\r\n\r\n    rows.forEach((row, rowIdx) => {\r\n        emptyAccumulator = 0;\r\n        cols.forEach((col) => {\r\n            const squareName = getCellKey(col, row);\r\n            const squarePiece = squaresMap.get(squareName)\r\n\r\n            if (squarePiece) {\r\n                if (emptyAccumulator !== 0) {\r\n                    fenSquarePositions += emptyAccumulator.toString();\r\n                    emptyAccumulator = 0;\r\n                }\r\n                const pieceLetter = squarePiece.color ? squarePiece.letter.toUpperCase() : squarePiece.letter.toLowerCase()\r\n                fenSquarePositions += pieceLetter;\r\n\r\n            } else {\r\n                emptyAccumulator += 1;\r\n            }\r\n\r\n        })\r\n        if (emptyAccumulator !== 0) {\r\n            fenSquarePositions += emptyAccumulator.toString();\r\n        }\r\n        if (rowIdx < rows.length - 1) {\r\n            fenSquarePositions += '/';\r\n        }\r\n\r\n    })\r\n    const fen = fenSquarePositions\r\n    return fen;\r\n}\r\n\r\nfunction parseFenStrToObject(fen) {\r\n\r\n    const squaresKeyVal = {};\r\n    const allowedLetters = ['r', 'n', 'b', 'k', 'q', 'p', 'R', 'N', 'B', 'K', 'Q', 'P'];\r\n    const fenFiguresSeparator = ' ';\r\n    const fenRowsSeparator = '/';\r\n\r\n    const figuresPart = fen.split(fenFiguresSeparator)[0];\r\n    const strRows = figuresPart.split(fenRowsSeparator);\r\n\r\n    strRows.forEach((rowText, rowIdw) => {\r\n        const boardRowIdx = 8 - rowIdw; // to flip the board ->  rowIdw + 1\r\n        let currentCol = 1;\r\n        rowText.split('').forEach((character) => {\r\n            if (allowedLetters.includes(character)) {\r\n                // it´s a figure letter\r\n                const colLetter = cols[currentCol - 1];\r\n                const cellKey = getCellKey(colLetter, boardRowIdx);\r\n                const color = (character == character.toUpperCase()); // R -> true\r\n                const figureLetter = character.toLowerCase();\r\n                squaresKeyVal[cellKey] = asSquare(figureLetter, color);\r\n                currentCol += 1;\r\n\r\n            } else {\r\n                // should be a number\r\n                const jumpCols = parseInt(character, 10)\r\n                for (let c = currentCol; c < jumpCols + currentCol; c++) {\r\n                    const colLetter = cols[c - 1];\r\n                    const cellKey = getCellKey(colLetter, boardRowIdx);\r\n                    squaresKeyVal[cellKey] = null;\r\n                }\r\n                currentCol += parseInt(character, 10);\r\n            }\r\n        })\r\n    });\r\n\r\n    return squaresKeyVal;\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default {\r\n    getCellKey,\r\n    createSquaresMap,\r\n    createMarkersMap,\r\n    parseFenStrToObject,\r\n    parseMapToFenStr,\r\n    asSquare\r\n}","import Utils from './chess/chess-utils.js';\r\n\r\nexport default class MovesRegistry {\r\n\r\n    constructor() {\r\n        this.moves = [];\r\n        this.moveIdx = 0;\r\n    }\r\n\r\n    saveMove(squareFrom, squareTo, squaresMap) {\r\n        const fen = Utils.parseMapToFenStr(squaresMap);\r\n        const moveEntry = {\r\n            from: squareFrom,\r\n            to: squareTo,\r\n            fen: fen\r\n        }\r\n        this.moves.push(moveEntry);\r\n        this.moveIdx = this.moves.length - 1;\r\n    }\r\n\r\n    get currentMoveIdx() {\r\n        return this.moveIdx;\r\n    }\r\n\r\n\r\n}","import { cols } from './chess-const.js';\r\nimport Utils from './chess-utils.js';\r\n\r\n\r\nfunction getSquaresOptionsFromSquareWithR(\r\n    squaresMap,\r\n    squareColumLetter,\r\n    squareRowNumber,\r\n    limitation = false\r\n) {\r\n    const currentColumnIdx = cols.indexOf(squareColumLetter);\r\n    const squares = [];\r\n    for (let y = squareRowNumber - 1; y >= 1; y--) {\r\n        squares.push(Utils.getCellKey(squareColumLetter, y));\r\n        const lastSquare = squares[squares.length - 1];\r\n        if (squaresMap.get(lastSquare) && limitation) {\r\n            break;\r\n        }\r\n    }\r\n    for (let y = squareRowNumber + 1; y <= 8; y++) {\r\n        squares.push(Utils.getCellKey(squareColumLetter, y));\r\n        const lastSquare = squares[squares.length - 1];\r\n        if (squaresMap.get(lastSquare) && limitation) {\r\n            break;\r\n        }\r\n    }\r\n    for (let x = currentColumnIdx + 1; x < cols.length; x++) {\r\n        squares.push(Utils.getCellKey(cols[x], squareRowNumber));\r\n        const lastSquare = squares[squares.length - 1];\r\n        if (squaresMap.get(lastSquare) && limitation) {\r\n            break;\r\n        }\r\n    }\r\n    for (let x = currentColumnIdx - 1; x >= 0; x--) {\r\n        squares.push(Utils.getCellKey(cols[x], squareRowNumber));\r\n        const lastSquare = squares[squares.length - 1];\r\n        if (squaresMap.get(lastSquare) && limitation) {\r\n            break;\r\n        }\r\n    }\r\n    return squares;\r\n}\r\n\r\n\r\nfunction getSquaresOptionsFromSquareWithN(\r\n    squareColumLetter,\r\n    squareRowNumber\r\n) {\r\n    const currentColumnIdx = cols.indexOf(squareColumLetter);\r\n    const squares = [];\r\n    const nCombisYX = [\r\n        [2, 1],\r\n        [1, 2],\r\n        [-1, 2],\r\n        [-2, 1],\r\n        [-2, -1],\r\n        [-1, -2],\r\n        [1, -2],\r\n        [2, -1],\r\n    ];\r\n    nCombisYX.forEach((yx) => {\r\n        const y = squareRowNumber + yx[0];\r\n        const x = currentColumnIdx + yx[1];\r\n        if (x >= 0 && x < cols.length && y > 0 && y <= 8) {\r\n            squares.push(Utils.getCellKey(cols[x], y));\r\n        }\r\n    })\r\n    return squares;\r\n}\r\n\r\n\r\nfunction getSquaresOptionsFromSquareWithP(\r\n    squareColumLetter,\r\n    squareRowNumber,\r\n    color\r\n) {\r\n    const currentColumnIdx = cols.indexOf(squareColumLetter);\r\n    const squares = [];\r\n    const cellY = color ? squareRowNumber + 1 : squareRowNumber - 1;\r\n    const pCombis = [\r\n        [1, cellY],\r\n        [-1, cellY]\r\n    ];\r\n    pCombis.forEach((xy) => {\r\n        const x = currentColumnIdx + xy[0];\r\n        const y = xy[1];\r\n        if (x >= 0 && x < cols.length && y > 0 && y <= 8) {\r\n            squares.push(Utils.getCellKey(cols[x], y));\r\n        }\r\n    });\r\n    return squares;\r\n}\r\n\r\n\r\nfunction getSquaresOptionsFromSquareWithB(\r\n    squaresMap,\r\n    squareColumLetter,\r\n    squareRowNumber,\r\n    limitation = false\r\n) {\r\n    const currentColumnIdx = cols.indexOf(squareColumLetter);\r\n    const squares = [];\r\n\r\n    let xInc = 1;\r\n    for (let y = squareRowNumber - 1; y >= 0; y--) {\r\n        const x = currentColumnIdx + xInc;\r\n        if (x >= 0 && x < cols.length && y > 0 && y <= 8) {\r\n\r\n            squares.push(Utils.getCellKey(cols[x], y))\r\n            xInc++;\r\n            const lastSquare = squares[squares.length - 1];\r\n            if (squaresMap.get(lastSquare) && limitation) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    xInc = 1;\r\n    for (let y = squareRowNumber - 1; y >= 0; y--) {\r\n        const x = currentColumnIdx - xInc;\r\n        if (x >= 0 && x < cols.length && y > 0 && y <= 8) {\r\n            squares.push(Utils.getCellKey(cols[x], y))\r\n            xInc++;\r\n            const lastSquare = squares[squares.length - 1];\r\n            if (squaresMap.get(lastSquare) && limitation) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    xInc = 1;\r\n    for (let y = squareRowNumber + 1; y <= 8; y++) {\r\n        const x = currentColumnIdx - xInc;\r\n        if (x >= 0 && x < cols.length && y > 0 && y <= 8) {\r\n\r\n            squares.push(Utils.getCellKey(cols[x], y))\r\n            xInc++;\r\n            const lastSquare = squares[squares.length - 1];\r\n            if (squaresMap.get(lastSquare) && limitation) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    xInc = 1;\r\n    for (let y = squareRowNumber + 1; y <= 8; y++) {\r\n        const x = currentColumnIdx + xInc;\r\n        if (x >= 0 && x < cols.length && y > 0 && y <= 8) {\r\n            squares.push(Utils.getCellKey(cols[x], y))\r\n            xInc++;\r\n            const lastSquare = squares[squares.length - 1];\r\n            if (squaresMap.get(lastSquare) && limitation) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return squares;\r\n}\r\n\r\n\r\nfunction getSquaresOptionsFromSquareWithK(\r\n    squareColumLetter,\r\n    squareRowNumber,\r\n) {\r\n    const currentColumnIdx = cols.indexOf(squareColumLetter);\r\n    const squares = [];\r\n    const kCombisXY = [\r\n        [-1, 0],\r\n        [-1, 1],\r\n        [0, 1],\r\n        [1, 1],\r\n        [1, 0],\r\n        [1, -1],\r\n        [0, -1],\r\n        [-1, -1],\r\n    ];\r\n    kCombisXY.forEach((xy) => {\r\n        const x = currentColumnIdx + xy[0];\r\n        const y = squareRowNumber + xy[1];\r\n        if (x >= 0 && x < cols.length && y > 0 && y <= 8) {\r\n            squares.push(Utils.getCellKey(cols[x], y))\r\n        }\r\n    });\r\n    return squares;\r\n}\r\n\r\nexport default {\r\n    getSquaresOptionsFromSquareWithR,\r\n    getSquaresOptionsFromSquareWithN,\r\n    getSquaresOptionsFromSquareWithP,\r\n    getSquaresOptionsFromSquareWithB,\r\n    getSquaresOptionsFromSquareWithK\r\n}","import { white, } from './chess-const.js'\r\nimport Utils from './chess-utils.js';\r\n\r\nconst boardSize = 90;\r\nconst div = (boardSize / 8);\r\n\r\nfunction drawArrowInSquares(squareFrom, squareTo) {\r\n    // @todo\r\n    // col and row index\r\n    // calculate x,y origin and target\r\n    // marker selection, color, etc..\r\n    // draw line\r\n\r\n    /* Example: \r\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 350 100\">\r\n        <defs>\r\n            <marker id=\"arrowhead\" markerWidth=\"10\" markerHeight=\"7\" \r\n            refX=\"0\" refY=\"3.5\" orient=\"auto\">\r\n            <polygon points=\"0 0, 10 3.5, 0 7\" />\r\n            </marker>\r\n        </defs>\r\n        <line x1=\"0\" y1=\"50\" x2=\"250\" y2=\"50\" stroke=\"#000\" \r\n        stroke-width=\"8\" marker-end=\"url(#arrowhead)\" />\r\n    </svg>\r\n    */\r\n}\r\n\r\nfunction toggleShowMarkersContainer() {\r\n\r\n    const markersItems = document.querySelectorAll('.markers');\r\n    const invisibleClassName = 'marker-invisible';\r\n    markersItems.forEach(markerItem => {\r\n        if (markerItem.classList.contains(invisibleClassName)) {\r\n            markerItem.classList.remove(invisibleClassName);\r\n        } else {\r\n            markerItem.classList.add(invisibleClassName);\r\n\r\n        }\r\n    });\r\n}\r\n\r\nfunction removeSquareMarkers(squareName) {\r\n    const children = document.getElementById(`markers-${squareName}`).children;\r\n    // Change live list, iterate reverse order\r\n    for (var i = children.length - 1; i >= 0; --i) {\r\n        children[i].remove();\r\n    }\r\n}\r\n\r\nfunction addMarkerCircle(squareName, type = null) {\r\n    let typeMarker = 'neutral'\r\n    if (type === white) {\r\n        typeMarker = 'white';\r\n    } else if (type === false) {\r\n        typeMarker = 'black';\r\n    }\r\n    const squareNode = document.getElementById(`markers-${squareName}`);\r\n    const use = document.createElementNS(\"http://www.w3.org/2000/svg\", \"use\");\r\n    use.setAttribute('href', `#marker-circle-${typeMarker}`);\r\n    use.setAttribute('data-square', `${squareName}`);\r\n    squareNode.appendChild(use);\r\n}\r\n\r\nfunction addMarkerRect(squareName, type = true) {\r\n    let typeMarker = type ? 'ok' : 'error';\r\n    const squareNode = document.getElementById(`markers-${squareName}`);\r\n    const use = document.createElementNS(\"http://www.w3.org/2000/svg\", \"use\");\r\n    use.setAttribute('href', `#marker-rect-${typeMarker}`);\r\n    use.setAttribute('data-square', `${squareName}`);\r\n    squareNode.appendChild(use);\r\n}\r\n\r\nfunction addMarkerMoveLast(squareName) {\r\n    const squareNode = document.getElementById(`markers-${squareName}`);\r\n    const use = document.createElementNS(\"http://www.w3.org/2000/svg\", \"use\");\r\n    use.setAttribute('href', `#marker-move-last`);\r\n    use.setAttribute('data-square', `${squareName}`);\r\n    squareNode.appendChild(use);\r\n}\r\n\r\nfunction addMarkerNotation(squareName, text) {\r\n    const textEl = document.createElementNS(\"http://www.w3.org/2000/svg\", \"text\");\r\n    const textNode = document.createTextNode(text);\r\n    textEl.setAttribute('x', `${div}%`);\r\n    textEl.setAttribute('y', '0');\r\n    textEl.setAttribute('dy', '3');\r\n    textEl.setAttribute('data-square', `${squareName}`);\r\n    textEl.setAttribute('class', 'marker-square-notation');\r\n    textEl.setAttribute('text-anchor', 'end');\r\n    textEl.appendChild(textNode);\r\n\r\n    const squareNode = document.getElementById(`markers-${squareName}`);\r\n    squareNode.appendChild(textEl);\r\n}\r\n\r\n\r\nfunction createSquare(squareLetter, colIdx, rowInt, rowIdx, asIcon = true) {\r\n\r\n    const squareName = Utils.getCellKey(squareLetter, rowInt);\r\n\r\n    const x = div * colIdx;\r\n    const y = div * rowIdx;\r\n\r\n    const xT = asIcon ? 1.5 : 4;\r\n    const yT = asIcon ? -1.5 : 8;\r\n    const dyT = asIcon ? 10 : 0;\r\n\r\n    const content = `\r\n        <title>${squareName}</title>\r\n        <rect id=\"base-${squareName}\" \r\n            data-square=\"${squareName}\"\r\n            class=\"base\" \r\n            width=\"${div}%\" \r\n            height=\"${div}%\"  />\r\n        <g id=\"markers-${squareName}\" \r\n            data-square=\"${squareName}\"\r\n            class=\"markers\" \r\n            width=\"${div}%\" \r\n            height=\"${div}%\"  \r\n            fill=\"transparent\"\r\n            />\r\n        <text id=\"piece-${squareName}\" \r\n            data-square=\"${squareName}\"\r\n            class=\"piece ${ asIcon ? 'asIcon' : ''}\" \r\n            text-anchor=\"start\" \r\n            x=\"${xT}\" \r\n            y=\"${yT}\" \r\n            dy=\"${dyT}\"\r\n         ></text>\r\n    `;\r\n\r\n    const squareEl = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\r\n    squareEl.setAttribute('class', 'square');\r\n    squareEl.setAttribute('id', `${squareName}`);\r\n    squareEl.setAttribute('data-square', `${squareName}`);\r\n    squareEl.setAttribute('data-square-col', `${squareLetter}`);\r\n    squareEl.setAttribute('data-square-row', `${rowInt}`);\r\n    squareEl.setAttribute('transform', `translate(${x},${y})`);\r\n\r\n    squareEl.innerHTML = content;\r\n    return squareEl;\r\n}\r\n\r\nfunction setPieceInSquare(squareName, pieceLetter = '', color = true) {\r\n    const squareNode = document.getElementById(`piece-${squareName}`);\r\n    const className = color ? 'white' : 'black';\r\n    squareNode.classList.add(className);\r\n    const notClassName = color ? 'black' : 'white';\r\n    if (color && squareNode.classList.contains(notClassName)) {\r\n        squareNode.classList.remove(notClassName);\r\n    }\r\n    squareNode.textContent = pieceLetter;\r\n}\r\n\r\nfunction createCoordinates(flipedRows, flipedCols) {\r\n    const elements = [];\r\n    flipedCols.forEach((col, idx) => {\r\n        const textEl = document.createElementNS(\"http://www.w3.org/2000/svg\", \"text\");\r\n        const textNode = document.createTextNode(col);\r\n        textEl.setAttribute('x', `${div*idx}%`);\r\n        textEl.setAttribute('y', '0');\r\n        textEl.setAttribute('dy', '0');\r\n        textEl.setAttribute('dx', '1');\r\n        textEl.setAttribute('data-coord-col', `${col}`);\r\n        textEl.setAttribute('class', 'board-coordinate board-coordinate-col');\r\n        textEl.setAttribute('text-anchor', 'start');\r\n        textEl.appendChild(textNode);\r\n\r\n        elements.push(textEl);\r\n    })\r\n\r\n    flipedRows.forEach((row, idx) => {\r\n        const textEl = document.createElementNS(\"http://www.w3.org/2000/svg\", \"text\");\r\n        const textNode = document.createTextNode(row);\r\n        textEl.setAttribute('x', '0');\r\n        textEl.setAttribute('y', `${div*idx}%`);\r\n        textEl.setAttribute('dy', '6');\r\n        textEl.setAttribute('dx', '-3');\r\n        textEl.setAttribute('data-coord-row', `${row}`);\r\n        textEl.setAttribute('class', 'board-coordinate board-coordinate-row');\r\n        textEl.setAttribute('text-anchor', 'start');\r\n        textEl.appendChild(textNode);\r\n\r\n        elements.push(textEl);\r\n    })\r\n    return elements;\r\n}\r\n\r\nexport default {\r\n    addMarkerCircle,\r\n    addMarkerRect,\r\n    addMarkerMoveLast,\r\n    addMarkerNotation,\r\n    createSquare,\r\n    setPieceInSquare,\r\n    createCoordinates,\r\n    removeSquareMarkers,\r\n    drawArrowInSquares,\r\n    toggleShowMarkersContainer\r\n}\r\n\r\n/*\r\nSvg.addMarkerCircle('e6', white);\r\nSvg.addMarkerRect('a1');\r\nSvg.addMarkerMoveLast('a2');\r\nSvg.addMarkerRect('e6', false);\r\nSvg.addMarkerNotation('f1', '??');\r\n*/","export default class ChessControl {\r\n\r\n    constructor(callBacks) {\r\n        this.buffer = {\r\n            squareTarget: null,\r\n        };\r\n        this.callBacks = callBacks;\r\n        this.panelControls();\r\n\r\n    }\r\n\r\n    squareControls() {\r\n        const self = this;\r\n        document.querySelectorAll('.square').forEach(boardSquare => {\r\n            boardSquare.addEventListener('click', function(event) {\r\n                const targetElement = event.target || event.srcElement;\r\n                const targetSquareName = targetElement.getAttribute('data-square');\r\n                // console.log('[CONTROLS] square click:', targetSquareName);\r\n                self.checkOnSelectSquare(targetSquareName);\r\n            }, false);\r\n        })\r\n\r\n    }\r\n\r\n    async checkOnSelectSquare(selectedSquare) {\r\n        // console.log('[CONTROLS] checkOnSelectSquare:', selectedSquare, this.buffer.squareTarget);\r\n        if (this.buffer.squareTarget) {\r\n            if (selectedSquare === this.buffer.squareTarget) {\r\n                this.clearBufferAndSelection();\r\n            } else {\r\n                const moved = await this.callBacks.movePiecesFromSquares(this.buffer.squareTarget, selectedSquare);\r\n                if (moved) {\r\n                    this.clearBufferAndSelection();\r\n                } else {\r\n                    this.clearSelectedSquareFromBuffer()\r\n                    this.setBufferSquareTarget(selectedSquare);\r\n                }\r\n            }\r\n        } else {\r\n            this.setBufferSquareTarget(selectedSquare);\r\n        }\r\n    }\r\n\r\n    panelControls() {\r\n        const self = this;\r\n        document.querySelectorAll('.button-add-fig').forEach(button => {\r\n            button.addEventListener('click', function(event) {\r\n                const targetElement = event.target || event.srcElement;\r\n                const letter = targetElement.getAttribute('data-letter');\r\n                const color = letter === letter.toUpperCase();\r\n                self.callBacks.onAdd(self.buffer.squareTarget, letter.toLowerCase(), color)\r\n                self.clearSelectedSquareFromBuffer();\r\n            }, false);\r\n        })\r\n\r\n\r\n        document.querySelectorAll('.button-marker').forEach(button => {\r\n            button.addEventListener('click', function(event) {\r\n                const targetElement = event.currentTarget;\r\n                const markerId = targetElement.getAttribute('data-marker-id');\r\n                self.callBacks.onAddMarker(self.buffer.squareTarget, markerId)\r\n                self.clearSelectedSquareFromBuffer();\r\n            }, false);\r\n        })\r\n\r\n        const buttonClearSquare = document.getElementById(\"button-clear-square\");\r\n        buttonClearSquare.addEventListener('click', function() {\r\n            self.callBacks.onClearSquare(self.buffer.squareTarget);\r\n            self.clearSelectedSquareFromBuffer();\r\n        }, false);\r\n\r\n        const buttonDomainW = document.getElementById(\"button-paint-domains-w\");\r\n        buttonDomainW.addEventListener('click', function() {\r\n            self.callBacks.onDomainW();\r\n        }, false);\r\n\r\n        const buttonDomainB = document.getElementById(\"button-paint-domains-b\");\r\n        buttonDomainB.addEventListener('click', function() {\r\n            self.callBacks.onDomainB();\r\n        }, false);\r\n\r\n\r\n        const buttonClear = document.getElementById(\"button-clear\");\r\n        buttonClear.addEventListener('click', function() {\r\n            self.callBacks.onClear();\r\n        }, false);\r\n\r\n        const buttonInit = document.getElementById(\"button-init\");\r\n        buttonInit.addEventListener('click', function() {\r\n            self.callBacks.onInit();\r\n        }, false);\r\n\r\n        const buttonDomainsToggle = document.getElementById(\"button-toggle-domains\");\r\n        buttonDomainsToggle.addEventListener('click', function() {\r\n            self.callBacks.onDomainsToggle();\r\n        }, false);\r\n\r\n        const buttonSquareDomains = document.getElementById(\"button-paint-domains-square\");\r\n        buttonSquareDomains.addEventListener('click', function() {\r\n            self.callBacks.onDomainsSquare(self.buffer.squareTarget);\r\n            self.clearSelectedSquareFromBuffer();\r\n        }, false);\r\n\r\n        const buttonSquareDomainAttacks = document.getElementById(\"button-paint-domain-attack-square\");\r\n        buttonSquareDomainAttacks.addEventListener('click', function() {\r\n            self.callBacks.onDomainAttacksSquare(self.buffer.squareTarget);\r\n            self.clearSelectedSquareFromBuffer();\r\n        }, false);\r\n\r\n        const buttonSquareAttacks = document.getElementById(\"button-paint-attack-square\");\r\n        buttonSquareAttacks.addEventListener('click', function() {\r\n            self.callBacks.onAttacksSquare(self.buffer.squareTarget);\r\n            self.clearSelectedSquareFromBuffer();\r\n        }, false);\r\n\r\n        const buttonFlipBoard = document.getElementById(\"button-board-flip\");\r\n        buttonFlipBoard.addEventListener('click', function() {\r\n            self.callBacks.onFlip(self.buffer.squareTarget);\r\n        }, false);\r\n\r\n        const buttonSquareSupport = document.getElementById(\"button-paint-support-square\");\r\n        buttonSquareSupport.addEventListener('click', function() {\r\n            self.callBacks.onShowSquareSupport(self.buffer.squareTarget);\r\n            self.clearSelectedSquareFromBuffer();\r\n        }, false);\r\n\r\n        const buttonSquareDomainSupport = document.getElementById(\"button-paint-support-square-domain\");\r\n        buttonSquareDomainSupport.addEventListener('click', function() {\r\n            self.callBacks.onShowSquareDomainSupport(self.buffer.squareTarget);\r\n            self.clearSelectedSquareFromBuffer();\r\n        }, false);\r\n\r\n        const buttonVisualsRemove = document.getElementById(\"button-visuals-remove\");\r\n        buttonVisualsRemove.addEventListener('click', function() {\r\n            self.callBacks.onRemoveVisuals();\r\n        }, false);\r\n\r\n        const buttonMarkersToggle = document.getElementById(\"button-markers-toggle\");\r\n        buttonMarkersToggle.addEventListener('click', function() {\r\n            self.callBacks.onToggleMarkers();\r\n        }, false);\r\n\r\n        const buttonFenLoad = document.getElementById(\"button-fen-load\");\r\n        buttonFenLoad.addEventListener('click', function() {\r\n            self.callBacks.onLoadFenFromInput();\r\n        }, false);\r\n    }\r\n\r\n    async setBufferSquareTarget(squareName) {\r\n        this.buffer.squareTarget = squareName;\r\n        if (squareName) {\r\n            const item = document.getElementById(`base-${squareName}`);\r\n\r\n            if (item.classList.contains('with-selection')) {\r\n                item.classList.remove('with-selection');\r\n            } else {\r\n                item.classList.add('with-selection')\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    clearSelectedSquareFromBuffer() {\r\n        const squareName = this.buffer.squareTarget;\r\n        if (squareName) {\r\n            const item = document.getElementById(`base-${squareName}`);\r\n            if (item.classList.contains('with-selection')) {\r\n                item.classList.remove('with-selection');\r\n            }\r\n            this.buffer.squareTarget = null;\r\n        }\r\n    }\r\n\r\n    clearBufferAndSelection() {\r\n        this.buffer.squareTarget = null;\r\n\r\n        document.querySelectorAll('.base').forEach(squareBase => {\r\n            squareBase.classList.remove('with-selection');\r\n        })\r\n\r\n    }\r\n}","import Chess from './js/Chess.js'\r\nimport './index.scss';\r\n\r\n// const fensExamples = [\r\n//     '8/3b2r1/8/8/K5Q/3B4/8/8 b 1 32',\r\n//     'rn2k1r1/ppp1pp1p/3p2p1/5bn1/P7/2N2B2/1PPPPP2/2BNK1RR  b - - 1 32',\r\n//     'rnbqkbnr/pp3ppp/2ppp3/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1',\r\n//     'Rr6/8/3B4/ppPpq2k/4P1K1/8/8/8 w KQkq - 0 1',\r\n//     'r3kb1r/ppp1n1pp/2nB1p2/3p4/3P2b1/2P2N2/PP1NQPPP/R3KB1R xx',\r\n//     '8/8/1N6/8/8/R3n3/8/8 xx', // onAttacksSquare feature example\r\n// ];\r\n\r\nconst configA = {\r\n    // fen: '',\r\n    asIcon: true,\r\n    asLines: true,\r\n    withLimitation: true,\r\n    flip: false\r\n};\r\n\r\nconst chess = new Chess(configA);","import { rows, cols, fenBase, white, black, figures } from './chess/chess-const.js';\r\nimport MovesRegistry from './MovesRegistry.js';\r\nimport Utils from './chess/chess-utils.js';\r\nimport Squares from './chess/chess-squares.js';\r\nimport Svg from './chess/chess-svg.js';\r\nimport ChessControls from './chess/chess-controls.js';\r\n\r\nexport default class Chess {\r\n\r\n    constructor(config) {\r\n        // Init\r\n        this.config = {\r\n            flip: ('flip' in config) ? config.flip : false,\r\n            asIcon: ('asIcon' in config) ? config.asIcon : true,\r\n            asLines: ('asLines' in config) ? config.asLines : true,\r\n            withLimitation: ('withLimitation' in config) ? config.withLimitation : false,\r\n        }\r\n\r\n        this.figures = figures;\r\n        this.colors = {\r\n            white: white,\r\n            black: black,\r\n        };\r\n\r\n        this.movesRegistry = new MovesRegistry();\r\n\r\n        // Run\r\n        this.squaresMap = Utils.createSquaresMap(rows, cols);\r\n        this.markersMap = Utils.createMarkersMap(rows, cols);\r\n\r\n        const fenStr = ('fen' in config) ? config.fen : fenBase;\r\n        this.fenToMap(fenStr);\r\n        this.render();\r\n        this.chessControls = new ChessControls(this.actionsBridge);\r\n\r\n        this.state = {\r\n            isDomainWhiteOn: false,\r\n            isDomainBlackOn: false\r\n        }\r\n\r\n    }\r\n\r\n    lab() {\r\n        // this.drawMarkerInSquare('e4', 'cb');\r\n        // this.drawMarkerInSquare('d3', 're');\r\n        // this.drawMarkerInSquare('a1', 'ro');\r\n\r\n        // this.addMarkerToSquare('e4', 'marker-circle-white');\r\n        // this.actionsBridge.onDomainB()\r\n\r\n    }\r\n\r\n    labMoves() {\r\n        // In progress\r\n        this.move('e2', 'e4');\r\n        this.move('d5', 'e4');\r\n        this.move('d2', 'e4');\r\n        this.move('f6', 'f5');\r\n        console.log(this.movesRegistry.moves);\r\n        console.log(this.movesRegistry.currentMoveIdx);\r\n\r\n        setTimeout(() => {\r\n            this.jumpToMove(1);\r\n        }, 1000)\r\n    }\r\n\r\n    // ----------------------------------------------- Pieces & Board\r\n    fenToMap(fen) {\r\n        if (!fen || fen === '') {\r\n            return\r\n        }\r\n        const fenAsObj = Utils.parseFenStrToObject(fen);\r\n        this.squaresMap = new Map(Object.entries(fenAsObj));\r\n    }\r\n\r\n\r\n    async render() {\r\n        this.drawBoard().then(() => {\r\n            this.chessControls.squareControls();\r\n\r\n            this.lab()\r\n        });\r\n    }\r\n\r\n    flipBoard() {\r\n        this.config.flip = !this.config.flip;\r\n        const squares = document.querySelectorAll(\".square\");\r\n        const boardCoordinate = document.querySelectorAll(\".board-coordinate\");\r\n        squares.forEach(squareNode => {\r\n            squareNode.remove();\r\n        });\r\n        boardCoordinate.forEach(squareNode => {\r\n            squareNode.remove();\r\n        })\r\n        this.render()\r\n    }\r\n\r\n    async move(originSquare, targetSquare) {\r\n        console.log('[CHESS] move');\r\n        const originPiece = this.squaresMap.get(originSquare);\r\n        if (originPiece) {\r\n            this.setFigureInSquare(targetSquare, originPiece.letter, originPiece.color);\r\n            this.setFigureInSquare(originSquare, null);\r\n            this.drawPiecesFromMap();\r\n            this.movesRegistry.saveMove(originSquare, targetSquare, this.squaresMap);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    loadFenFromInput() {\r\n        const fenInputStr = document.getElementById(\"fen-input\").value;\r\n        this.fenToMap(fenInputStr);\r\n        this.drawPiecesFromMap();\r\n    }\r\n\r\n    // ----------------------------------------------- Moves control\r\n\r\n    jumpToMove(moveIdx) {\r\n        const move = this.movesRegistry.moves[moveIdx];\r\n        this.fenToMap(move.fen);\r\n        this.drawPiecesFromMap();\r\n        this.drawMarkerInSquare(move.from, 'marker-move-last');\r\n        this.drawMarkerInSquare(move.to, 'marker-move-last');\r\n    }\r\n\r\n    // ----------------------------------------------- Maps\r\n\r\n    setFigureInSquare(squareName, letter, color = white) {\r\n        this.squaresMap.set(squareName, Utils.asSquare(letter, color));\r\n    }\r\n\r\n    addMarkerToSquare(squareName, markerId, forceRemove = false) {\r\n        if (!squareName) {\r\n            return\r\n        }\r\n        const squareMarkers = this.markersMap.get(squareName);\r\n\r\n        const selectedMarkerIdInSquare = squareMarkers.indexOf(markerId);\r\n        if (selectedMarkerIdInSquare === -1) {\r\n            squareMarkers.push(markerId);\r\n            this.markersMap.set(squareName, squareMarkers);\r\n            this.drawMarkerInSquare(squareName, markerId);\r\n        }\r\n        if (forceRemove && selectedMarkerIdInSquare > -1) {\r\n            squareMarkers.splice(selectedMarkerIdInSquare, 1);\r\n            console.log(squareMarkers)\r\n            this.markersMap.set(squareName, squareMarkers);\r\n            this.drawMarkersFromMapBySquareName(squareName);\r\n        }\r\n    }\r\n\r\n    // ----------------------------------------------- Draw: Markers, Pieces\r\n    async drawBoard() {\r\n        const svg = document.getElementById(\"svg-squares\");\r\n        const svgCoordinates = document.getElementById(\"svg-coordinates\");\r\n        const flip = this.config.flip;\r\n        const flipedRows = flip ? [...rows].reverse() : rows;\r\n        const flipedCols = flip ? [...cols].reverse() : cols;\r\n\r\n        flipedRows.forEach((row, rowIdx) => {\r\n            flipedCols.forEach((colLetter, colIdx) => {\r\n                const squareEl = Svg.createSquare(colLetter, colIdx, row, rowIdx, this.config.asIcon);\r\n                svg.appendChild(squareEl);\r\n            })\r\n        })\r\n\r\n\r\n        this.drawPiecesFromMap();\r\n\r\n        const coordinatesItems = Svg.createCoordinates(flipedRows, flipedCols);\r\n        coordinatesItems.forEach(coorItem => {\r\n            svgCoordinates.appendChild(coorItem);\r\n        })\r\n    }\r\n\r\n    drawPiecesFromMap() {\r\n        this.squaresMap.forEach((squareEntry, squareKey) => {\r\n            if (squareEntry) {\r\n                let figureText = '';\r\n                const entryFigure = figures[squareEntry.letter];\r\n                if (this.config.asIcon === true) {\r\n                    figureText = entryFigure.asIcon(squareEntry.color);\r\n                } else {\r\n                    figureText = entryFigure.asLetter(squareEntry.color);\r\n                }\r\n                Svg.setPieceInSquare(squareKey, figureText, squareEntry.color)\r\n            } else {\r\n                Svg.setPieceInSquare(squareKey)\r\n            }\r\n        })\r\n    }\r\n\r\n    drawMarkersFromMap() {\r\n        this.markersMap.forEach((markerEntry, squareKey) => {\r\n            Svg.removeSquareMarkers(squareKey);\r\n\r\n            markerEntry.forEach(markerItemId => {\r\n                this.drawMarkerInSquare(squareKey, markerItemId);\r\n            })\r\n        })\r\n    }\r\n\r\n    drawMarkersFromMapBySquareName(squareName) {\r\n        //remove all markers first\r\n        Svg.removeSquareMarkers(squareName);\r\n        // Redraw markers from map\r\n        const squareMarkers = this.markersMap.get(squareName);\r\n        squareMarkers.forEach(markerItemId => {\r\n            this.drawMarkerInSquare(squareName, markerItemId);\r\n        })\r\n\r\n    }\r\n\r\n    drawMarkerInSquare(squareName, markerId) {\r\n        switch (markerId) {\r\n            case 'cw':\r\n            case 'marker-circle-white':\r\n                Svg.addMarkerCircle(squareName, true);\r\n                break;\r\n            case 'cn':\r\n            case 'marker-circle-neutral':\r\n                Svg.addMarkerCircle(squareName);\r\n                break;\r\n            case 'cb':\r\n            case 'marker-circle-black':\r\n                Svg.addMarkerCircle(squareName, false);\r\n                break;\r\n            case 'm':\r\n            case 'marker-move-last':\r\n                Svg.addMarkerMoveLast(squareName);\r\n                break;\r\n            case 'ro':\r\n            case 'marker-rect-ok':\r\n                Svg.addMarkerRect(squareName, true);\r\n                break;\r\n            case 're':\r\n            case 'marker-rect-error':\r\n                Svg.addMarkerRect(squareName, false);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    getMarkerCircleIdByColor(color) {\r\n        return color ? 'marker-circle-white' : 'marker-circle-black';\r\n    }\r\n\r\n    drawRemoveAllMarkers() {\r\n        this.markersMap = Utils.createMarkersMap(rows, cols);\r\n        this.drawMarkersFromMap()\r\n    }\r\n\r\n\r\n\r\n    // ----------------------------------------------- Engine\r\n    getSquarePieceAllowedSquares(squareName) {\r\n\r\n        const limitation = this.config.withLimitation;\r\n\r\n        const options = [];\r\n        if (!squareName) {\r\n            return;\r\n        }\r\n        const squareNameParts = squareName.split('');\r\n\r\n        const squareColumnLetter = squareNameParts[0];\r\n        const squareRowNumber = parseInt(squareNameParts[1], 10);\r\n\r\n        const { letter, color } = this.squaresMap.get(squareName);\r\n\r\n        if (letter === 'r') {\r\n            const squareOptions = Squares.getSquaresOptionsFromSquareWithR(this.squaresMap, squareColumnLetter, squareRowNumber, limitation);\r\n            options.push(...squareOptions);\r\n        }\r\n        if (letter === 'n') {\r\n            const squareOptions = Squares.getSquaresOptionsFromSquareWithN(squareColumnLetter, squareRowNumber);\r\n            options.push(...squareOptions);\r\n        }\r\n        if (letter === 'p') {\r\n            const squareOptions = Squares.getSquaresOptionsFromSquareWithP(squareColumnLetter, squareRowNumber, color);\r\n            options.push(...squareOptions);\r\n        }\r\n        if (letter === 'b') {\r\n            const squareOptions = Squares.getSquaresOptionsFromSquareWithB(this.squaresMap, squareColumnLetter, squareRowNumber, limitation);\r\n            options.push(...squareOptions);\r\n        }\r\n        if (letter === 'q') {\r\n            const squareOptionsVertHorz = Squares.getSquaresOptionsFromSquareWithR(this.squaresMap, squareColumnLetter, squareRowNumber, limitation);\r\n            const squareOptionsDiagonal = Squares.getSquaresOptionsFromSquareWithB(this.squaresMap, squareColumnLetter, squareRowNumber, limitation);\r\n            options.push(...squareOptionsVertHorz, ...squareOptionsDiagonal);\r\n        }\r\n        if (letter === 'k') {\r\n            const squareOptions = Squares.getSquaresOptionsFromSquareWithK(squareColumnLetter, squareRowNumber);\r\n            options.push(...squareOptions);\r\n        }\r\n        return options;\r\n    }\r\n\r\n    getDomainClassNameByColor(color) {\r\n        return color ? 'with-domain-white' : 'with-domain-black';\r\n    }\r\n\r\n    drawDomainByColor(color = white) {\r\n        if(color){\r\n            this.state.isDomainWhiteOn = true;\r\n        }else{\r\n            this.state.isDomainBlackOn = true;\r\n        }\r\n        const domainClassName = this.getDomainClassNameByColor(color);\r\n        const squaresInDomain = []\r\n        this.squaresMap.forEach((squareEntry, squareName) => {\r\n            if (squareEntry && squareEntry.color === color) {\r\n                const squaresFromFigure = this.getSquarePieceAllowedSquares(squareName);\r\n                squaresInDomain.push(...squaresFromFigure);\r\n            }\r\n        })\r\n        squaresInDomain.forEach(squareName => {\r\n            document.getElementById(`base-${squareName}`).classList.add(domainClassName);\r\n        })\r\n\r\n    }\r\n\r\n    drawDomainBySquare(squareName) {\r\n        const squarePiece = this.squaresMap.get(squareName);\r\n        if (squarePiece) {\r\n\r\n            const markerIdBySquareColor = this.getMarkerCircleIdByColor(squarePiece.color);\r\n            this.addMarkerToSquare(squareName, markerIdBySquareColor);\r\n\r\n            const squaresFromFigure = this.getSquarePieceAllowedSquares(squareName);\r\n            squaresFromFigure.forEach(domainSquareName => {\r\n                const classNameDomain = this.getDomainClassNameByColor(squarePiece.color);\r\n                document.getElementById(`base-${domainSquareName}`).classList.add(classNameDomain);\r\n            })\r\n        }\r\n    }\r\n\r\n    drawClearDomains(color = white) {\r\n        if(color){\r\n            this.state.isDomainWhiteOn = false;\r\n        }else{\r\n            this.state.isDomainBlackOn = false;\r\n        }\r\n        const classNameColor = this.getDomainClassNameByColor(color);\r\n        this.squaresMap.forEach((_, squareName) => {\r\n            const classList = document.getElementById(`base-${squareName}`).classList;\r\n            classList.remove(classNameColor);\r\n        });\r\n    }\r\n\r\n    drawAttacksToSquare(squareName) {\r\n        if (!squareName) {\r\n            return;\r\n        }\r\n        let isSquareSave = true;\r\n        const squarePiece = this.squaresMap.get(squareName);\r\n        if (squarePiece) {\r\n            this.squaresMap.forEach((squareMapValue, squareMapKey) => {\r\n                if (squareMapKey !== squareName && squareMapValue && squareMapValue.color !== squarePiece.color) {\r\n                    const squareMapSquareOptions = this.getSquarePieceAllowedSquares(squareMapKey);\r\n                    // console.debug('[CHESS] drawAttacksToSquare: mapOptions', squareMapSquareOptions);\r\n                    if (squareMapSquareOptions.includes(squareName)) {\r\n                        isSquareSave = false;\r\n                        const markerIdByColor = this.getMarkerCircleIdByColor(squareMapValue.color);\r\n                        this.addMarkerToSquare(squareMapKey, markerIdByColor)\r\n                        this.drawDomainBySquare(squareMapKey);\r\n                    }\r\n                }\r\n            })\r\n            if (isSquareSave) {\r\n                this.addMarkerToSquare(squareName, 'marker-rect-ok');\r\n            } else {\r\n                const markerIdBySquareColor = this.getMarkerCircleIdByColor(squarePiece.color);\r\n                this.addMarkerToSquare(squareName, markerIdBySquareColor);\r\n            }\r\n        }\r\n    }\r\n\r\n    drawAttacksToSquareDomain(squareName) {\r\n        if (!squareName) {\r\n            return;\r\n        }\r\n        let isSquareSave = true;\r\n        const squarePiece = this.squaresMap.get(squareName);\r\n        if (squarePiece) {\r\n\r\n            const squaresOptionsFromFigure = this.getSquarePieceAllowedSquares(squareName);\r\n            squaresOptionsFromFigure.forEach(domainSquareName => {\r\n                const classNameDomain = this.getDomainClassNameByColor(squarePiece.color);\r\n                document.getElementById(`base-${domainSquareName}`).classList.add(classNameDomain);\r\n\r\n                this.squaresMap.forEach((squareMapValue, squareMapKey) => {\r\n                    if (squareMapKey !== squareName && squareMapValue && squareMapValue.color !== squarePiece.color) {\r\n                        const squareMapSquareOptions = this.getSquarePieceAllowedSquares(squareMapKey);\r\n                        // console.debug('[CHESS] drawAttacksToSquareDomain: mapOptions', squareMapSquareOptions);\r\n                        // console.debug('[CHESS] drawAttacksToSquareDomain: ´fgure', squaresOptionsFromFigure);\r\n\r\n                        const uniques = squaresOptionsFromFigure.filter(value => squareMapSquareOptions.includes(value));\r\n                        uniques.forEach((commonSquare) => {\r\n                            const markerIdByColor = this.getMarkerCircleIdByColor(squareMapValue.color);\r\n                            this.addMarkerToSquare(squareMapKey, markerIdByColor);\r\n                            this.addMarkerToSquare(commonSquare, 'marker-circle-neutral');\r\n\r\n                        })\r\n                        if (uniques.length > 0) {\r\n                            isSquareSave = false;\r\n                        }\r\n                    }\r\n                })\r\n            })\r\n            if (isSquareSave) {\r\n                this.addMarkerToSquare(squareName, 'marker-rect-ok');\r\n            } else {\r\n                const markerIdBySquareColor = this.getMarkerCircleIdByColor(squarePiece.color);\r\n                this.addMarkerToSquare(squareName, markerIdBySquareColor);\r\n            }\r\n        }\r\n    }\r\n\r\n    drawSupportToSquare(squareName) {\r\n        console.log('[CHESS] drawSupportToSquare:', squareName);\r\n        if (!squareName) {\r\n            return;\r\n        }\r\n        let isSquareSupported = false;\r\n        const squarePiece = this.squaresMap.get(squareName);\r\n        if (squarePiece) {\r\n            this.squaresMap.forEach((squareMapValue, squareMapKey) => {\r\n                if (squareMapKey !== squareName && squareMapValue && squareMapValue.color === squarePiece.color) {\r\n                    const squareMapSquareOptions = this.getSquarePieceAllowedSquares(squareMapKey);\r\n                    console.debug('[CHESS] drawSupportToSquare: mapOptions', squareMapSquareOptions);\r\n                    if (squareMapSquareOptions.includes(squareName)) {\r\n                        isSquareSupported = true;\r\n                        const markerIdByColor = this.getMarkerCircleIdByColor(squareMapValue.color);\r\n                        this.addMarkerToSquare(squareMapKey, markerIdByColor)\r\n                        this.drawDomainBySquare(squareMapKey);\r\n                    }\r\n                }\r\n            })\r\n            if (isSquareSupported) {\r\n                this.addMarkerToSquare(squareName, 'marker-rect-ok');\r\n            } else {\r\n                this.addMarkerToSquare(squareName, 'marker-rect-error');\r\n            }\r\n        }\r\n    }\r\n\r\n    drawSupportToSquareDomain(squareName) {\r\n        if (!squareName) {\r\n            return;\r\n        }\r\n        let isSquareSupported = false;\r\n        const squarePiece = this.squaresMap.get(squareName);\r\n        if (squarePiece) {\r\n\r\n            const squaresOptionsFromFigure = this.getSquarePieceAllowedSquares(squareName);\r\n            squaresOptionsFromFigure.forEach(domainSquareName => {\r\n                const classNameDomain = this.getDomainClassNameByColor(squarePiece.color);\r\n                document.getElementById(`base-${domainSquareName}`).classList.add(classNameDomain);\r\n\r\n                this.squaresMap.forEach((squareMapValue, squareMapKey) => {\r\n                    if (squareMapKey !== squareName && squareMapValue && squareMapValue.color === squarePiece.color) {\r\n                        const squareMapSquareOptions = this.getSquarePieceAllowedSquares(squareMapKey);\r\n                        // console.debug('[CHESS] drawSupportToSquareDomain: mapOptions', squareMapSquareOptions);\r\n                        // console.debug('[CHESS] drawSupportToSquareDomain: ´fgure', squaresOptionsFromFigure);\r\n\r\n                        const uniques = squaresOptionsFromFigure.filter(value => squareMapSquareOptions.includes(value));\r\n                        uniques.forEach((commonSquare) => {\r\n                            const markerIdByColor = this.getMarkerCircleIdByColor(squareMapValue.color);\r\n                            this.addMarkerToSquare(squareMapKey, markerIdByColor);\r\n                            this.addMarkerToSquare(commonSquare, 'marker-circle-neutral');\r\n\r\n                        })\r\n                        if (uniques.length > 0) {\r\n                            isSquareSupported = true;\r\n                        }\r\n                    }\r\n                })\r\n            })\r\n            if (isSquareSupported) {\r\n                this.addMarkerToSquare(squareName, 'marker-rect-ok');\r\n            } else {\r\n                this.addMarkerToSquare(squareName, 'marker-rect-error');\r\n            }\r\n        }\r\n    }\r\n\r\n    // ----------------------------------------------- Control Actions Bridge\r\n    get actionsBridge() {\r\n\r\n        return {\r\n            onShowSquareSupport: (squareTarget) => {\r\n                this.drawSupportToSquare(squareTarget);\r\n            },\r\n            onShowSquareDomainSupport: (squareTarget) => {\r\n                this.drawSupportToSquareDomain(squareTarget);\r\n            },\r\n            onFlip: () => {\r\n                this.flipBoard()\r\n            },\r\n            movePiecesFromSquares: async(originSquare, targetSquare) => {\r\n                return this.move(originSquare, targetSquare);\r\n            },\r\n            onAddMarker: (squareTarget, markerId) => {\r\n                this.addMarkerToSquare(squareTarget, markerId, true);\r\n            },\r\n            onAdd: (square, letter, color) => {\r\n                if (!square) { return; }\r\n                this.setFigureInSquare(square, letter, color);\r\n                this.drawPiecesFromMap();\r\n            },\r\n            onClearSquare: (square) => {\r\n                if (!square) { return; }\r\n                this.setFigureInSquare(square, null);\r\n                this.drawPiecesFromMap();\r\n            },\r\n            onClear: () => {\r\n                this.squaresMap = Utils.createSquaresMap(rows, cols);\r\n                this.drawPiecesFromMap();\r\n            },\r\n            onInit: () => {\r\n                this.fenToMap(fenBase);\r\n                this.drawPiecesFromMap();\r\n            },\r\n            onDomainW: async() => {\r\n                if (!this.state.isDomainWhiteOn) {\r\n                    this.drawDomainByColor(white);\r\n                    \r\n                } else {\r\n                    this.drawClearDomains(white);\r\n                }\r\n            },\r\n            onDomainB: async() => {\r\n                if (!this.state.isDomainBlackOn) {\r\n                    this.drawDomainByColor(black);\r\n\r\n                } else {\r\n                    this.drawClearDomains(black);\r\n                }\r\n            },\r\n            onDomainsToggle: async() => {\r\n                if (this.state.isDomainWhiteOn || this.state.isDomainBlackOn) {\r\n                    this.drawClearDomains(white);\r\n                    this.drawClearDomains(black);\r\n                } else {\r\n                    this.drawDomainByColor(white);\r\n                    this.drawDomainByColor(black);\r\n                }\r\n\r\n            },\r\n            onDomainsSquare: async(squareName) => {\r\n                this.drawDomainBySquare(squareName);\r\n            },\r\n            onDomainAttacksSquare: async(squareName) => {\r\n                this.drawAttacksToSquareDomain(squareName);\r\n            },\r\n            onAttacksSquare: async(squareName) => {\r\n                this.drawAttacksToSquare(squareName)\r\n            },\r\n            onRemoveVisuals: () => {\r\n                this.drawRemoveAllMarkers();\r\n                this.drawClearDomains(white);\r\n                this.drawClearDomains(black);\r\n            },\r\n            onToggleMarkers: () => {\r\n                Svg.toggleShowMarkersContainer();\r\n\r\n            },\r\n            onLoadFenFromInput: () => {\r\n                this.loadFenFromInput();\r\n            }\r\n        }\r\n    }\r\n\r\n}"],"sourceRoot":""}