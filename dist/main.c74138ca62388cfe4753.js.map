{"version":3,"sources":["webpack://chess-analysis-board/./src/js/Figure.js","webpack://chess-analysis-board/./src/js/chess/chess-const.js","webpack://chess-analysis-board/./src/js/chess/chess-utils.js","webpack://chess-analysis-board/./src/js/MovesRegistry.js","webpack://chess-analysis-board/./src/js/chess/chess-squares.js","webpack://chess-analysis-board/./src/js/chess/chess-svg.js","webpack://chess-analysis-board/./src/js/utils/clipboard.js","webpack://chess-analysis-board/./src/js/chess/chess-controls.js","webpack://chess-analysis-board/./src/js/utils/url.js","webpack://chess-analysis-board/./src/index.js","webpack://chess-analysis-board/./src/js/Chess.js"],"names":["Figure","config","this","letterW","iconW","letterB","iconB","color","rows","cols","fenBase","flankC","white","black","figures","b","r","n","k","q","p","getAbsoluteRouteWithFen","fen","window","location","origin","pathname","getCellKey","colLetter","rowNumber","asSquare","letter","createSquaresMap","listCells","forEach","row","col","cellKey","push","Map","createMarkersMap","parseFenStrToObject","squaresKeyVal","allowedLetters","split","rowText","rowIdw","boardRowIdx","currentCol","character","includes","toUpperCase","figureLetter","toLowerCase","jumpCols","parseInt","c","parseMapToFenStr","squaresMap","fenSquarePositions","emptyAccumulator","rowIdx","squareName","squarePiece","get","toString","pieceLetter","length","parseConfig","flip","asIcon","asLines","withLimitation","changeHistoryWithFen","url","history","pushState","id","MovesRegistry","moves","moveIdx","squareFrom","squareTo","moveEntry","from","to","currentCursor","cursor","squareColumLetter","squareRowNumber","limitation","currentColumnIdx","indexOf","squares","y","lastSquare","x","yx","cellY","xy","xInc","div","addMarkerCircle","type","typeMarker","squareNode","document","getElementById","use","createElementNS","setAttribute","appendChild","addMarkerRect","addMarkerMoveLast","squareLetter","colIdx","rowInt","content","squareEl","innerHTML","className","classList","add","notClassName","contains","remove","textContent","flipedRows","flipedCols","elements","idx","textEl","textNode","createTextNode","children","i","markersItems","querySelectorAll","invisibleClassName","markerItem","markerId","text","myTemporaryInputElement","createElement","value","body","select","execCommand","removeChild","e","console","error","ChessControl","callBacks","buffer","squareTarget","panelControls","self","boardSquare","addEventListener","event","targetSquareName","target","srcElement","getAttribute","checkOnSelectSquare","selectedSquare","movePiecesFromSquares","clearBufferAndSelection","clearSelectedSquareFromBuffer","setBufferSquareTarget","button","onAdd","currentTarget","onAddMarker","onClearSquare","onDomainW","onDomainB","onClear","onInit","onDomainsToggle","onDomainsSquare","onShowSquareDomainSupport","onDomainAttacksSquare","onDomainDangerSquare","onShowAttackSquare","onDangerSquare","onFlip","onShowSquareSupport","onRemoveVisuals","onToggleMarkers","onLoadFenFromInput","onLoadFenToInput","onCreateLink","onNavPrev","onNavNext","item","squareBase","urlParams","params","parser","href","query","search","substring","vars","pair","decodeURIComponent","fenToLoad","configA","colors","movesRegistry","markersMap","fenStr","fenToMap","render","chessControls","actionsBridge","state","isDomainWhiteOn","isDomainBlackOn","fenAsObj","Object","entries","drawBoard","then","squareControls","lab","boardCoordinate","originSquare","targetSquare","originPiece","setFigureInSquare","drawPiecesFromMap","saveMove","drawRemoveLastStepMoveMarker","addMarkerToSquare","currentFen","drawDomainByColor","fenInputStr","move","set","forceRemove","squareMarkers","selectedMarkerIdInSquare","splice","drawMarkersFromMapBySquareName","targetRows","flankCColLetter","markerItemList","markerIdx","drawMarkersFromMap","svg","svgCoordinates","reverse","coorItem","squareEntry","squareKey","figureText","entryFigure","asLetter","markerEntry","markerItemId","forcedPieceAndColor","options","squareNameParts","squareColumnLetter","squareOptions","squareOptionsVertHorz","squareOptionsDiagonal","drawClearDomains","domainClassName","squaresInDomain","squaresFromFigure","getSquarePieceAllowedSquares","markerIdBySquareColor","domainSquareName","classNameDomain","classNameColor","_","markerIdByColor","optionSquareKey","pieceInOptionSquare","drawDomainBySquare","ghostPieceInDomain","nextDomainSquareName","isSquareSave","squareMapValue","squareMapKey","squaresOptionsFromFigure","squareMapSquareOptions","uniques","filter","commonSquare","isSquareSupported","debug","drawSupportToSquare","drawSupportToSquareDomain","flipBoard","async","square","drawDangerToSquareDomain","drawAttackFromSquareDomain","drawAttackFromSquare","drawDangerToSquare","drawRemoveAllMarkers","loadFenFromInput","loadFenToInput","linkHref","prevMove","drawFromMove","nextMove"],"mappings":"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","file":"main.c74138ca62388cfe4753.js","sourcesContent":["export default class Figure {\r\n    constructor(config) {\r\n        this.letterW = config.letterW\r\n        this.iconW = config.iconW;\r\n        this.letterB = config.letterB;\r\n        this.iconB = config.iconB;\r\n    }\r\n\r\n    asLetter(color = true) {\r\n        if (color) {\r\n            return this.letterW;\r\n        }\r\n        return this.letterB;\r\n    }\r\n\r\n    asIcon(color = true) {\r\n        if (color) {\r\n            return this.iconW;\r\n        }\r\n        return this.iconB;\r\n    }\r\n}","import Figure from '../Figure.js'\r\n\r\nexport const rows = [8, 7, 6, 5, 4, 3, 2, 1];\r\nexport const cols = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];\r\n\r\nexport const fenBase = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1';\r\n\r\nexport const flankQ = ['a', 'b', 'c', 'd', ];\r\nexport const flankK = ['e', 'f', 'g', 'h', ];\r\nexport const flankC = ['c','d', 'e','f' ];\r\n\r\nexport const white = true;\r\nexport const black = false;\r\n\r\nexport const figures = {\r\n    b: new Figure({ letterW: 'B', iconW: '♗', letterB: 'b', iconB: '♝' }),\r\n    r: new Figure({ letterW: 'R', iconW: '♖', letterB: 'r', iconB: '♜' }),\r\n    n: new Figure({ letterW: 'N', iconW: '♘', letterB: 'n', iconB: '♞' }),\r\n    k: new Figure({ letterW: 'K', iconW: '♔', letterB: 'k', iconB: '♚' }),\r\n    q: new Figure({ letterW: 'Q', iconW: '♕', letterB: 'q', iconB: '♛' }),\r\n    p: new Figure({ letterW: 'P', iconW: '♙', letterB: 'p', iconB: '♟' }),\r\n};\r\n","import { cols, white, } from './chess-const.js'\r\n\r\nfunction parseConfig(config){\r\n    return  {\r\n        flip: ('flip' in config) ? config.flip : false,\r\n        asIcon: ('asIcon' in config) ? config.asIcon : true,\r\n        asLines: ('asLines' in config) ? config.asLines : true,\r\n        withLimitation: ('withLimitation' in config) ? config.withLimitation : false,\r\n    }\r\n}\r\n\r\nfunction changeHistoryWithFen( fen ){\r\n    const url = getAbsoluteRouteWithFen(fen);\r\n    history.pushState({\r\n        id: 'game-move'\r\n    }, '', url);\r\n}\r\n\r\nfunction getAbsoluteRouteWithFen(fen){\r\n     return  `${window.location.origin}${window.location.pathname}?fen=${fen}`;\r\n}\r\n\r\nfunction getCellKey(colLetter, rowNumber) {\r\n    return `${colLetter}${rowNumber}`;\r\n}\r\n\r\nfunction createSquaresMap(rows, cols) {\r\n    const listCells = [];\r\n    rows.forEach((row) => {\r\n        cols.forEach((col) => {\r\n            const cellKey = getCellKey(col, row);\r\n            listCells.push([cellKey, null]);\r\n        })\r\n    })\r\n    return new Map(listCells);\r\n}\r\n\r\nfunction createMarkersMap(rows, cols) {\r\n    const listCells = [];\r\n    rows.forEach((row) => {\r\n        cols.forEach((col) => {\r\n            const cellKey = getCellKey(col, row);\r\n            listCells.push([cellKey, []]);\r\n        })\r\n    })\r\n    return new Map(listCells);\r\n}\r\n\r\n\r\nfunction asSquare(letter, color = white) {\r\n    if (letter) {\r\n        return {\r\n            letter: letter,\r\n            color: color,\r\n        };\r\n    } else {\r\n        return null\r\n    }\r\n\r\n}\r\n\r\nfunction parseMapToFenStr(squaresMap) {\r\n    const rows = [8, 7, 6, 5, 4, 3, 2, 1];\r\n    const cols = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];\r\n\r\n    let fenSquarePositions = '';\r\n\r\n    let emptyAccumulator = 0;\r\n\r\n    rows.forEach((row, rowIdx) => {\r\n        emptyAccumulator = 0;\r\n        cols.forEach((col) => {\r\n            const squareName = getCellKey(col, row);\r\n            const squarePiece = squaresMap.get(squareName)\r\n\r\n            if (squarePiece) {\r\n                if (emptyAccumulator !== 0) {\r\n                    fenSquarePositions += emptyAccumulator.toString();\r\n                    emptyAccumulator = 0;\r\n                }\r\n                const pieceLetter = squarePiece.color ? squarePiece.letter.toUpperCase() : squarePiece.letter.toLowerCase()\r\n                fenSquarePositions += pieceLetter;\r\n\r\n            } else {\r\n                emptyAccumulator += 1;\r\n            }\r\n\r\n        })\r\n        if (emptyAccumulator !== 0) {\r\n            fenSquarePositions += emptyAccumulator.toString();\r\n        }\r\n        if (rowIdx < rows.length - 1) {\r\n            fenSquarePositions += '/';\r\n        }\r\n\r\n    })\r\n    const fen = `${fenSquarePositions} w KQkq - 0 1`;\r\n    return fen;\r\n}\r\n\r\nfunction parseFenStrToObject(fen) {\r\n\r\n    const squaresKeyVal = {};\r\n    const allowedLetters = ['r', 'n', 'b', 'k', 'q', 'p', 'R', 'N', 'B', 'K', 'Q', 'P'];\r\n    const fenFiguresSeparator = ' ';\r\n    const fenRowsSeparator = '/';\r\n\r\n    const figuresPart = fen.split(fenFiguresSeparator)[0];\r\n    const strRows = figuresPart.split(fenRowsSeparator);\r\n\r\n    strRows.forEach((rowText, rowIdw) => {\r\n        const boardRowIdx = 8 - rowIdw; // to flip the board ->  rowIdw + 1\r\n        let currentCol = 1;\r\n        rowText.split('').forEach((character) => {\r\n            if (allowedLetters.includes(character)) {\r\n                // it´s a figure letter\r\n                const colLetter = cols[currentCol - 1];\r\n                const cellKey = getCellKey(colLetter, boardRowIdx);\r\n                const color = (character == character.toUpperCase()); // R -> true\r\n                const figureLetter = character.toLowerCase();\r\n                squaresKeyVal[cellKey] = asSquare(figureLetter, color);\r\n                currentCol += 1;\r\n\r\n            } else {\r\n                // should be a number\r\n                const jumpCols = parseInt(character, 10)\r\n                for (let c = currentCol; c < jumpCols + currentCol; c++) {\r\n                    const colLetter = cols[c - 1];\r\n                    const cellKey = getCellKey(colLetter, boardRowIdx);\r\n                    squaresKeyVal[cellKey] = null;\r\n                }\r\n                currentCol += parseInt(character, 10);\r\n            }\r\n        })\r\n    });\r\n    return squaresKeyVal;\r\n}\r\n\r\n\r\nexport default {\r\n    getCellKey,\r\n    createSquaresMap,\r\n    createMarkersMap,\r\n    parseFenStrToObject,\r\n    parseMapToFenStr,\r\n    asSquare,\r\n    parseConfig,\r\n    getAbsoluteRouteWithFen,\r\n    changeHistoryWithFen\r\n}\r\n","import Utils from './chess/chess-utils.js';\r\n\r\nexport default class MovesRegistry {\r\n\r\n    constructor() {\r\n        this.moves = [];\r\n        this.moveIdx = 0;\r\n\r\n    }\r\n\r\n    saveMove(squareFrom, squareTo, squaresMap) {\r\n        const fen = Utils.parseMapToFenStr(squaresMap);\r\n        const moveEntry = {\r\n            from: squareFrom,\r\n            to: squareTo,\r\n            fen: fen\r\n        }\r\n\r\n        const currentCursor = this.moveIdx;\r\n        this.moves.length= currentCursor + 1;\r\n        this.moves.push(moveEntry);\r\n        this.moveIdx = this.moves.length - 1;\r\n    }\r\n\r\n    get currentMoveIdx() {\r\n        return this.moveIdx;\r\n    }\r\n\r\n    get currentMove() {\r\n        return this.moves[this.moveIdx];\r\n    }\r\n\r\n    get prevMove() {\r\n        let cursor = this.moveIdx - 1;\r\n        if( cursor <= 1){\r\n            cursor = 1;\r\n        }\r\n       this.moveIdx = cursor;\r\n       return this.moves[cursor ];\r\n    }\r\n    get nextMove() {\r\n        let cursor = this.moveIdx + 1;\r\n        if( cursor >= this.moves.length){\r\n            cursor = this.moves.length-1;\r\n        }\r\n        this.moveIdx = cursor;\r\n        return this.moves[cursor ];\r\n    }\r\n\r\n    getMoveByIdx(moveIdx){\r\n        if(moveIdx<this.moves.length){\r\n            return this.moves[this.moveIdx];\r\n        }\r\n        return null;\r\n    }\r\n\r\n\r\n}\r\n","import { cols } from './chess-const.js';\r\nimport Utils from './chess-utils.js';\r\n\r\n\r\nfunction getSquaresOptionsFromSquareWithR(\r\n    squaresMap,\r\n    squareColumLetter,\r\n    squareRowNumber,\r\n    limitation = false\r\n) {\r\n    const currentColumnIdx = cols.indexOf(squareColumLetter);\r\n    const squares = [];\r\n    for (let y = squareRowNumber - 1; y >= 1; y--) {\r\n        squares.push(Utils.getCellKey(squareColumLetter, y));\r\n        const lastSquare = squares[squares.length - 1];\r\n        if (squaresMap.get(lastSquare) && limitation) {\r\n            break;\r\n        }\r\n    }\r\n    for (let y = squareRowNumber + 1; y <= 8; y++) {\r\n        squares.push(Utils.getCellKey(squareColumLetter, y));\r\n        const lastSquare = squares[squares.length - 1];\r\n        if (squaresMap.get(lastSquare) && limitation) {\r\n            break;\r\n        }\r\n    }\r\n    for (let x = currentColumnIdx + 1; x < cols.length; x++) {\r\n        squares.push(Utils.getCellKey(cols[x], squareRowNumber));\r\n        const lastSquare = squares[squares.length - 1];\r\n        if (squaresMap.get(lastSquare) && limitation) {\r\n            break;\r\n        }\r\n    }\r\n    for (let x = currentColumnIdx - 1; x >= 0; x--) {\r\n        squares.push(Utils.getCellKey(cols[x], squareRowNumber));\r\n        const lastSquare = squares[squares.length - 1];\r\n        if (squaresMap.get(lastSquare) && limitation) {\r\n            break;\r\n        }\r\n    }\r\n    return squares;\r\n}\r\n\r\n\r\nfunction getSquaresOptionsFromSquareWithN(\r\n    squareColumLetter,\r\n    squareRowNumber\r\n) {\r\n    const currentColumnIdx = cols.indexOf(squareColumLetter);\r\n    const squares = [];\r\n    const nCombisYX = [\r\n        [2, 1],\r\n        [1, 2],\r\n        [-1, 2],\r\n        [-2, 1],\r\n        [-2, -1],\r\n        [-1, -2],\r\n        [1, -2],\r\n        [2, -1],\r\n    ];\r\n    nCombisYX.forEach((yx) => {\r\n        const y = squareRowNumber + yx[0];\r\n        const x = currentColumnIdx + yx[1];\r\n        if (x >= 0 && x < cols.length && y > 0 && y <= 8) {\r\n            squares.push(Utils.getCellKey(cols[x], y));\r\n        }\r\n    })\r\n    return squares;\r\n}\r\n\r\n\r\nfunction getSquaresOptionsFromSquareWithP(\r\n    squareColumLetter,\r\n    squareRowNumber,\r\n    color\r\n) {\r\n    const currentColumnIdx = cols.indexOf(squareColumLetter);\r\n    const squares = [];\r\n    const cellY = color ? squareRowNumber + 1 : squareRowNumber - 1;\r\n    const pCombis = [\r\n        [1, cellY],\r\n        [-1, cellY]\r\n    ];\r\n    pCombis.forEach((xy) => {\r\n        const x = currentColumnIdx + xy[0];\r\n        const y = xy[1];\r\n        if (x >= 0 && x < cols.length && y > 0 && y <= 8) {\r\n            squares.push(Utils.getCellKey(cols[x], y));\r\n        }\r\n    });\r\n    return squares;\r\n}\r\n\r\n\r\nfunction getSquaresOptionsFromSquareWithB(\r\n    squaresMap,\r\n    squareColumLetter,\r\n    squareRowNumber,\r\n    limitation = false\r\n) {\r\n    const currentColumnIdx = cols.indexOf(squareColumLetter);\r\n    const squares = [];\r\n\r\n    let xInc = 1;\r\n    for (let y = squareRowNumber - 1; y >= 0; y--) {\r\n        const x = currentColumnIdx + xInc;\r\n        if (x >= 0 && x < cols.length && y > 0 && y <= 8) {\r\n\r\n            squares.push(Utils.getCellKey(cols[x], y))\r\n            xInc++;\r\n            const lastSquare = squares[squares.length - 1];\r\n            if (squaresMap.get(lastSquare) && limitation) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    xInc = 1;\r\n    for (let y = squareRowNumber - 1; y >= 0; y--) {\r\n        const x = currentColumnIdx - xInc;\r\n        if (x >= 0 && x < cols.length && y > 0 && y <= 8) {\r\n            squares.push(Utils.getCellKey(cols[x], y))\r\n            xInc++;\r\n            const lastSquare = squares[squares.length - 1];\r\n            if (squaresMap.get(lastSquare) && limitation) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    xInc = 1;\r\n    for (let y = squareRowNumber + 1; y <= 8; y++) {\r\n        const x = currentColumnIdx - xInc;\r\n        if (x >= 0 && x < cols.length && y > 0 && y <= 8) {\r\n\r\n            squares.push(Utils.getCellKey(cols[x], y))\r\n            xInc++;\r\n            const lastSquare = squares[squares.length - 1];\r\n            if (squaresMap.get(lastSquare) && limitation) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    xInc = 1;\r\n    for (let y = squareRowNumber + 1; y <= 8; y++) {\r\n        const x = currentColumnIdx + xInc;\r\n        if (x >= 0 && x < cols.length && y > 0 && y <= 8) {\r\n            squares.push(Utils.getCellKey(cols[x], y))\r\n            xInc++;\r\n            const lastSquare = squares[squares.length - 1];\r\n            if (squaresMap.get(lastSquare) && limitation) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return squares;\r\n}\r\n\r\n\r\nfunction getSquaresOptionsFromSquareWithK(\r\n    squareColumLetter,\r\n    squareRowNumber,\r\n) {\r\n    const currentColumnIdx = cols.indexOf(squareColumLetter);\r\n    const squares = [];\r\n    const kCombisXY = [\r\n        [-1, 0],\r\n        [-1, 1],\r\n        [0, 1],\r\n        [1, 1],\r\n        [1, 0],\r\n        [1, -1],\r\n        [0, -1],\r\n        [-1, -1],\r\n    ];\r\n    kCombisXY.forEach((xy) => {\r\n        const x = currentColumnIdx + xy[0];\r\n        const y = squareRowNumber + xy[1];\r\n        if (x >= 0 && x < cols.length && y > 0 && y <= 8) {\r\n            squares.push(Utils.getCellKey(cols[x], y))\r\n        }\r\n    });\r\n    return squares;\r\n}\r\n\r\nexport default {\r\n    getSquaresOptionsFromSquareWithR,\r\n    getSquaresOptionsFromSquareWithN,\r\n    getSquaresOptionsFromSquareWithP,\r\n    getSquaresOptionsFromSquareWithB,\r\n    getSquaresOptionsFromSquareWithK\r\n}","import { white, } from './chess-const.js'\r\nimport Utils from './chess-utils.js';\r\n\r\nconst boardSize = 90;\r\nconst div = (boardSize / 8);\r\n\r\nfunction drawArrowInSquares(squareFrom, squareTo) {\r\n    // @todo\r\n    // col and row index\r\n    // calculate x,y origin and target\r\n    // marker selection, color, etc..\r\n    // draw line\r\n\r\n    /* Example:\r\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 350 100\">\r\n        <defs>\r\n            <marker id=\"arrowhead\" markerWidth=\"10\" markerHeight=\"7\"\r\n            refX=\"0\" refY=\"3.5\" orient=\"auto\">\r\n            <polygon points=\"0 0, 10 3.5, 0 7\" />\r\n            </marker>\r\n        </defs>\r\n        <line x1=\"0\" y1=\"50\" x2=\"250\" y2=\"50\" stroke=\"#000\"\r\n        stroke-width=\"8\" marker-end=\"url(#arrowhead)\" />\r\n    </svg>\r\n    */\r\n}\r\n\r\nfunction toggleShowMarkersContainer() {\r\n\r\n    const markersItems = document.querySelectorAll('.markers');\r\n    const invisibleClassName = 'marker-invisible';\r\n    markersItems.forEach(markerItem => {\r\n        if (markerItem.classList.contains(invisibleClassName)) {\r\n            markerItem.classList.remove(invisibleClassName);\r\n        } else {\r\n            markerItem.classList.add(invisibleClassName);\r\n\r\n        }\r\n    });\r\n}\r\n\r\nfunction removeSquareMarkers(squareName) {\r\n    const children = document.getElementById(`markers-${squareName}`).children;\r\n    // Change live list, iterate reverse order\r\n    for (var i = children.length - 1; i >= 0; --i) {\r\n        children[i].remove();\r\n    }\r\n}\r\n\r\n\r\n\r\nfunction addMarkerCircle(squareName, type = null) {\r\n    let typeMarker = 'neutral'\r\n    if (type === white) {\r\n        typeMarker = 'white';\r\n    } else if (type === false) {\r\n        typeMarker = 'black';\r\n    }\r\n    const squareNode = document.getElementById(`markers-${squareName}`);\r\n    const use = document.createElementNS(\"http://www.w3.org/2000/svg\", \"use\");\r\n    use.setAttribute('href', `#marker-circle-${typeMarker}`);\r\n    use.setAttribute('data-square', `${squareName}`);\r\n    squareNode.appendChild(use);\r\n}\r\n\r\nfunction addMarkerRect(squareName, type = true) {\r\n    let typeMarker = type ? 'ok' : 'error';\r\n    const squareNode = document.getElementById(`markers-${squareName}`);\r\n    const use = document.createElementNS(\"http://www.w3.org/2000/svg\", \"use\");\r\n    use.setAttribute('href', `#marker-rect-${typeMarker}`);\r\n    use.setAttribute('data-square', `${squareName}`);\r\n    squareNode.appendChild(use);\r\n}\r\n\r\nfunction addMarkerMoveLast(squareName) {\r\n    const squareNode = document.getElementById(`markers-${squareName}`);\r\n    const use = document.createElementNS(\"http://www.w3.org/2000/svg\", \"use\");\r\n    use.setAttribute('href', `#marker-move-last`);\r\n    use.setAttribute('data-square', `${squareName}`);\r\n    squareNode.appendChild(use);\r\n}\r\n\r\nfunction addMarkerNotation(squareName, text) {\r\n    const textEl = document.createElementNS(\"http://www.w3.org/2000/svg\", \"text\");\r\n    const textNode = document.createTextNode(text);\r\n    textEl.setAttribute('x', `${div}%`);\r\n    textEl.setAttribute('y', '0');\r\n    textEl.setAttribute('dy', '3');\r\n    textEl.setAttribute('data-square', `${squareName}`);\r\n    textEl.setAttribute('class', 'marker-square-notation');\r\n    textEl.setAttribute('text-anchor', 'end');\r\n    textEl.appendChild(textNode);\r\n\r\n    const squareNode = document.getElementById(`markers-${squareName}`);\r\n    squareNode.appendChild(textEl);\r\n}\r\n\r\n\r\nfunction createSquare(squareLetter, colIdx, rowInt, rowIdx, asIcon = true) {\r\n\r\n    const squareName = Utils.getCellKey(squareLetter, rowInt);\r\n\r\n    const x = div * colIdx;\r\n    const y = div * rowIdx;\r\n\r\n    const xT = asIcon ? 1.5 : 4;\r\n    const yT = asIcon ? -1.5 : 8;\r\n    const dyT = asIcon ? 10 : 0;\r\n\r\n    const content = `\r\n        <title>${squareName}</title>\r\n        <rect id=\"base-${squareName}\" \r\n            data-square=\"${squareName}\"\r\n            class=\"base\" \r\n            width=\"${div}%\" \r\n            height=\"${div}%\"  />\r\n        <g id=\"markers-${squareName}\" \r\n            data-square=\"${squareName}\"\r\n            class=\"markers\" \r\n            width=\"${div}%\" \r\n            height=\"${div}%\"  \r\n            fill=\"transparent\"\r\n            />\r\n        <text id=\"piece-${squareName}\" \r\n            data-square=\"${squareName}\"\r\n            class=\"piece ${ asIcon ? 'asIcon' : ''}\" \r\n            text-anchor=\"start\" \r\n            x=\"${xT}\" \r\n            y=\"${yT}\" \r\n            dy=\"${dyT}\"\r\n         ></text>\r\n    `;\r\n\r\n    const squareEl = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\r\n    squareEl.setAttribute('class', 'square');\r\n    squareEl.setAttribute('id', `${squareName}`);\r\n    squareEl.setAttribute('data-square', `${squareName}`);\r\n    squareEl.setAttribute('data-square-col', `${squareLetter}`);\r\n    squareEl.setAttribute('data-square-row', `${rowInt}`);\r\n    squareEl.setAttribute('transform', `translate(${x},${y})`);\r\n\r\n    squareEl.innerHTML = content;\r\n    return squareEl;\r\n}\r\n\r\nfunction setPieceInSquare(squareName, pieceLetter = '', color = true) {\r\n    const squareNode = document.getElementById(`piece-${squareName}`);\r\n    const className = color ? 'white' : 'black';\r\n    squareNode.classList.add(className);\r\n    const notClassName = color ? 'black' : 'white';\r\n    if (color && squareNode.classList.contains(notClassName)) {\r\n        squareNode.classList.remove(notClassName);\r\n    }\r\n    squareNode.textContent = pieceLetter;\r\n}\r\n\r\nfunction createCoordinates(flipedRows, flipedCols) {\r\n    const elements = [];\r\n    flipedCols.forEach((col, idx) => {\r\n        const textEl = document.createElementNS(\"http://www.w3.org/2000/svg\", \"text\");\r\n        const textNode = document.createTextNode(col);\r\n        textEl.setAttribute('x', `${div*idx}%`);\r\n        textEl.setAttribute('y', '0');\r\n        textEl.setAttribute('dy', '0');\r\n        textEl.setAttribute('dx', '1');\r\n        textEl.setAttribute('data-coord-col', `${col}`);\r\n        textEl.setAttribute('class', 'board-coordinate board-coordinate-col');\r\n        textEl.setAttribute('text-anchor', 'start');\r\n        textEl.appendChild(textNode);\r\n\r\n        elements.push(textEl);\r\n    })\r\n\r\n    flipedRows.forEach((row, idx) => {\r\n        const textEl = document.createElementNS(\"http://www.w3.org/2000/svg\", \"text\");\r\n        const textNode = document.createTextNode(row);\r\n        textEl.setAttribute('x', '0');\r\n        textEl.setAttribute('y', `${div*idx}%`);\r\n        textEl.setAttribute('dy', '6');\r\n        textEl.setAttribute('dx', '-3');\r\n        textEl.setAttribute('data-coord-row', `${row}`);\r\n        textEl.setAttribute('class', 'board-coordinate board-coordinate-row');\r\n        textEl.setAttribute('text-anchor', 'start');\r\n        textEl.appendChild(textNode);\r\n\r\n        elements.push(textEl);\r\n    })\r\n    return elements;\r\n}\r\n\r\nfunction  getMarkerCircleIdByColor(color) {\r\n    return color ? 'marker-circle-white' : 'marker-circle-black';\r\n}\r\n\r\nfunction getDomainClassNameByColor(color) {\r\n    return color ? 'with-domain-white' : 'with-domain-black';\r\n}\r\n\r\nfunction drawMarkerInSquare(squareName, markerId) {\r\n    switch (markerId) {\r\n        case 'marker-circle-white':\r\n            addMarkerCircle(squareName, true);\r\n            break;\r\n        case 'marker-circle-neutral':\r\n            addMarkerCircle(squareName);\r\n            break;\r\n        case 'marker-circle-black':\r\n            addMarkerCircle(squareName, false);\r\n            break;\r\n        case 'marker-move-last':\r\n            addMarkerMoveLast(squareName);\r\n            break;\r\n        case 'marker-rect-ok':\r\n            addMarkerRect(squareName, true);\r\n            break;\r\n        case 'marker-rect-error':\r\n            addMarkerRect(squareName, false);\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n}\r\n\r\nexport default {\r\n    getDomainClassNameByColor,\r\n    getMarkerCircleIdByColor,\r\n    addMarkerCircle,\r\n    addMarkerRect,\r\n    addMarkerMoveLast,\r\n    addMarkerNotation,\r\n    createSquare,\r\n    setPieceInSquare,\r\n    createCoordinates,\r\n    removeSquareMarkers,\r\n    drawArrowInSquares,\r\n    toggleShowMarkersContainer,\r\n    drawMarkerInSquare\r\n}\r\n\r\n/*\r\nSvg.addMarkerCircle('e6', white);\r\nSvg.addMarkerRect('a1');\r\nSvg.addMarkerMoveLast('a2');\r\nSvg.addMarkerRect('e6', false);\r\nSvg.addMarkerNotation('f1', '??');\r\n*/\r\n","function addTextToClipboard( text ){\r\n    try {\r\n        let myTemporaryInputElement = document.createElement('input');\r\n        myTemporaryInputElement.type = 'text';\r\n        myTemporaryInputElement.value = text;\r\n        document.body.appendChild(myTemporaryInputElement);\r\n        myTemporaryInputElement.select();\r\n        document.execCommand('Copy');\r\n        document.body.removeChild(myTemporaryInputElement);\r\n\r\n    } catch (e) {\r\n        console.error('[Clipboard] addTextToClipboard:', e);\r\n    }\r\n}\r\n\r\nexport default {\r\n    addTextToClipboard\r\n}\r\n","export default class ChessControl {\r\n\r\n    constructor(callBacks) {\r\n        this.buffer = {\r\n            squareTarget: null,\r\n        };\r\n        this.callBacks = callBacks;\r\n        this.panelControls();\r\n\r\n    }\r\n\r\n    squareControls() {\r\n        const self = this;\r\n        document.querySelectorAll('.square').forEach(boardSquare => {\r\n            boardSquare.addEventListener('click', function(event) {\r\n                const targetElement = event.target || event.srcElement;\r\n                const targetSquareName = targetElement.getAttribute('data-square');\r\n                // console.log('[CONTROLS] square click:', targetSquareName);\r\n                self.checkOnSelectSquare(targetSquareName);\r\n            }, false);\r\n        })\r\n\r\n    }\r\n\r\n    async checkOnSelectSquare(selectedSquare) {\r\n        // console.log('[CONTROLS] checkOnSelectSquare:', selectedSquare, this.buffer.squareTarget);\r\n        if (this.buffer.squareTarget) {\r\n            if (selectedSquare === this.buffer.squareTarget) {\r\n                this.clearBufferAndSelection();\r\n            } else {\r\n                const moved = await this.callBacks.movePiecesFromSquares(this.buffer.squareTarget, selectedSquare);\r\n                if (moved) {\r\n                    this.clearBufferAndSelection();\r\n                } else {\r\n                    this.clearSelectedSquareFromBuffer()\r\n                    this.setBufferSquareTarget(selectedSquare);\r\n                }\r\n            }\r\n        } else {\r\n            this.setBufferSquareTarget(selectedSquare);\r\n        }\r\n    }\r\n\r\n    panelControls() {\r\n        const self = this;\r\n        document.querySelectorAll('.button-add-fig').forEach(button => {\r\n            button.addEventListener('click', function(event) {\r\n                const targetElement = event.target || event.srcElement;\r\n                const letter = targetElement.getAttribute('data-letter');\r\n                const color = letter === letter.toUpperCase();\r\n                self.callBacks.onAdd(self.buffer.squareTarget, letter.toLowerCase(), color)\r\n                self.clearSelectedSquareFromBuffer();\r\n            }, false);\r\n        })\r\n\r\n\r\n        document.querySelectorAll('.button-marker').forEach(button => {\r\n            button.addEventListener('click', function(event) {\r\n                const targetElement = event.currentTarget;\r\n                const markerId = targetElement.getAttribute('data-marker-id');\r\n                self.callBacks.onAddMarker(self.buffer.squareTarget, markerId)\r\n                self.clearSelectedSquareFromBuffer();\r\n            }, false);\r\n        })\r\n\r\n        const buttonClearSquare = document.getElementById(\"button-clear-square\");\r\n        buttonClearSquare.addEventListener('click', function() {\r\n            self.callBacks.onClearSquare(self.buffer.squareTarget);\r\n            self.clearSelectedSquareFromBuffer();\r\n        }, false);\r\n\r\n        const buttonDomainW = document.getElementById(\"button-paint-domains-w\");\r\n        buttonDomainW.addEventListener('click', function() {\r\n            self.callBacks.onDomainW();\r\n        }, false);\r\n\r\n        const buttonDomainB = document.getElementById(\"button-paint-domains-b\");\r\n        buttonDomainB.addEventListener('click', function() {\r\n            self.callBacks.onDomainB();\r\n        }, false);\r\n\r\n\r\n        const buttonClear = document.getElementById(\"button-clear\");\r\n        buttonClear.addEventListener('click', function() {\r\n            self.callBacks.onClear();\r\n        }, false);\r\n\r\n        const buttonInit = document.getElementById(\"button-init\");\r\n        buttonInit.addEventListener('click', function() {\r\n            self.callBacks.onInit();\r\n        }, false);\r\n\r\n        const buttonDomainsToggle = document.getElementById(\"button-toggle-domains\");\r\n        buttonDomainsToggle.addEventListener('click', function() {\r\n            self.callBacks.onDomainsToggle();\r\n        }, false);\r\n\r\n\r\n\r\n        const buttonSquareDomains = document.getElementById(\"button-paint-domains-square\");\r\n        buttonSquareDomains.addEventListener('click', function() {\r\n            self.callBacks.onDomainsSquare(self.buffer.squareTarget);\r\n            self.clearSelectedSquareFromBuffer();\r\n        }, false);\r\n\r\n        const buttonSquareDomainSupport = document.getElementById(\"button-paint-support-square-domain\");\r\n        buttonSquareDomainSupport.addEventListener('click', function() {\r\n            self.callBacks.onShowSquareDomainSupport(self.buffer.squareTarget);\r\n            self.clearSelectedSquareFromBuffer();\r\n        }, false);\r\n\r\n        const buttonSquareDomainAttacks = document.getElementById(\"button-paint-domain-attack-square\");\r\n        buttonSquareDomainAttacks.addEventListener('click', function() {\r\n            self.callBacks.onDomainAttacksSquare(self.buffer.squareTarget);\r\n            self.clearSelectedSquareFromBuffer();\r\n        }, false);\r\n\r\n        const buttonSquareDomainDanger = document.getElementById(\"button-paint-domain-danger-square\");\r\n        buttonSquareDomainDanger.addEventListener('click', function() {\r\n            self.callBacks.onDomainDangerSquare(self.buffer.squareTarget);\r\n            self.clearSelectedSquareFromBuffer();\r\n        }, false);\r\n\r\n\r\n        const buttonSquareAttack = document.getElementById(\"button-paint-attack-square\");\r\n        buttonSquareAttack.addEventListener('click', function() {\r\n            self.callBacks.onShowAttackSquare(self.buffer.squareTarget);\r\n            self.clearSelectedSquareFromBuffer();\r\n        }, false);\r\n\r\n        const buttonSquareDanger = document.getElementById(\"button-paint-danger-square\");\r\n        buttonSquareDanger.addEventListener('click', function() {\r\n            self.callBacks.onDangerSquare(self.buffer.squareTarget);\r\n            self.clearSelectedSquareFromBuffer();\r\n        }, false);\r\n\r\n\r\n        const buttonFlipBoard = document.getElementById(\"button-board-flip\");\r\n        buttonFlipBoard.addEventListener('click', function() {\r\n            self.callBacks.onFlip(self.buffer.squareTarget);\r\n        }, false);\r\n\r\n        const buttonSquareSupport = document.getElementById(\"button-paint-support-square\");\r\n        buttonSquareSupport.addEventListener('click', function() {\r\n            self.callBacks.onShowSquareSupport(self.buffer.squareTarget);\r\n            self.clearSelectedSquareFromBuffer();\r\n        }, false);\r\n\r\n\r\n\r\n        const buttonVisualsRemove = document.getElementById(\"button-visuals-remove\");\r\n        buttonVisualsRemove.addEventListener('click', function() {\r\n            self.callBacks.onRemoveVisuals();\r\n        }, false);\r\n\r\n        const buttonMarkersToggle = document.getElementById(\"button-markers-toggle\");\r\n        buttonMarkersToggle.addEventListener('click', function() {\r\n            self.callBacks.onToggleMarkers();\r\n        }, false);\r\n\r\n        const buttonFenCreateBoard = document.getElementById(\"button-fen-create-board\");\r\n        buttonFenCreateBoard.addEventListener('click', function() {\r\n            self.callBacks.onLoadFenFromInput();\r\n        }, false);\r\n\r\n        const buttonFenCreateFen = document.getElementById(\"button-fen-create-fen\");\r\n        buttonFenCreateFen.addEventListener('click', function() {\r\n            self.callBacks.onLoadFenToInput();\r\n        }, false);\r\n\r\n        const buttonFenCreateLink = document.getElementById(\"button-fen-create-link\");\r\n        buttonFenCreateLink.addEventListener('click', function() {\r\n            self.callBacks.onCreateLink();\r\n        }, false);\r\n\r\n        const buttonNavPrev = document.getElementById(\"button-nav-prev\");\r\n        buttonNavPrev.addEventListener('click', function() {\r\n            self.callBacks.onNavPrev();\r\n        }, false);\r\n\r\n        const buttonNavNext = document.getElementById(\"button-nav-next\");\r\n        buttonNavNext.addEventListener('click', function() {\r\n            self.callBacks.onNavNext();\r\n        }, false);\r\n\r\n    }\r\n\r\n    async setBufferSquareTarget(squareName) {\r\n        this.buffer.squareTarget = squareName;\r\n        if (squareName) {\r\n            const item = document.getElementById(`base-${squareName}`);\r\n\r\n            if (item.classList.contains('with-selection')) {\r\n                item.classList.remove('with-selection');\r\n            } else {\r\n                item.classList.add('with-selection')\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    clearSelectedSquareFromBuffer() {\r\n        const squareName = this.buffer.squareTarget;\r\n        if (squareName) {\r\n            const item = document.getElementById(`base-${squareName}`);\r\n            if (item.classList.contains('with-selection')) {\r\n                item.classList.remove('with-selection');\r\n            }\r\n            this.buffer.squareTarget = null;\r\n        }\r\n    }\r\n\r\n    clearBufferAndSelection() {\r\n        this.buffer.squareTarget = null;\r\n\r\n        document.querySelectorAll('.base').forEach(squareBase => {\r\n            squareBase.classList.remove('with-selection');\r\n        })\r\n\r\n    }\r\n}\r\n","function getParamsFromUrl(url) {\r\n    const params = {};\r\n    let parser = document.createElement('a');\r\n    parser.href = url;\r\n    const query = parser.search.substring(1);\r\n    if (!query) {\r\n        return params;\r\n    }\r\n    const vars = query.split('&');\r\n    for (let i = 0; i < vars.length; i++) {\r\n        const pair = vars[i].split('=');\r\n        params[pair[0]] = decodeURIComponent(pair[1]);\r\n    }\r\n    return params;\r\n};\r\n\r\nexport default {\r\n    getParamsFromUrl\r\n}","import Chess from './js/Chess.js'\r\nimport Url from './js/utils/url.js'\r\nimport './index.scss';\r\n\r\nconst urlParams = Url.getParamsFromUrl(window.location.href);\r\n\r\nlet fenToLoad = null;\r\nif ('fen' in urlParams) {\r\n    fenToLoad = urlParams.fen;\r\n}\r\n\r\nconst configA = {\r\n    fen: fenToLoad,\r\n    asIcon: true,\r\n    asLines: true,\r\n    withLimitation: true,\r\n    flip: false\r\n};\r\n\r\nconst chess = new Chess(configA);\r\n","import { rows, cols, fenBase, white, black, figures, flankC } from './chess/chess-const.js';\r\nimport MovesRegistry from './MovesRegistry.js';\r\nimport Utils from './chess/chess-utils.js';\r\nimport Squares from './chess/chess-squares.js';\r\nimport Svg from './chess/chess-svg.js';\r\nimport Clipboard from './utils/clipboard.js';\r\nimport ChessControls from './chess/chess-controls.js';\r\n\r\nexport default class Chess {\r\n\r\n    constructor(config) {\r\n        // Init\r\n        this.config = Utils.parseConfig(config);\r\n\r\n        this.figures = figures;\r\n        this.colors = {\r\n            white: white,\r\n            black: black,\r\n        };\r\n\r\n        this.movesRegistry = new MovesRegistry();\r\n\r\n        // Run\r\n        this.squaresMap = Utils.createSquaresMap(rows, cols);\r\n        this.markersMap = Utils.createMarkersMap(rows, cols);\r\n\r\n        const fenStr = config.fen || fenBase;\r\n\r\n        this.fenToMap(fenStr);\r\n        this.render();\r\n        this.chessControls = new ChessControls(this.actionsBridge);\r\n\r\n        this.state = {\r\n            isDomainWhiteOn: false,\r\n            isDomainBlackOn: false\r\n        }\r\n    }\r\n\r\n    lab() {\r\n        //this.drawFlankCenterDomains();\r\n        // Svg.drawMarkerInSquare('e4', 'id');\r\n        // this.addMarkerToSquare('e4', 'marker-circle-white');\r\n        // this.actionsBridge.onDomainB()\r\n    }\r\n\r\n    labMoves() {\r\n        // In progress\r\n        //this.move('a2', 'a3');\r\n\r\n    }\r\n\r\n    // ----------------------------------------------- Pieces & Board\r\n    fenToMap(fen) {\r\n        if (!fen || fen === '') {\r\n            return\r\n        }\r\n        const fenAsObj = Utils.parseFenStrToObject(fen);\r\n        this.squaresMap = new Map(Object.entries(fenAsObj));\r\n    }\r\n\r\n    async render() {\r\n        this.drawBoard().then(() => {\r\n            this.chessControls.squareControls();\r\n            this.lab()\r\n        });\r\n    }\r\n\r\n    flipBoard() {\r\n        this.config.flip = !this.config.flip;\r\n        const squares = document.querySelectorAll(\".square\");\r\n        const boardCoordinate = document.querySelectorAll(\".board-coordinate\");\r\n        squares.forEach(squareNode => {\r\n            squareNode.remove();\r\n        });\r\n        boardCoordinate.forEach(squareNode => {\r\n            squareNode.remove();\r\n        })\r\n        this.render()\r\n    }\r\n\r\n    async move(originSquare, targetSquare) {\r\n\r\n        const originPiece = this.squaresMap.get(originSquare);\r\n        if (originPiece) {\r\n            this.setFigureInSquare(targetSquare, originPiece.letter, originPiece.color);\r\n            this.setFigureInSquare(originSquare, null);\r\n            this.drawPiecesFromMap();\r\n            this.movesRegistry.saveMove(originSquare, targetSquare, this.squaresMap);\r\n            this.drawRemoveLastStepMoveMarker();\r\n            this.addMarkerToSquare( originSquare, 'marker-move-last' );\r\n            this.addMarkerToSquare( targetSquare, 'marker-move-last' );\r\n            const currentFen = Utils.parseMapToFenStr(this.squaresMap);\r\n            Utils.changeHistoryWithFen(currentFen);\r\n            // RePaint domains on move\r\n            if(this.state.isDomainWhiteOn)  {\r\n                this.drawDomainByColor(white);\r\n            }\r\n            if(this.state.isDomainBlackOn){\r\n                this.drawDomainByColor(black);\r\n            }\r\n            return true;\r\n        }\r\n    }\r\n\r\n    loadFenFromInput() {\r\n        const fenInputStr = document.getElementById(\"fen-input\").value;\r\n        this.fenToMap(fenInputStr);\r\n        this.drawPiecesFromMap();\r\n    }\r\n\r\n    loadFenToInput() {\r\n        const currentFen = Utils.parseMapToFenStr(this.squaresMap);\r\n        document.getElementById(\"fen-input\").value = currentFen;\r\n    }\r\n\r\n    // ----------------------------------------------- Moves control\r\n\r\n     drawFromMove(move){\r\n        // analog to this.move()\r\n        this.fenToMap(move.fen);\r\n        this.drawPiecesFromMap();\r\n        this.drawRemoveLastStepMoveMarker();\r\n        this.addMarkerToSquare( move.from, 'marker-move-last' );\r\n        this.addMarkerToSquare( move.to, 'marker-move-last' );\r\n        Utils.changeHistoryWithFen(move.fen);\r\n        // RePaint domains on move\r\n        if(this.state.isDomainWhiteOn)  {\r\n            this.drawDomainByColor(white);\r\n        }\r\n        if(this.state.isDomainBlackOn){\r\n            this.drawDomainByColor(black);\r\n        }\r\n    }\r\n\r\n    // ----------------------------------------------- Maps\r\n\r\n    setFigureInSquare(squareName, letter, color = white) {\r\n        this.squaresMap.set(squareName, Utils.asSquare(letter, color));\r\n    }\r\n\r\n    addMarkerToSquare(squareName, markerId, forceRemove = false) {\r\n        if (!squareName) {\r\n            return\r\n        }\r\n        const squareMarkers = this.markersMap.get(squareName);\r\n\r\n        const selectedMarkerIdInSquare = squareMarkers.indexOf(markerId);\r\n        if (selectedMarkerIdInSquare === -1) {\r\n            squareMarkers.push(markerId);\r\n            this.markersMap.set(squareName, squareMarkers);\r\n            Svg.drawMarkerInSquare(squareName, markerId);\r\n        }\r\n        if (forceRemove && selectedMarkerIdInSquare > -1) {\r\n            squareMarkers.splice(selectedMarkerIdInSquare, 1);\r\n            this.markersMap.set(squareName, squareMarkers);\r\n            this.drawMarkersFromMapBySquareName(squareName);\r\n        }\r\n    }\r\n\r\n    // ----------------------------------------------- Draw: Markers, Pieces\r\n\r\n\r\n    drawFlankCenterDomains(){\r\n        const targetRows = [6,5,4,3];\r\n        const classNameDomain = 'with-flank';\r\n        flankC.forEach( flankCColLetter =>{\r\n            targetRows.forEach(row=>{\r\n               const squareName = Utils.getCellKey(flankCColLetter, row);\r\n                document.getElementById(`base-${squareName}`).classList.add(classNameDomain);\r\n            })\r\n        })\r\n    }\r\n    drawRemoveLastStepMoveMarker(){\r\n        this.markersMap.forEach( markerItemList =>{\r\n            const markerIdx = markerItemList.indexOf('marker-move-last');\r\n            if (markerIdx > -1) {\r\n                markerItemList.splice(markerIdx, 1);\r\n            }\r\n        })\r\n        this.drawMarkersFromMap();\r\n    }\r\n\r\n    async drawBoard() {\r\n        const svg = document.getElementById(\"svg-squares\");\r\n        const svgCoordinates = document.getElementById(\"svg-coordinates\");\r\n        const flip = this.config.flip;\r\n        const flipedRows = flip ? [...rows].reverse() : rows;\r\n        const flipedCols = flip ? [...cols].reverse() : cols;\r\n\r\n        flipedRows.forEach((row, rowIdx) => {\r\n            flipedCols.forEach((colLetter, colIdx) => {\r\n                const squareEl = Svg.createSquare(colLetter, colIdx, row, rowIdx, this.config.asIcon);\r\n                svg.appendChild(squareEl);\r\n            })\r\n        })\r\n        this.drawPiecesFromMap();\r\n        const coordinatesItems = Svg.createCoordinates(flipedRows, flipedCols);\r\n        coordinatesItems.forEach(coorItem => {\r\n            svgCoordinates.appendChild(coorItem);\r\n        })\r\n    }\r\n\r\n    drawPiecesFromMap() {\r\n        this.squaresMap.forEach((squareEntry, squareKey) => {\r\n            if (squareEntry) {\r\n                let figureText = '';\r\n                const entryFigure = figures[squareEntry.letter];\r\n                if (this.config.asIcon === true) {\r\n                    figureText = entryFigure.asIcon(squareEntry.color);\r\n                } else {\r\n                    figureText = entryFigure.asLetter(squareEntry.color);\r\n                }\r\n                Svg.setPieceInSquare(squareKey, figureText, squareEntry.color)\r\n            } else {\r\n                Svg.setPieceInSquare(squareKey)\r\n            }\r\n        })\r\n    }\r\n\r\n    drawMarkersFromMap() {\r\n        this.markersMap.forEach((markerEntry, squareKey) => {\r\n            Svg.removeSquareMarkers(squareKey);\r\n            markerEntry.forEach(markerItemId => {\r\n                Svg.drawMarkerInSquare(squareKey, markerItemId);\r\n            })\r\n        })\r\n    }\r\n\r\n    drawMarkersFromMapBySquareName(squareName) {\r\n        //remove all markers first\r\n        Svg.removeSquareMarkers(squareName);\r\n        // Redraw markers from map\r\n        const squareMarkers = this.markersMap.get(squareName);\r\n        squareMarkers.forEach(markerItemId => {\r\n            Svg.drawMarkerInSquare(squareName, markerItemId);\r\n        })\r\n    }\r\n\r\n    drawRemoveAllMarkers() {\r\n        this.markersMap = Utils.createMarkersMap(rows, cols);\r\n        this.drawMarkersFromMap()\r\n    }\r\n\r\n    // ----------------------------------------------- Engine\r\n    getSquarePieceAllowedSquares(squareName, forcedPieceAndColor = null) {\r\n        const limitation = this.config.withLimitation;\r\n        const options = [];\r\n        if (!squareName) {\r\n            return;\r\n        }\r\n        const squareNameParts = squareName.split('');\r\n        const squareColumnLetter = squareNameParts[0];\r\n        const squareRowNumber = parseInt(squareNameParts[1], 10);\r\n        const { letter, color } = forcedPieceAndColor ? forcedPieceAndColor : this.squaresMap.get(squareName);\r\n        if (letter === 'r') {\r\n            const squareOptions = Squares.getSquaresOptionsFromSquareWithR(this.squaresMap, squareColumnLetter, squareRowNumber, limitation);\r\n            options.push(...squareOptions);\r\n        }\r\n        if (letter === 'n') {\r\n            const squareOptions = Squares.getSquaresOptionsFromSquareWithN(squareColumnLetter, squareRowNumber);\r\n            options.push(...squareOptions);\r\n        }\r\n        if (letter === 'p') {\r\n            const squareOptions = Squares.getSquaresOptionsFromSquareWithP(squareColumnLetter, squareRowNumber, color);\r\n            options.push(...squareOptions);\r\n        }\r\n        if (letter === 'b') {\r\n            const squareOptions = Squares.getSquaresOptionsFromSquareWithB(this.squaresMap, squareColumnLetter, squareRowNumber, limitation);\r\n            options.push(...squareOptions);\r\n        }\r\n        if (letter === 'q') {\r\n            const squareOptionsVertHorz = Squares.getSquaresOptionsFromSquareWithR(this.squaresMap, squareColumnLetter, squareRowNumber, limitation);\r\n            const squareOptionsDiagonal = Squares.getSquaresOptionsFromSquareWithB(this.squaresMap, squareColumnLetter, squareRowNumber, limitation);\r\n            options.push(...squareOptionsVertHorz, ...squareOptionsDiagonal);\r\n        }\r\n        if (letter === 'k') {\r\n            const squareOptions = Squares.getSquaresOptionsFromSquareWithK(squareColumnLetter, squareRowNumber);\r\n            options.push(...squareOptions);\r\n        }\r\n        return options;\r\n    }\r\n\r\n    drawDomainByColor(color = white) {\r\n        this.drawClearDomains(color);\r\n        if (color) {\r\n            this.state.isDomainWhiteOn = true;\r\n        } else {\r\n            this.state.isDomainBlackOn = true;\r\n        }\r\n        const domainClassName = Svg.getDomainClassNameByColor(color);\r\n        const squaresInDomain = []\r\n        this.squaresMap.forEach((squareEntry, squareName) => {\r\n            if (squareEntry && squareEntry.color === color) {\r\n                const squaresFromFigure = this.getSquarePieceAllowedSquares(squareName);\r\n                squaresInDomain.push(...squaresFromFigure);\r\n            }\r\n        })\r\n        squaresInDomain.forEach(squareName => {\r\n            // todo: domain from map\r\n            document.getElementById(`base-${squareName}`).classList.add(domainClassName);\r\n        })\r\n        return squaresInDomain;\r\n    }\r\n\r\n    drawDomainBySquare(squareName) {\r\n        const squarePiece = this.squaresMap.get(squareName);\r\n        if (squarePiece) {\r\n            const markerIdBySquareColor = Svg.getMarkerCircleIdByColor(squarePiece.color);\r\n            this.addMarkerToSquare(squareName, markerIdBySquareColor);\r\n            const squaresFromFigure = this.getSquarePieceAllowedSquares(squareName);\r\n            squaresFromFigure.forEach(domainSquareName => {\r\n                const classNameDomain = Svg.getDomainClassNameByColor(squarePiece.color);\r\n                // todo: domain from map\r\n                document.getElementById(`base-${domainSquareName}`).classList.add(classNameDomain);\r\n            })\r\n        }\r\n    }\r\n\r\n    drawClearDomains(color = white) {\r\n        if (color) {\r\n            this.state.isDomainWhiteOn = false;\r\n        } else {\r\n            this.state.isDomainBlackOn = false;\r\n        }\r\n        const classNameColor = Svg.getDomainClassNameByColor(color);\r\n        this.squaresMap.forEach((_, squareName) => {\r\n            // todo: domain from map\r\n            const classList = document.getElementById(`base-${squareName}`).classList;\r\n            classList.remove(classNameColor);\r\n        });\r\n    }\r\n\r\n    drawAttackFromSquare(squareName) {\r\n        if (!squareName) {\r\n            return;\r\n        }\r\n        const squarePiece = this.squaresMap.get(squareName);\r\n        if (squarePiece) {\r\n            const squareOptions = this.getSquarePieceAllowedSquares(squareName);\r\n            const markerIdByColor = Svg.getMarkerCircleIdByColor(squarePiece.color);\r\n            squareOptions.forEach(optionSquareKey => {\r\n                const pieceInOptionSquare = this.squaresMap.get(optionSquareKey);\r\n                if (pieceInOptionSquare && pieceInOptionSquare.color !== squarePiece.color) {\r\n                    // target!\r\n                    this.addMarkerToSquare(optionSquareKey, markerIdByColor);\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    drawAttackFromSquareDomain(squareName) {\r\n        if (!squareName) {\r\n            return;\r\n        }\r\n        const squarePiece = this.squaresMap.get(squareName);\r\n        if (squarePiece) {\r\n            const markerIdByColor = Svg.getMarkerCircleIdByColor(squarePiece.color);\r\n            const squareOptions = this.getSquarePieceAllowedSquares(squareName);\r\n            this.drawDomainBySquare(squareName);\r\n            squareOptions.forEach(domainSquareName => {\r\n                const ghostPieceInDomain = squarePiece;\r\n                const squareNextOptions = this.getSquarePieceAllowedSquares(domainSquareName, ghostPieceInDomain);\r\n                squareNextOptions.forEach(nextDomainSquareName => {\r\n                    const pieceInOptionSquare = this.squaresMap.get(nextDomainSquareName);\r\n                    if (pieceInOptionSquare && pieceInOptionSquare.color !== squarePiece.color) {\r\n                        // target!\r\n                        this.addMarkerToSquare(squareName, 'marker-circle-neutral');\r\n                        this.addMarkerToSquare(domainSquareName, markerIdByColor);\r\n                        this.addMarkerToSquare(nextDomainSquareName, markerIdByColor);\r\n                    }\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    drawDangerToSquare(squareName) {\r\n        if (!squareName) {\r\n            return;\r\n        }\r\n        let isSquareSave = true;\r\n        const squarePiece = this.squaresMap.get(squareName);\r\n        if (squarePiece) {\r\n            this.squaresMap.forEach((squareMapValue, squareMapKey) => {\r\n                if (squareMapKey !== squareName && squareMapValue && squareMapValue.color !== squarePiece.color) {\r\n                    const squareMapSquareOptions = this.getSquarePieceAllowedSquares(squareMapKey);\r\n                    // console.debug('[CHESS] drawAttacksToSquare: mapOptions', squareMapSquareOptions);\r\n                    if (squareMapSquareOptions.includes(squareName)) {\r\n                        isSquareSave = false;\r\n                        const markerIdByColor = Svg.getMarkerCircleIdByColor(squareMapValue.color);\r\n                        this.addMarkerToSquare(squareMapKey, markerIdByColor)\r\n                        this.drawDomainBySquare(squareMapKey);\r\n                    }\r\n                }\r\n            })\r\n            if (isSquareSave) {\r\n                this.addMarkerToSquare(squareName, 'marker-rect-ok');\r\n            } else {\r\n                const markerIdBySquareColor = Svg.getMarkerCircleIdByColor(squarePiece.color);\r\n                this.addMarkerToSquare(squareName, markerIdBySquareColor);\r\n            }\r\n        }\r\n    }\r\n\r\n    drawDangerToSquareDomain(squareName) {\r\n        if (!squareName) {\r\n            return;\r\n        }\r\n        let isSquareSave = true;\r\n        const squarePiece = this.squaresMap.get(squareName);\r\n        if (squarePiece) {\r\n            const squaresOptionsFromFigure = this.getSquarePieceAllowedSquares(squareName);\r\n            squaresOptionsFromFigure.forEach(domainSquareName => {\r\n               this.drawDomainBySquare(squareName);\r\n                this.squaresMap.forEach((squareMapValue, squareMapKey) => {\r\n                    if (squareMapKey !== squareName && squareMapValue && squareMapValue.color !== squarePiece.color) {\r\n                        const squareMapSquareOptions = this.getSquarePieceAllowedSquares(squareMapKey);\r\n                        // console.debug('[CHESS] drawAttacksToSquareDomain: mapOptions', squareMapSquareOptions);\r\n                        // console.debug('[CHESS] drawAttacksToSquareDomain: ´fgure', squaresOptionsFromFigure);\r\n\r\n                        const uniques = squaresOptionsFromFigure.filter(value => squareMapSquareOptions.includes(value));\r\n                        uniques.forEach((commonSquare) => {\r\n                            const markerIdByColor = Svg.getMarkerCircleIdByColor(squareMapValue.color);\r\n                            this.addMarkerToSquare(squareMapKey, markerIdByColor);\r\n                            this.addMarkerToSquare(commonSquare, markerIdByColor);\r\n\r\n                        })\r\n                        if (uniques.length > 0) {\r\n                            isSquareSave = false;\r\n                        }\r\n                    }\r\n                })\r\n            })\r\n            if (isSquareSave) {\r\n                this.addMarkerToSquare(squareName, 'marker-rect-ok');\r\n            } else {\r\n\r\n                this.addMarkerToSquare(squareName, 'marker-circle-neutral');\r\n            }\r\n        }\r\n    }\r\n\r\n    drawSupportToSquare(squareName) {\r\n        if (!squareName) {\r\n            return;\r\n        }\r\n        let isSquareSupported = false;\r\n        const squarePiece = this.squaresMap.get(squareName);\r\n        if (squarePiece) {\r\n            this.squaresMap.forEach((squareMapValue, squareMapKey) => {\r\n                if (squareMapKey !== squareName && squareMapValue && squareMapValue.color === squarePiece.color) {\r\n                    const squareMapSquareOptions = this.getSquarePieceAllowedSquares(squareMapKey);\r\n                    console.debug('[CHESS] drawSupportToSquare: mapOptions', squareMapSquareOptions);\r\n                    if (squareMapSquareOptions.includes(squareName)) {\r\n                        isSquareSupported = true;\r\n                        const markerIdByColor = Svg.getMarkerCircleIdByColor(squareMapValue.color);\r\n                        this.addMarkerToSquare(squareMapKey, markerIdByColor)\r\n                        this.drawDomainBySquare(squareMapKey);\r\n                    }\r\n                }\r\n            })\r\n            if (isSquareSupported) {\r\n                this.addMarkerToSquare(squareName, 'marker-rect-ok');\r\n            } else {\r\n                this.addMarkerToSquare(squareName, 'marker-rect-error');\r\n            }\r\n        }\r\n    }\r\n\r\n    drawSupportToSquareDomain(squareName) {\r\n        if (!squareName) {\r\n            return;\r\n        }\r\n        let isSquareSupported = false;\r\n        const squarePiece = this.squaresMap.get(squareName);\r\n        if (squarePiece) {\r\n            this.drawDomainBySquare(squareName);\r\n\r\n            const squaresOptionsFromFigure = this.getSquarePieceAllowedSquares(squareName);\r\n            squaresOptionsFromFigure.forEach(domainSquareName => {\r\n\r\n                this.squaresMap.forEach((squareMapValue, squareMapKey) => {\r\n                    if (squareMapKey !== squareName && squareMapValue && squareMapValue.color === squarePiece.color) {\r\n                        const squareMapSquareOptions = this.getSquarePieceAllowedSquares(squareMapKey);\r\n                        // console.debug('[CHESS] drawSupportToSquareDomain: mapOptions', squareMapSquareOptions);\r\n                        // console.debug('[CHESS] drawSupportToSquareDomain: ´fgure', squaresOptionsFromFigure);\r\n                        const uniques = squaresOptionsFromFigure.filter(value => squareMapSquareOptions.includes(value));\r\n                        uniques.forEach((commonSquare) => {\r\n                            const markerIdByColor = Svg.getMarkerCircleIdByColor(squareMapValue.color);\r\n                            this.addMarkerToSquare(squareMapKey, markerIdByColor);\r\n                            this.addMarkerToSquare(commonSquare, markerIdByColor);\r\n\r\n                        })\r\n                        if (uniques.length > 0) {\r\n                            isSquareSupported = true;\r\n                        }\r\n                    }\r\n                })\r\n            })\r\n            if (isSquareSupported) {\r\n                this.addMarkerToSquare(squareName, 'marker-circle-neutral');\r\n            } else {\r\n                this.addMarkerToSquare(squareName, 'marker-rect-error');\r\n            }\r\n        }\r\n    }\r\n\r\n    // ----------------------------------------------- Control Actions Bridge\r\n    get actionsBridge() {\r\n        return {\r\n            onShowSquareSupport: (squareTarget) => {\r\n                this.drawSupportToSquare(squareTarget);\r\n            },\r\n            onShowSquareDomainSupport: (squareTarget) => {\r\n                this.drawSupportToSquareDomain(squareTarget);\r\n            },\r\n            onFlip: () => {\r\n                this.flipBoard()\r\n            },\r\n            movePiecesFromSquares: async(originSquare, targetSquare) => {\r\n                return this.move(originSquare, targetSquare);\r\n            },\r\n            onAddMarker: (squareTarget, markerId) => {\r\n                this.addMarkerToSquare(squareTarget, markerId, true);\r\n            },\r\n            onAdd: (square, letter, color) => {\r\n                if (!square) { return; }\r\n                this.setFigureInSquare(square, letter, color);\r\n                this.drawPiecesFromMap();\r\n            },\r\n            onClearSquare: (square) => {\r\n                if (!square) { return; }\r\n                this.setFigureInSquare(square, null);\r\n                this.drawPiecesFromMap();\r\n            },\r\n            onClear: () => {\r\n                this.squaresMap = Utils.createSquaresMap(rows, cols);\r\n                this.drawPiecesFromMap();\r\n                const currentFen = Utils.parseMapToFenStr(this.squaresMap);\r\n                Utils.changeHistoryWithFen(currentFen);\r\n            },\r\n            onInit: () => {\r\n                this.fenToMap(fenBase);\r\n                this.drawPiecesFromMap();\r\n                Utils.changeHistoryWithFen(fenBase);\r\n            },\r\n            onDomainW: async() => {\r\n                if (!this.state.isDomainWhiteOn) {\r\n                    this.drawDomainByColor(white);\r\n                } else {\r\n                    this.drawClearDomains(white);\r\n                }\r\n            },\r\n            onDomainB: async() => {\r\n                if (!this.state.isDomainBlackOn) {\r\n                    this.drawDomainByColor(black);\r\n                } else {\r\n                    this.drawClearDomains(black);\r\n                }\r\n            },\r\n            onDomainsToggle: async() => {\r\n                if (this.state.isDomainWhiteOn || this.state.isDomainBlackOn) {\r\n                    this.drawClearDomains(white);\r\n                    this.drawClearDomains(black);\r\n                } else {\r\n                    this.drawDomainByColor(white);\r\n                    this.drawDomainByColor(black);\r\n                }\r\n            },\r\n            onDomainsSquare: async(squareName) => {\r\n                this.drawDomainBySquare(squareName);\r\n            },\r\n            onDomainDangerSquare: async(squareName) => {\r\n                this.drawDangerToSquareDomain(squareName);\r\n            },\r\n            onDomainAttacksSquare: async(squareName) => {\r\n                this.drawAttackFromSquareDomain(squareName);\r\n            },\r\n            onShowAttackSquare: async(squareName) => {\r\n                this.drawAttackFromSquare(squareName)\r\n            },\r\n            onDangerSquare: async(squareName) => {\r\n                this.drawDangerToSquare(squareName)\r\n            },\r\n            onRemoveVisuals: () => {\r\n                this.drawRemoveAllMarkers();\r\n                this.drawClearDomains(white);\r\n                this.drawClearDomains(black);\r\n            },\r\n            onToggleMarkers: () => {\r\n                Svg.toggleShowMarkersContainer();\r\n\r\n            },\r\n            onLoadFenFromInput: () => {\r\n                this.loadFenFromInput();\r\n            },\r\n            onLoadFenToInput: () => {\r\n                this.loadFenToInput();\r\n            },\r\n            onCreateLink: () => {\r\n                const currentFen = Utils.parseMapToFenStr(this.squaresMap);\r\n                const linkHref = Utils.getAbsoluteRouteWithFen(currentFen);\r\n                Clipboard.addTextToClipboard(linkHref);\r\n\r\n            },\r\n            onNavPrev:()=>{\r\n                const move = this.movesRegistry.prevMove;\r\n                if(!move){\r\n                    return;\r\n                }\r\n                this.drawFromMove(move);\r\n            },\r\n            onNavNext:()=>{\r\n                const move = this.movesRegistry.nextMove;\r\n                if(!move){\r\n                    return;\r\n                }\r\n                this.drawFromMove(move);\r\n            },\r\n\r\n        }\r\n    }\r\n\r\n}\r\n"],"sourceRoot":""}