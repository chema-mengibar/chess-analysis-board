{"version":3,"sources":["webpack://chess-analysis-board/./src/js/utils/Figure.js","webpack://chess-analysis-board/./src/js/utils/chess.constants.js","webpack://chess-analysis-board/./src/js/services/controls-service/controls.service.js","webpack://chess-analysis-board/./src/js/utils/square.utils.js","webpack://chess-analysis-board/./src/js/services/board-service/board-service.utils.js","webpack://chess-analysis-board/./src/js/services/board-service/board.service.js","webpack://chess-analysis-board/./src/js/services/board-render-service/board-render-svg.utils.js","webpack://chess-analysis-board/./src/js/utils/url.js","webpack://chess-analysis-board/./src/js/services/board-render-service/board-render.service.js","webpack://chess-analysis-board/./src/js/services/game-export-service/game-export.utils.js","webpack://chess-analysis-board/./src/js/services/game-export-service/game-export.service.js","webpack://chess-analysis-board/./src/js/services/analysis-service/analysis-svg.utils.js","webpack://chess-analysis-board/./src/js/services/analysis-service/analysis-squares.utils.js","webpack://chess-analysis-board/./src/js/services/analysis-service/analysis.service.js","webpack://chess-analysis-board/./src/index.js","webpack://chess-analysis-board/./src/js/chess.js"],"names":["Figure","config","this","letterW","iconW","letterB","iconB","color","rows","cols","black","fenBase","figures","b","r","n","k","q","p","ControlsService","callBacks","buffer","squareTarget","panelControls","self","document","querySelectorAll","forEach","boardSquare","addEventListener","event","targetSquareName","target","srcElement","getAttribute","checkOnSelectSquare","selectedSquare","movePiecesFromSquares","clearBufferAndSelection","clearSelectedSquareFromBuffer","setBufferSquareTarget","button","letter","toUpperCase","onAdd","toLowerCase","markerId","currentTarget","onAddMarker","getElementById","onClearSquare","onDomainW","onDomainB","onClear","onInit","onDomainsToggle","onDomainsSquare","onShowSquareDomainSupport","onDomainAttacksSquare","onDomainDangerSquare","onShowAttackSquare","onDangerSquare","onFlip","onShowSquareSupport","onRemoveVisuals","onToggleMarkers","onLoadFenFromInput","onLoadFenToInput","onCreateLink","onNavPrev","onNavNext","onNavRecord","onLoadPgn","onDisplayReportBalanceWhites","onDisplayReportBalanceBlacks","squareName","item","classList","contains","remove","add","squareBase","colLetter","rowNumber","white","convertFenStrToObject","fen","squaresKeyVal","allowedLetters","split","rowText","rowIdw","boardRowIdx","currentCol","character","includes","cellKey","figureLetter","jumpCols","parseInt","c","convertSquareMapToFenStr","squaresMap","fenSquarePositions","emptyAccumulator","row","rowIdx","col","squarePiece","get","toString","pieceLetter","length","fenToMap","fenAsObj","Map","Object","entries","BoardService","moves","moveIdx","state","move","init","createSquaresMap","setFenToSquareMap","movesReset","moveSave","listSquares","squareKey","push","_squaresMap","getSquaresMap","resultMap","setSquaresMap","map","originSquare","targetSquare","from","to","set","originPiece","setFigureInSquare","setMoveState","moveEntry","getSquareMapAsFen","currentCursor","cursor","squareLetter","colIdx","rowInt","asIcon","div","svg","x","y","fontSize","content","squareEl","createElementNS","setAttribute","innerHTML","squareNode","className","notClassName","textContent","url","params","parser","createElement","href","query","search","substring","vars","i","pair","decodeURIComponent","fenQuery","window","location","origin","pathname","BoardRenderService","services","flip","boardService","history","pushState","id","reverse","drawCoordinates","drawSquares","drawPiecesFromMap","squares","boardCoordinate","drawBoardFromSquareMap","flipedRows","getRows","flipedCols","getCols","appendChild","svgCoordinates","idx","textEl","textNode","createTextNode","squareEntry","figureText","entryFigure","asLetter","currentFen","changeHistoryWithFen","pgnStr","m","regex","registry","pgnStrNoBr","replace","exec","index","lastIndex","match","groupIndex","pgnMove","pgnMoveClean1","figure","squareFrom","squareTo","indexOf","partsChange","figureToChange","pgnSquareName","pgnMoveClean2","capture","error","Error","text","myTemporaryInputElement","type","value","body","select","execCommand","removeChild","e","console","GameExportService","analysisService","linkHref","fenInputStr","pgnInputStr","renderPgnToBoard","notations","cursorColor","notation","notationParts","rItems","rItem","flag","squareValue","getSquarePieceAllowedSquares","keyCol","squareToCol","figureToSet","addMarkerRect","typeMarker","use","addMarkerCircle","addMarkerMoveLast","countSupport","countDanger","targetColor","colorType","markersItems","invisibleClassName","markerItem","children","listCells","squareColumLetter","squareRowNumber","limitation","currentColumnIdx","lastSquare","yx","allowPawnMove","cellY","pCombis","cellYplus2","xy","xInc","AnalysisService","markersMap","isDomainWhiteOn","isDomainBlackOn","drawClearDomains","drawDomainByColor","forceRemove","squareMarkers","selectedMarkerIdInSquare","splice","drawMarkersFromMapBySquareName","markerEntry","markerItemId","AnalysisServiceUtils","drawMarkerInSquare","drawMarkersFromMap","forcedPieceAndColor","withLimitation","options","squareNameParts","squareColumnLetter","squareOptions","squareOptionsVertHorz","squareOptionsDiagonal","selfColor","drawRemoveAllMarkers","squareMapValueA","squareMapKeyA","note","squareMapValueB","squareMapKeyB","piece","isSquareSupported","squareMapValue","squareMapKey","markerIdByColor","addMarkerToSquare","drawDomainBySquare","isSquareSave","squaresOptionsFromFigure","squareMapSquareOptions","uniques","filter","commonSquare","markerIdBySquareColor","domainSquareName","ghostPieceInDomain","nextDomainSquareName","pieceInOptionSquare","domainClassName","squaresInDomain","squaresFromFigure","classNameDomain","classNameColor","_","optionSquareKey","urlParams","fenToLoad","parseConfig","board","boardRenderService","render","analysis","gameExportService","controlsService","actionsBridge","then","squareControls","lab","asLines","drawDomainsByState","square","clear","chessMove","async","drawBoardFlipped","chessAddPiece","chessClearBoard","chessInitBoard","boardSquareDangerSupportRepor","drawSupportToSquare","drawSupportToSquareDomain","toggleColorDomain","toggleDomains","drawDangerToSquareDomain","drawAttackFromSquareDomain","drawAttackFromSquare","drawDangerToSquare","toggleMarkers","loadFenFromInput","loadFenToInput","createBoardLink","loadPgnFromInput","movePrev","moveNext"],"mappings":"mBAAe,MAAMA,EACjB,YAAYC,GACRC,KAAKC,QAAUF,EAAOE,QACtBD,KAAKE,MAAQH,EAAOG,MACpBF,KAAKG,QAAUJ,EAAOI,QACtBH,KAAKI,MAAQL,EAAOK,MAGxB,SAASC,GAAQ,GACb,OAAIA,EACOL,KAAKC,QAETD,KAAKG,QAGhB,OAAOE,GAAQ,GACX,OAAIA,EACOL,KAAKE,MAETF,KAAKI,OCjBb,MAEME,EAAO,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC7BC,EAAO,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAE3C,GAAQ,EACRC,GAAQ,EAERC,EAAU,2DAEVC,EAAU,CACnBC,EAAG,IAAIb,EAAO,CAAEG,QAAS,IAAKC,MAAO,IAAKC,QAAS,IAAKC,MAAO,MAC/DQ,EAAG,IAAId,EAAO,CAAEG,QAAS,IAAKC,MAAO,IAAKC,QAAS,IAAKC,MAAO,MAC/DS,EAAG,IAAIf,EAAO,CAAEG,QAAS,IAAKC,MAAO,IAAKC,QAAS,IAAKC,MAAO,MAC/DU,EAAG,IAAIhB,EAAO,CAAEG,QAAS,IAAKC,MAAO,IAAKC,QAAS,IAAKC,MAAO,MAC/DW,EAAG,IAAIjB,EAAO,CAAEG,QAAS,IAAKC,MAAO,IAAKC,QAAS,IAAKC,MAAO,MAC/DY,EAAG,IAAIlB,EAAO,CAAEG,QAAS,IAAKC,MAAO,IAAKC,QAAS,IAAKC,MAAO,OClBpD,MAAMa,EAEjB,YAAYC,GACRlB,KAAKmB,OAAS,CACVC,aAAc,MAElBpB,KAAKkB,UAAYA,EACjBlB,KAAKqB,gBAGT,iBACI,MAAMC,EAAOtB,KACbuB,SAASC,iBAAiB,WAAWC,SAAQC,IACzCA,EAAYC,iBAAiB,SAAS,SAASC,GAC3C,MACMC,GADgBD,EAAME,QAAUF,EAAMG,YACLC,aAAa,eACpDV,EAAKW,oBAAoBJ,MAC1B,MAMX,0BAA0BK,GAClBlC,KAAKmB,OAAOC,aACRc,IAAmBlC,KAAKmB,OAAOC,cAGjBpB,KAAKkB,UAAUiB,sBAAsBnC,KAAKmB,OAAOC,aAAcc,GAF7ElC,KAAKoC,2BAMDpC,KAAKqC,gCACLrC,KAAKsC,sBAAsBJ,IAInClC,KAAKsC,sBAAsBJ,GAInC,gBACI,MAAMZ,EAAOtB,KACbuB,SAASC,iBAAiB,mBAAmBC,SAAQc,IACjDA,EAAOZ,iBAAiB,SAAS,SAASC,GACtC,MACMY,GADgBZ,EAAME,QAAUF,EAAMG,YACfC,aAAa,eACpC3B,EAAQmC,IAAWA,EAAOC,cAChCnB,EAAKJ,UAAUwB,MAAMpB,EAAKH,OAAOC,aAAcoB,EAAOG,cAAetC,GACrEiB,EAAKe,mCACN,MAIPd,SAASC,iBAAiB,kBAAkBC,SAAQc,IAChDA,EAAOZ,iBAAiB,SAAS,SAASC,GACtC,MACMgB,EADgBhB,EAAMiB,cACGb,aAAa,kBAC5CV,EAAKJ,UAAU4B,YAAYxB,EAAKH,OAAOC,aAAcwB,GACrDtB,EAAKe,mCACN,MAGmBd,SAASwB,eAAe,uBAChCpB,iBAAiB,SAAS,WACxCL,EAAKJ,UAAU8B,cAAc1B,EAAKH,OAAOC,cACzCE,EAAKe,mCACN,GAEmBd,SAASwB,eAAe,0BAChCpB,iBAAiB,SAAS,WACpCL,EAAKJ,UAAU+B,eAChB,GAEmB1B,SAASwB,eAAe,0BAChCpB,iBAAiB,SAAS,WACpCL,EAAKJ,UAAUgC,eAChB,GAGiB3B,SAASwB,eAAe,gBAChCpB,iBAAiB,SAAS,WAClCL,EAAKJ,UAAUiC,aAChB,GAEgB5B,SAASwB,eAAe,eAChCpB,iBAAiB,SAAS,WACjCL,EAAKJ,UAAUkC,YAChB,GAEyB7B,SAASwB,eAAe,yBAChCpB,iBAAiB,SAAS,WAC1CL,EAAKJ,UAAUmC,qBAChB,GAIyB9B,SAASwB,eAAe,+BAChCpB,iBAAiB,SAAS,WAC1CL,EAAKJ,UAAUoC,gBAAgBhC,EAAKH,OAAOC,cAC3CE,EAAKe,mCACN,GAE+Bd,SAASwB,eAAe,sCAChCpB,iBAAiB,SAAS,WAChDL,EAAKJ,UAAUqC,0BAA0BjC,EAAKH,OAAOC,cACrDE,EAAKe,mCACN,GAE+Bd,SAASwB,eAAe,qCAChCpB,iBAAiB,SAAS,WAChDL,EAAKJ,UAAUsC,sBAAsBlC,EAAKH,OAAOC,cACjDE,EAAKe,mCACN,GAE8Bd,SAASwB,eAAe,qCAChCpB,iBAAiB,SAAS,WAC/CL,EAAKJ,UAAUuC,qBAAqBnC,EAAKH,OAAOC,cAChDE,EAAKe,mCACN,GAGwBd,SAASwB,eAAe,8BAChCpB,iBAAiB,SAAS,WACzCL,EAAKJ,UAAUwC,mBAAmBpC,EAAKH,OAAOC,cAC9CE,EAAKe,mCACN,GAEwBd,SAASwB,eAAe,8BAChCpB,iBAAiB,SAAS,WACzCL,EAAKJ,UAAUyC,eAAerC,EAAKH,OAAOC,cAC1CE,EAAKe,mCACN,GAGqBd,SAASwB,eAAe,qBAChCpB,iBAAiB,SAAS,WACtCL,EAAKJ,UAAU0C,OAAOtC,EAAKH,OAAOC,iBACnC,GAEyBG,SAASwB,eAAe,+BAChCpB,iBAAiB,SAAS,WAC1CL,EAAKJ,UAAU2C,oBAAoBvC,EAAKH,OAAOC,cAC/CE,EAAKe,mCACN,GAIyBd,SAASwB,eAAe,yBAChCpB,iBAAiB,SAAS,WAC1CL,EAAKJ,UAAU4C,qBAChB,GAEyBvC,SAASwB,eAAe,yBAChCpB,iBAAiB,SAAS,WAC1CL,EAAKJ,UAAU6C,qBAChB,GAE0BxC,SAASwB,eAAe,2BAChCpB,iBAAiB,SAAS,WAC3CL,EAAKJ,UAAU8C,wBAChB,GAEwBzC,SAASwB,eAAe,yBAChCpB,iBAAiB,SAAS,WACzCL,EAAKJ,UAAU+C,sBAChB,GAEyB1C,SAASwB,eAAe,0BAChCpB,iBAAiB,SAAS,WAC1CL,EAAKJ,UAAUgD,kBAChB,GAEmB3C,SAASwB,eAAe,mBAChCpB,iBAAiB,SAAS,WACpCL,EAAKJ,UAAUiD,eAChB,GAEmB5C,SAASwB,eAAe,mBAChCpB,iBAAiB,SAAS,WACpCL,EAAKJ,UAAUkD,eAChB,GAEqB7C,SAASwB,eAAe,qBAChCpB,iBAAiB,SAAS,WACtCL,EAAKJ,UAAUmD,iBAChB,GAEmB9C,SAASwB,eAAe,qBAChCpB,iBAAiB,SAAS,WACpCL,EAAKJ,UAAUoD,eAChB,GAE+B/C,SAASwB,eAAe,sCAChCpB,iBAAiB,SAAS,WAChDL,EAAKJ,UAAUqD,kCAChB,GAE+BhD,SAASwB,eAAe,sCAChCpB,iBAAiB,SAAS,WAChDL,EAAKJ,UAAUsD,kCAChB,GAIP,4BAA4BC,GAExB,GADAzE,KAAKmB,OAAOC,aAAeqD,EACvBA,EAAY,CACZ,MAAMC,EAAOnD,SAASwB,eAAe,QAAQ0B,KAEzCC,EAAKC,UAAUC,SAAS,kBACxBF,EAAKC,UAAUE,OAAO,kBAEtBH,EAAKC,UAAUG,IAAI,mBAM/B,gCACI,MAAML,EAAazE,KAAKmB,OAAOC,aAC/B,GAAIqD,EAAY,CACZ,MAAMC,EAAOnD,SAASwB,eAAe,QAAQ0B,KACzCC,EAAKC,UAAUC,SAAS,mBACxBF,EAAKC,UAAUE,OAAO,kBAE1B7E,KAAKmB,OAAOC,aAAe,MAInC,0BACIpB,KAAKmB,OAAOC,aAAe,KAE3BG,SAASC,iBAAiB,SAASC,SAAQsD,IACvCA,EAAWJ,UAAUE,OAAO,sBC3NxC,QAfA,SAAuBG,EAAWC,GAC9B,MAAO,GAAGD,IAAYC,KAc1B,EAXA,SAAqBzC,EAAQnC,EAAQ6E,OACjC,OAAI1C,EACO,CACHA,OAAQA,EACRnC,MAAOA,GAGJ,MC4Ef,GACI8E,sBA/CJ,SAA+BC,GAE3B,MAAMC,EAAgB,GAChBC,EAAiB,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAgC/E,OA5BoBF,EAAIG,MAHI,KAGuB,GACvBA,MAHH,KAKjB9D,SAAQ,CAAC+D,EAASC,KACtB,MAAMC,EAAc,EAAID,EACxB,IAAIE,EAAa,EACjBH,EAAQD,MAAM,IAAI9D,SAASmE,IACvB,GAAIN,EAAeO,SAASD,GAAY,CAEpC,MAAMZ,EAAYzE,EAAKoF,EAAa,GAC9BG,EAAU,EAA0Bd,EAAWU,GAC/CrF,EAASuF,GAAaA,EAAUnD,cAChCsD,EAAeH,EAAUjD,cAC/B0C,EAAcS,GAAW,EAAwBC,EAAc1F,GAC/DsF,GAAc,MAEX,CAEH,MAAMK,EAAWC,SAASL,EAAW,IACrC,IAAK,IAAIM,EAAIP,EAAYO,EAAIF,EAAWL,EAAYO,IAAK,CACrD,MAAMlB,EAAYzE,EAAK2F,EAAI,GACrBJ,EAAU,EAA0Bd,EAAWU,GACrDL,EAAcS,GAAW,KAE7BH,GAAcM,SAASL,EAAW,WAIvCP,GAaPc,yBArFJ,SAAkCC,GAC9B,MAAM9F,EAAO,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC7BC,EAAO,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAEjD,IAAI8F,EAAqB,GAErBC,EAAmB,EA4BvB,OA1BAhG,EAAKmB,SAAQ,CAAC8E,EAAKC,KACfF,EAAmB,EACnB/F,EAAKkB,SAASgF,IACV,MAAMhC,EAAa,EAA0BgC,EAAKF,GAC5CG,EAAcN,EAAWO,IAAIlC,GAEnC,GAAIiC,EAAa,CACY,IAArBJ,IACAD,GAAsBC,EAAiBM,WACvCN,EAAmB,GAEvB,MAAMO,EAAcH,EAAYrG,MAAQqG,EAAYlE,OAAOC,cAAgBiE,EAAYlE,OAAOG,cAC9F0D,GAAsBQ,OAGtBP,GAAoB,KAGH,IAArBA,IACAD,GAAsBC,EAAiBM,YAEvCJ,EAASlG,EAAKwG,OAAS,IACvBT,GAAsB,QAGlB,GAAGA,kBAqDfU,SAXJ,SAAkB3B,GACd,IAAKA,GAAe,KAARA,EACR,OAEJ,MAAM4B,EAAWhH,KAAKmF,sBAAsBC,GAC5C,OAAO,IAAI6B,IAAIC,OAAOC,QAAQH,MC/EnB,MAAMI,EAEjB,YAAYrH,EAAS,MACjBC,KAAKqH,MAAQ,GACbrH,KAAKsH,QAAU,EAEftH,KAAKuH,MAAQ,CACTC,KAAM,MAGNzH,GAAU,QAASA,GAAUA,EAAOqF,IACpCpF,KAAKyH,KAAK1H,EAAOqF,KAEjBpF,KAAK0H,iBAAiBpH,EAAMC,GAIpC,KAAK6E,EAAM3E,GACPT,KAAK2H,kBAAkBvC,GACvBpF,KAAK4H,aACL5H,KAAK6H,WAGT,QACI7H,KAAK0H,iBAAiBpH,EAAMC,GAC5BP,KAAK4H,aAMT,iBAAiBtH,EAAMC,GACnB,MAAMuH,EAAc,GACpBxH,EAAKmB,SAAS8E,IACVhG,EAAKkB,SAASgF,IACV,MAAMsB,EAAY,EAA0BtB,EAAKF,GACjDuB,EAAYE,KAAK,CAACD,EAAW,aAGrC/H,KAAKiI,YAAc,IAAIhB,IAAIa,GAG/B,oBACI,OAAO,2BAAsC9H,KAAKkI,iBAGtD,kBAAkB9C,GACd,MAAM+C,EAAY,WAAsB/C,GACxCpF,KAAKoI,cAAcD,GAGvB,gBACI,OAAOnI,KAAKiI,YAGhB,cAAcI,GACVrI,KAAKiI,YAAcI,EAMvB,aAAaC,EAAcC,GACvBvI,KAAKuH,MAAMC,KAAO,CACdgB,KAAMF,EACNG,GAAIF,GAIZ,kBAAkB9D,EAAYjC,EAAQnC,GAAQ,GAC1CL,KAAKiI,YAAYS,IAAIjE,EAAY,EAAwBjC,EAAQnC,IAGrE,WAAWiI,EAAcC,GACrB,MAAMI,EAAc3I,KAAKiI,YAAYtB,IAAI2B,GACzC,GAAIK,EAIA,OAHA3I,KAAK4I,kBAAkBL,EAAcI,EAAYnG,OAAQmG,EAAYtI,OACrEL,KAAK4I,kBAAkBN,EAAc,MACrCtI,KAAK6I,aAAaP,EAAcC,IACzB,EAMf,aACIvI,KAAKsH,QAAU,EACftH,KAAKqH,MAAMP,OAAS9G,KAAKsH,QACzBtH,KAAKuH,MAAQ,CACTC,KAAM,MAId,WACI,MAGMsB,EAAY,CACdN,KAJexI,KAAKuH,MAAMC,KAAOxH,KAAKuH,MAAMC,KAAKgB,KAAO,KAKxDC,GAJazI,KAAKuH,MAAMC,KAAOxH,KAAKuH,MAAMC,KAAKiB,GAAK,KAKpDrD,IAAKpF,KAAK+I,qBAGRC,EAAgBhJ,KAAKsH,QACD,IAAtBtH,KAAKqH,MAAMP,SAEX9G,KAAKqH,MAAMP,OAASkC,EAAgB,GAExChJ,KAAKqH,MAAMW,KAAKc,GAChB9I,KAAKsH,QAAUtH,KAAKqH,MAAMP,OAAS,EAGvC,qBACI,OAAO9G,KAAKsH,QAGhB,kBACI,OAAOtH,KAAKqH,MAAMrH,KAAKsH,SAG3B,WACI,IAAI2B,EAASjJ,KAAKsH,QAAU,EACxB2B,GAAUjJ,KAAKqH,MAAMP,SACrBmC,EAASjJ,KAAKqH,MAAMP,OAAS,GAEjC9G,KAAKsH,QAAU2B,EACf,MAAMzB,EAAOxH,KAAKqH,MAAM4B,GACnBzB,GAILxH,KAAK2H,kBAAkBH,EAAKpC,KAGhC,WACI,IAAI6D,EAASjJ,KAAKsH,QAAU,EACxB2B,GAAU,IACVA,EAAS,GAEbjJ,KAAKsH,QAAU2B,EACf,MAAMzB,EAAOxH,KAAKqH,MAAM4B,GACnBzB,GAILxH,KAAK2H,kBAAkBH,EAAKpC,KAGhC,aAAakC,GACT,OAAIA,EAAUtH,KAAKqH,MAAMP,OACd9G,KAAKqH,MAAMrH,KAAKsH,SAEpB,MCnFf,QAvEA,SAAsB4B,EAAcC,EAAQC,EAAQ5C,EAAQzG,GAExD,MAAM0E,EAAa,EAA0ByE,EAAcE,GAErDC,EAAStJ,EAAOsJ,OAChBC,EAAMvJ,EAAOwJ,IAAID,IAEjBE,EAAIF,EAAMH,EACVM,EAAIH,EAAM9C,EAKhB,IAAIkD,EAAW,KACXL,IACAK,EAAW,GAGf,MAGMC,EAAU,kBACLlF,mCACQA,+BACEA,iDAEN6E,2BACCA,iCACG7E,+BACEA,oDAEN6E,2BACCA,4EAGI7E,+BACCA,8BACC4E,EAAS,SAAW,4FAnB9BA,EAASC,EAAM,IAAMA,EAAM,uBAC3BA,EAAM,4BAwBCI,0BAIbE,EAAWrI,SAASsI,gBAAgB,6BAA8B,KASxE,OARAD,EAASE,aAAa,QAAS,UAC/BF,EAASE,aAAa,KAAM,GAAGrF,KAC/BmF,EAASE,aAAa,cAAe,GAAGrF,KACxCmF,EAASE,aAAa,kBAAmB,GAAGZ,KAC5CU,EAASE,aAAa,kBAAmB,GAAGV,KAC5CQ,EAASE,aAAa,YAAa,aAAaN,KAAKC,MAErDG,EAASG,UAAYJ,EACdC,GAeX,EAXA,SAA0BnF,EAAYoC,EAAc,GAAIxG,GAAQ,GAC5D,MAAM2J,EAAazI,SAASwB,eAAe,SAAS0B,KAC9CwF,EAAY5J,EAAQ,QAAU,QACpC2J,EAAWrF,UAAUG,IAAImF,GACzB,MAAMC,EAAe7J,EAAQ,QAAU,QACnCA,GAAS2J,EAAWrF,UAAUC,SAASsF,IACvCF,EAAWrF,UAAUE,OAAOqF,GAEhCF,EAAWG,YAActD,GCjD7B,EAtBA,SAA0BuD,GACtB,MAAMC,EAAS,GACf,IAAIC,EAAS/I,SAASgJ,cAAc,KACpCD,EAAOE,KAAOJ,EACd,MAAMK,EAAQH,EAAOI,OAAOC,UAAU,GACtC,IAAKF,EACD,OAAOJ,EAEX,MAAMO,EAAOH,EAAMlF,MAAM,KACzB,IAAK,IAAIsF,EAAI,EAAGA,EAAID,EAAK9D,OAAQ+D,IAAK,CAClC,MAAMC,EAAOF,EAAKC,GAAGtF,MAAM,KAC3B8E,EAAOS,EAAK,IAAMC,mBAAmBD,EAAK,IAE9C,OAAOT,GASX,EALA,SAAiCjF,GAC7B,MAAM4F,EAAW5F,EAAM,QAAQA,IAAQ,GACvC,MAAO,GAAG6F,OAAOC,SAASC,SAASF,OAAOC,SAASE,WAAWJ,KCfnD,MAAMK,EAEjB,YAAYtL,EAAQuL,GAEhBtL,KAAKD,OAAS,CACVwL,KAAMxL,EAAOwL,KACblC,OAAQtJ,EAAOsJ,OACfE,IAAK,CACDD,IPVS,GOUQ,IAIzBtJ,KAAKwL,aAAeF,EAASE,aAGjC,qBAAqBpG,GACjB,MAAMgF,EAAM,EAAiChF,GAC7CqG,QAAQC,UAAU,CACdC,GAAI,eACL,GAAIvB,GAGX,UACI,OAAOpK,KAAKD,OAAOwL,KAAO,IAAIjL,GAAMsL,UAAYtL,EAGpD,UACI,OAAON,KAAKD,OAAOwL,KAAO,IAAIhL,GAAMqL,UAAYrL,EAIpD,+BACIP,KAAK6L,kBACL7L,KAAK8L,cACL9L,KAAK+L,oBAGT,yBACI,MAAMC,EAAUzK,SAASC,iBAAiB,WACpCyK,EAAkB1K,SAASC,iBAAiB,qBAClDwK,EAAQvK,SAAQuI,IACZA,EAAWnF,YAEfoH,EAAgBxK,SAAQuI,IACpBA,EAAWnF,YAGf7E,KAAKD,OAAOwL,MAAQvL,KAAKD,OAAOwL,KAEhCvL,KAAKkM,yBAGT,cACI,MAAMC,EAAanM,KAAKoM,UAClBC,EAAarM,KAAKsM,UAElB/C,EAAMhI,SAASwB,eAAe,eAEpCoJ,EAAW1K,SAAQ,CAAC8E,EAAKC,KACrB6F,EAAW5K,SAAQ,CAACuD,EAAWmE,KAC3B,MAAMS,EAAW,EAA2B5E,EAAWmE,EAAQ5C,EAAKC,EAAQxG,KAAKD,QACjFwJ,EAAIgD,YAAY3C,SAK5B,kBAEI,MAAMuC,EAAanM,KAAKoM,UAClBC,EAAarM,KAAKsM,UAElBE,EAAiBjL,SAASwB,eAAe,mBAE/CsJ,EAAW5K,SAAQ,CAACgF,EAAKgG,KACrB,MAAMC,EAASnL,SAASsI,gBAAgB,6BAA8B,QAChE8C,EAAWpL,SAASqL,eAAenG,GACzCiG,EAAO5C,aAAa,IAAQ9J,KAAKD,OAAOwJ,IAAID,IAAMmD,EAAzB,KACzBC,EAAO5C,aAAa,IAAK,KACzB4C,EAAO5C,aAAa,KAAM,KAC1B4C,EAAO5C,aAAa,KAAM,KAC1B4C,EAAO5C,aAAa,iBAAkB,GAAGrD,KACzCiG,EAAO5C,aAAa,QAAS,yCAC7B4C,EAAO5C,aAAa,cAAe,SACnC4C,EAAOH,YAAYI,GAEnBH,EAAeD,YAAYG,MAG/BP,EAAW1K,SAAQ,CAAC8E,EAAKkG,KACrB,MAAMC,EAASnL,SAASsI,gBAAgB,6BAA8B,QAChE8C,EAAWpL,SAASqL,eAAerG,GACzCmG,EAAO5C,aAAa,IAAK,KACzB4C,EAAO5C,aAAa,IAAQ9J,KAAKD,OAAOwJ,IAAID,IAAMmD,EAAzB,KACzBC,EAAO5C,aAAa,KAAM,KAC1B4C,EAAO5C,aAAa,KAAM,MAC1B4C,EAAO5C,aAAa,iBAAkB,GAAGvD,KACzCmG,EAAO5C,aAAa,QAAS,yCAC7B4C,EAAO5C,aAAa,cAAe,SACnC4C,EAAOH,YAAYI,GAEnBH,EAAeD,YAAYG,MAInC,oBACuB1M,KAAKwL,aAAatD,gBAC1BzG,SAAQ,CAACoL,EAAa9E,KAC7B,GAAI8E,EAAa,CACb,IAAIC,EAAa,GACjB,MAAMC,EAAcrM,EAAQmM,EAAYrK,QAEpCsK,GADuB,IAAvB9M,KAAKD,OAAOsJ,OACC0D,EAAY1D,OAAOwD,EAAYxM,OAE/B0M,EAAYC,SAASH,EAAYxM,OAElD,EAA+B0H,EAAW+E,EAAYD,EAAYxM,YAElE,EAA+B0H,MAIvC,MAAMkF,EAAajN,KAAKwL,aAAazC,oBACrC/I,KAAKkN,qBAAqBD,IC8ClC,QA1JA,SAAkBE,GACd,IAAIC,EACJ,MAAMC,EAAQ,qCACRC,EAAW,GAGXC,EADkBJ,EAAOK,QAAQ,YAAa,IACjBA,QAAQ,kBAAmB,KAE9D,KAAwC,QAAhCJ,EAAIC,EAAMI,KAAKF,KAEfH,EAAEM,QAAUL,EAAMM,WAClBN,EAAMM,YAQVP,EAAE3L,SAAQ,CAACmM,EAAOC,KAKK,IAAfA,GAGAP,EAAStF,KAAK4F,GAEC,IAAfC,GAEAP,EAAStF,KAAK4F,MAK1B,OAAON,GAsHX,EAlHA,SAA0BQ,EAASzN,GAAQ,GAoBvC,MAAM0N,EAAgBD,EAAQN,QAAQ,IAAK,IACtCA,QAAQ,IAAK,IACbA,QAAQ,IAAK,IACbA,QAAQ,IAAK,IAGlB,GAAI,CAAC,MAAO,MAAO,MAAO,MAAO,UAAW,KAAK3H,SAASkI,GACtD,MAAO,GAIX,GAAsB,QAAlBA,EACA,OAAI1N,IAAU,EAEH,CACH,CAAE2N,OAAQ,IAAKC,WAAY,KAAMC,SAAU,KAAM7N,SACjD,CAAE2N,OAAQ,IAAKC,WAAY,KAAMC,SAAU,KAAM7N,UAGlD,CACH,CAAE2N,OAAQ,IAAKC,WAAY,KAAMC,SAAU,KAAM7N,SACjD,CAAE2N,OAAQ,IAAKC,WAAY,KAAMC,SAAU,KAAM7N,UAKzD,GAAsB,UAAlB0N,EACA,OAAI1N,IAAU,EACH,CACH,CAAE2N,OAAQ,IAAKC,WAAY,KAAMC,SAAU,KAAM7N,SACjD,CAAE2N,OAAQ,IAAKC,WAAY,KAAMC,SAAU,KAAM7N,UAGlD,CACH,CAAE2N,OAAQ,IAAKC,WAAY,KAAMC,SAAU,KAAM7N,SACjD,CAAE2N,OAAQ,IAAKC,WAAY,KAAMC,SAAU,KAAM7N,UAKzD,GAAI0N,EAAcI,QAAQ,MAAQ,EAAG,CACjC,MAAMC,EAAcL,EAAcxI,MAAM,KACxC,MAAO,CAAC,CACJyI,OAAQ,IACRK,eAAgBD,EAAY,GAAGzL,cAC/BuL,SAAUE,EAAY,GACtB/N,UAIR,IACI,MAGMiO,EAHe,sBACYb,KAAKM,GAEJ,GAC5BQ,EAAgBR,EAAcP,QAAQc,EAAe,IAE3D,IAAIE,GAAU,EAMd,GAJID,EAAc1I,SAAS,OACvB2I,GAAU,GAGVD,IAAkBA,EAAc5L,cAChC,MAAO,CAAC,CACJqL,OAAQ,IACRC,WAAYM,EAAcf,QAAQ,IAAK,IACvCU,SAAUI,EACVjO,QACAmO,YAIR,IAAIP,EAAa,GACbD,EAAS,GAOb,OANIO,EAAczH,QAAU,GACxBmH,EAAaM,EAAc,GAAGf,QAAQ,IAAK,IAC3CQ,EAASO,EAAc,GAAG5L,eAE1BqL,EAASO,EAAc5L,cAEpB,CAAC,CACJqL,OAAQA,EACRC,WAAYA,EACZC,SAAUI,EACVjO,QACAmO,YAEN,MAAOC,GACL,MAAM,IAAIC,MAAM,GAAGD,QAAYX,KAAWC,OAKlD,EA1KA,SAA4BY,GACxB,IACI,IAAIC,EAA0BrN,SAASgJ,cAAc,SACrDqE,EAAwBC,KAAO,OAC/BD,EAAwBE,MAAQH,EAChCpN,SAASwN,KAAKxC,YAAYqC,GAC1BA,EAAwBI,SACxBzN,SAAS0N,YAAY,QACrB1N,SAASwN,KAAKG,YAAYN,GAE5B,MAAOO,GACLC,QAAQX,MAAM,kCAAmCU,KCR1C,MAAME,EAEjB,YAAYtP,EAAQuL,GAChBtL,KAAKD,OAASA,EACdC,KAAKwL,aAAeF,EAASE,aAC7BxL,KAAKsP,gBAAkBhE,EAASgE,gBAIpC,kBACI,MAAMrC,EAAajN,KAAKwL,aAAazC,oBAC/BwG,EAAW,EAAiCtC,GAClD,EAAmCsC,GAGvC,mBACI,MAAMC,EAAcjO,SAASwB,eAAe,aAAa+L,MACrDU,GACAxP,KAAKwL,aAAa7D,kBAAkB6H,GAI5C,iBACI,MAAMvC,EAAajN,KAAKwL,aAAazC,oBACrCxH,SAASwB,eAAe,aAAa+L,MAAQ7B,EAGjD,mBAEI,MAAMwC,EAAclO,SAASwB,eAAe,aAAa+L,MACzD9O,KAAK0P,iBAAiBD,GAG1B,iBAAiBA,GACb,MAAME,EAAY,EAAyBF,GACrCrJ,EAAapG,KAAKwL,aAAatD,gBACrC,IAAI0H,EAAc,EAClB,MAAMhP,EAAI,GACV,IACI+O,EAAUlO,SAAQoO,IACd,MAAMC,EAAgB,EAAiCD,EAAUD,GACjEA,GAAeA,EACfhP,EAAEoH,KAAK8H,MAEXlP,EAAEa,SAAQsO,IACNA,EAAOtO,SAAQuO,IACX,MAAM,OAAEhC,EAAM,eAAEK,EAAc,WAAEJ,EAAU,SAAEC,EAAQ,MAAE7N,EAAK,QAAEmO,GAAYwB,EACzE,IAAIC,GAAO,EACX7J,EAAW3E,SAAQ,CAACyO,EAAanI,KAC7B,GAAKkI,GAAQhC,IAAelG,GAOrB,IAAKkI,GAAQC,GAAeA,EAAY7P,QAAUA,GAAS6P,EAAY1N,SAAWwL,GACrEhO,KAAKsP,gBAAgBa,6BAA6BpI,EAAW,MAAM,GACvElC,SAASqI,GAAW,CAE5B,GAAID,IAAelG,EAAUlC,SAASoI,GAClC,OAIJ,GAAe,MAAXD,EAAgB,CAChB,MAAMoC,EAASrI,EAAUxC,MAAM,IAAI,GAC7B8K,EAAcnC,EAAS3I,MAAM,IAAI,GACvC,IAAKiJ,GAAW4B,IAAWC,EACvB,OAIR,MAAMC,EAAcjC,GAAkBL,EAEtChO,KAAKwL,aAAa5C,kBAAkBsF,EAAUoC,EAAajQ,GAC3DL,KAAKwL,aAAa5C,kBAAkBb,EAAW,MAC/C/H,KAAKwL,aAAa3C,aAAad,EAAWmG,GAC1ClO,KAAKwL,aAAa3D,WAClBoI,GAAO,QA5BXjQ,KAAKwL,aAAa5C,kBAAkBsF,EAAUF,EAAQ3N,GACtDL,KAAKwL,aAAa5C,kBAAkBqF,EAAY,MAChDjO,KAAKwL,aAAa3C,aAAaoF,EAAYC,GAC3ClO,KAAKwL,aAAa3D,WAClBoI,GAAO,WAgCzB,MAAOxB,GACLW,QAAQX,MAAM,qBAAsBA,KCJhD,SAAS8B,EAAc9L,EAAYoK,GAAO,GACtC,IAAI2B,EAAa3B,EAAO,KAAO,QAC/B,MAAM7E,EAAazI,SAASwB,eAAe,WAAW0B,KAChDgM,EAAMlP,SAASsI,gBAAgB,6BAA8B,OACnE4G,EAAI3G,aAAa,OAAQ,gBAAgB0G,KACzCC,EAAI3G,aAAa,cAAe,GAAGrF,KACnCuF,EAAWuC,YAAYkE,GAG3B,SAASC,EAAgBjM,EAAYoK,EAAO,MACxC,IAAI2B,EAAa,UACb3B,IAAS,EACT2B,EAAa,SACG,IAAT3B,IACP2B,EAAa,SAEjB,MAAMxG,EAAazI,SAASwB,eAAe,WAAW0B,KAChDgM,EAAMlP,SAASsI,gBAAgB,6BAA8B,OACnE4G,EAAI3G,aAAa,OAAQ,kBAAkB0G,KAC3CC,EAAI3G,aAAa,cAAe,GAAGrF,KACnCuF,EAAWuC,YAAYkE,GA+C3B,SAASE,EAAkBlM,GACvB,MAAMuF,EAAazI,SAASwB,eAAe,WAAW0B,KAChDgM,EAAMlP,SAASsI,gBAAgB,6BAA8B,OACnE4G,EAAI3G,aAAa,OAAQ,qBACzB2G,EAAI3G,aAAa,cAAe,GAAGrF,KACnCuF,EAAWuC,YAAYkE,GAI3B,QAlKA,SACIG,EACAC,EACAnK,EACAoK,GAAc,GAEd,IAAIC,EAAY,UA2BhB,OAzBoB,IAAhBF,GAAqBD,EAAe,GAClClK,GAAeA,EAAYrG,QAAUyQ,IAEvCC,EAAY,UAEZH,EAAeC,GACbnK,GAAeA,EAAYrG,QAAUyQ,IAEvCC,EAAY,WAEXF,EAAc,GAAsB,IAAjBD,GAAwBC,EAAcD,KAC1DG,EAAY,SAEI,IAAhBF,GAAsC,IAAjBD,GAAuBlK,IAC5CqK,EAAY,WAEZF,IAAgBD,GAAgBlK,GAAeA,EAAYrG,QAAUyQ,IACrEC,EAAY,SAEZH,EAAeC,IACbnK,GAAeA,EAAYrG,QAAUyQ,IAAiBpK,KAExDqK,EAAY,MAGTA,GAiIX,EA9HA,WAEI,MAAMC,EAAezP,SAASC,iBAAiB,YACzCyP,EAAqB,mBAC3BD,EAAavP,SAAQyP,IACbA,EAAWvM,UAAUC,SAASqM,GAC9BC,EAAWvM,UAAUE,OAAOoM,GAE5BC,EAAWvM,UAAUG,IAAImM,OAsHrC,EAvGA,SAAkC5Q,GAC9B,OAAOA,EAAQ,sBAAwB,uBAsG3C,EAnGA,SAAmCA,GAC/B,OAAOA,EAAQ,oBAAsB,qBAkGzC,EA/FA,SAA2BoE,EAAYkK,EAAME,EAAO,WAEhD,MAEMnC,EAASnL,SAASsI,gBAAgB,6BAA8B,QAChE8C,EAAWpL,SAASqL,eAAe+B,GACzCjC,EAAO5C,aAAa,IAAK,UACzB4C,EAAO5C,aAAa,IAAK,KACzB4C,EAAO5C,aAAa,KAAM,QAC1B4C,EAAO5C,aAAa,KAAM,KAC1B4C,EAAO5C,aAAa,cAAe,GAAGrF,KACtCiI,EAAO5C,aAAa,QAAS,0BAA0B+E,KACvDnC,EAAO5C,aAAa,cAAe,OACnC4C,EAAOH,YAAYI,GAEApL,SAASwB,eAAe,WAAW0B,KAC3C8H,YAAYG,IA+E3B,EArDA,SAA4BjI,EAAY7B,GACpC,OAAQA,GACJ,IAAK,sBACD8N,EAAgBjM,GAAY,GAC5B,MACJ,IAAK,wBACDiM,EAAgBjM,GAChB,MACJ,IAAK,sBACDiM,EAAgBjM,GAAY,GAC5B,MACJ,IAAK,mBACDkM,EAAkBlM,GAClB,MACJ,IAAK,iBACD8L,EAAc9L,GAAY,GAC1B,MACJ,IAAK,oBACD8L,EAAc9L,GAAY,KAmCtC,EA5BA,SAA6BA,GACzB,MAAM0M,EAAW5P,SAASwB,eAAe,WAAW0B,KAAc0M,SAElE,IAAK,IAAItG,EAAIsG,EAASrK,OAAS,EAAG+D,GAAK,IAAKA,EACxCsG,EAAStG,GAAGhG,UAwBpB,EApBA,WACI,MAAMuM,EAAY,GAOlB,OANA9Q,EAAKmB,SAAS8E,IACVhG,EAAKkB,SAASgF,IACV,MAAMX,EAAU,EAA0BW,EAAKF,GAC/C6K,EAAUpJ,KAAK,CAAClC,EAAS,WAG1B,IAAImB,IAAImK,IAYnB,EAjHA,WACI,MAAMJ,EAAezP,SAASC,iBAAiB,YACzCyP,EAAqB,mBAC3BD,EAAavP,SAAQyP,IACbA,EAAWvM,UAAUC,SAASqM,IAC9BC,EAAWvM,UAAUE,OAAOoM,OCuIxC,EA5LA,SACI7K,EACAiL,EACAC,EACAC,GAAa,GAEb,MAAMC,EAAmBjR,EAAK4N,QAAQkD,GAChCrF,EAAU,GAChB,IAAK,IAAIvC,EAAI6H,EAAkB,EAAG7H,GAAK,EAAGA,IAAK,CAC3CuC,EAAQhE,KAAK,EAA0BqJ,EAAmB5H,IAC1D,MAAMgI,EAAazF,EAAQA,EAAQlF,OAAS,GAC5C,GAAIV,EAAWO,IAAI8K,IAAeF,EAC9B,MAGR,IAAK,IAAI9H,EAAI6H,EAAkB,EAAG7H,GAAK,EAAGA,IAAK,CAC3CuC,EAAQhE,KAAK,EAA0BqJ,EAAmB5H,IAC1D,MAAMgI,EAAazF,EAAQA,EAAQlF,OAAS,GAC5C,GAAIV,EAAWO,IAAI8K,IAAeF,EAC9B,MAGR,IAAK,IAAI/H,EAAIgI,EAAmB,EAAGhI,EAAIjJ,EAAKuG,OAAQ0C,IAAK,CACrDwC,EAAQhE,KAAK,EAA0BzH,EAAKiJ,GAAI8H,IAChD,MAAMG,EAAazF,EAAQA,EAAQlF,OAAS,GAC5C,GAAIV,EAAWO,IAAI8K,IAAeF,EAC9B,MAGR,IAAK,IAAI/H,EAAIgI,EAAmB,EAAGhI,GAAK,EAAGA,IAAK,CAC5CwC,EAAQhE,KAAK,EAA0BzH,EAAKiJ,GAAI8H,IAChD,MAAMG,EAAazF,EAAQA,EAAQlF,OAAS,GAC5C,GAAIV,EAAWO,IAAI8K,IAAeF,EAC9B,MAGR,OAAOvF,GAwJX,EApJA,SACIqF,EACAC,GAEA,MAAME,EAAmBjR,EAAK4N,QAAQkD,GAChCrF,EAAU,GAkBhB,MAjBkB,CACd,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,EAAE,EAAG,GACL,EAAE,EAAG,GACL,EAAE,GAAI,GACN,EAAE,GAAI,GACN,CAAC,GAAI,GACL,CAAC,GAAI,IAECvK,SAASiQ,IACf,MAAMjI,EAAI6H,EAAkBI,EAAG,GACzBlI,EAAIgI,EAAmBE,EAAG,GAC5BlI,GAAK,GAAKA,EAAIjJ,EAAKuG,QAAU2C,EAAI,GAAKA,GAAK,GAC3CuC,EAAQhE,KAAK,EAA0BzH,EAAKiJ,GAAIC,OAGjDuC,GA6HX,EAzHA,SACIqF,EACAC,EACAjR,EACAsR,GAEA,MAAMH,EAAmBjR,EAAK4N,QAAQkD,GAChCrF,EAAU,GACV4F,EAAQvR,EAAQiR,EAAkB,EAAIA,EAAkB,EACxDO,EAAU,CACZ,CAAC,EAAGD,GACJ,EAAE,EAAGA,IAET,GAAID,EAAe,CACfE,EAAQ7J,KAAK,CAAC,EAAG4J,IACjB,MAAME,EAAazR,EAAQiR,EAAkB,EAAIA,EAAkB,EACnEO,EAAQ7J,KAAK,CAAC,EAAG8J,IASrB,OAPAD,EAAQpQ,SAASsQ,IACb,MAAMvI,EAAIgI,EAAmBO,EAAG,GAC1BtI,EAAIsI,EAAG,GACTvI,GAAK,GAAKA,EAAIjJ,EAAKuG,QAAU2C,EAAI,GAAKA,GAAK,GAC3CuC,EAAQhE,KAAK,EAA0BzH,EAAKiJ,GAAIC,OAGjDuC,GAgGX,EA5FA,SACI5F,EACAiL,EACAC,EACAC,GAAa,GAEb,MAAMC,EAAmBjR,EAAK4N,QAAQkD,GAChCrF,EAAU,GAEhB,IAAIgG,EAAO,EACX,IAAK,IAAIvI,EAAI6H,EAAkB,EAAG7H,GAAK,EAAGA,IAAK,CAC3C,MAAMD,EAAIgI,EAAmBQ,EAC7B,GAAIxI,GAAK,GAAKA,EAAIjJ,EAAKuG,QAAU2C,EAAI,GAAKA,GAAK,EAAG,CAE9CuC,EAAQhE,KAAK,EAA0BzH,EAAKiJ,GAAIC,IAChDuI,IACA,MAAMP,EAAazF,EAAQA,EAAQlF,OAAS,GAC5C,GAAIV,EAAWO,IAAI8K,IAAeF,EAC9B,OAKZS,EAAO,EACP,IAAK,IAAIvI,EAAI6H,EAAkB,EAAG7H,GAAK,EAAGA,IAAK,CAC3C,MAAMD,EAAIgI,EAAmBQ,EAC7B,GAAIxI,GAAK,GAAKA,EAAIjJ,EAAKuG,QAAU2C,EAAI,GAAKA,GAAK,EAAG,CAC9CuC,EAAQhE,KAAK,EAA0BzH,EAAKiJ,GAAIC,IAChDuI,IACA,MAAMP,EAAazF,EAAQA,EAAQlF,OAAS,GAC5C,GAAIV,EAAWO,IAAI8K,IAAeF,EAC9B,OAKZS,EAAO,EACP,IAAK,IAAIvI,EAAI6H,EAAkB,EAAG7H,GAAK,EAAGA,IAAK,CAC3C,MAAMD,EAAIgI,EAAmBQ,EAC7B,GAAIxI,GAAK,GAAKA,EAAIjJ,EAAKuG,QAAU2C,EAAI,GAAKA,GAAK,EAAG,CAE9CuC,EAAQhE,KAAK,EAA0BzH,EAAKiJ,GAAIC,IAChDuI,IACA,MAAMP,EAAazF,EAAQA,EAAQlF,OAAS,GAC5C,GAAIV,EAAWO,IAAI8K,IAAeF,EAC9B,OAKZS,EAAO,EACP,IAAK,IAAIvI,EAAI6H,EAAkB,EAAG7H,GAAK,EAAGA,IAAK,CAC3C,MAAMD,EAAIgI,EAAmBQ,EAC7B,GAAIxI,GAAK,GAAKA,EAAIjJ,EAAKuG,QAAU2C,EAAI,GAAKA,GAAK,EAAG,CAC9CuC,EAAQhE,KAAK,EAA0BzH,EAAKiJ,GAAIC,IAChDuI,IACA,MAAMP,EAAazF,EAAQA,EAAQlF,OAAS,GAC5C,GAAIV,EAAWO,IAAI8K,IAAeF,EAC9B,OAIZ,OAAOvF,GA8BX,EA1BA,SACIqF,EACAC,GAEA,MAAME,EAAmBjR,EAAK4N,QAAQkD,GAChCrF,EAAU,GAkBhB,MAjBkB,CACd,EAAE,EAAG,GACL,EAAE,EAAG,GACL,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,GAAI,GACL,CAAC,GAAI,GACL,EAAE,GAAI,IAEAvK,SAASsQ,IACf,MAAMvI,EAAIgI,EAAmBO,EAAG,GAC1BtI,EAAI6H,EAAkBS,EAAG,GAC3BvI,GAAK,GAAKA,EAAIjJ,EAAKuG,QAAU2C,EAAI,GAAKA,GAAK,GAC3CuC,EAAQhE,KAAK,EAA0BzH,EAAKiJ,GAAIC,OAGjDuC,GCpLI,MAAMiG,EAEjB,YAAYlS,EAAQuL,GAChBtL,KAAKkS,WAAa,IAClBlS,KAAKwL,aAAeF,EAASE,aAE7BxL,KAAKD,OAASA,EAEdC,KAAKuH,MAAQ,CACT4K,iBAAiB,EACjBC,iBAAiB,GAIzB,gBACI,IAGJ,kBAAkB/R,GAAQ,IACCA,EAAQL,KAAKuH,MAAM4K,gBAAkBnS,KAAKuH,MAAM6K,iBAInEpS,KAAKqS,iBAAiBhS,GAFtBL,KAAKsS,kBAAkBjS,GAM/B,gBACQL,KAAKuH,MAAM4K,iBAAmBnS,KAAKuH,MAAM6K,iBACzCpS,KAAKqS,iBAAiB,GACtBrS,KAAKqS,iBAAiB7R,KAEtBR,KAAKsS,kBAAkB,GACvBtS,KAAKsS,kBAAkB9R,IAK/B,qBACQR,KAAKuH,MAAM4K,iBACXnS,KAAKsS,kBAAkB,GAEvBtS,KAAKuH,MAAM6K,iBACXpS,KAAKsS,kBAAkB9R,GAI/B,kBAAkBiE,EAAY7B,EAAU2P,GAAc,GAClD,IAAK9N,EACD,OAEJ,IACA,MAAM+N,EAAgBxS,KAAKkS,WAAWvL,IAAIlC,GAEpCgO,EAA2BD,EAAcrE,QAAQvL,IACrB,IAA9B6P,IACAD,EAAcxK,KAAKpF,GACnB5C,KAAKkS,WAAWxJ,IAAIjE,EAAY+N,GAChC,EAAoC/N,EAAY7B,IAEhD2P,GAAeE,GAA4B,IAC3CD,EAAcE,OAAOD,EAA0B,GAC/CzS,KAAKkS,WAAWxJ,IAAIjE,EAAY+N,GAChCxS,KAAK2S,+BAA+BlO,IAI5C,qBACI,IAEAzE,KAAKkS,WAAWzQ,SAAQ,CAACmR,EAAa7K,KAClC,EAAqCA,GACrC6K,EAAYnR,SAAQoR,IAChBC,qBAAqBC,mBAAmBhL,EAAW8K,SAK/D,+BAA+BpO,GAC3B,IAGA,EAAqCA,GAEfzE,KAAKkS,WAAWvL,IAAIlC,GAC5BhD,SAAQoR,IAClB,EAAoCpO,EAAYoO,MAIxD,uBACI7S,KAAKkS,WAAa,IAClBlS,KAAKgT,qBAGT,6BAA6BvO,EAAYwO,EAAsB,KAAMtB,GAAgB,GAEjF,MAAMvL,EAAapG,KAAKwL,aAAatD,gBAE/BqJ,EAAavR,KAAKD,OAAOmT,eACzBC,EAAU,GAChB,IAAK1O,EACD,OAEJ,MAAM2O,EAAkB3O,EAAWc,MAAM,IACnC8N,EAAqBD,EAAgB,GACrC9B,EAAkBrL,SAASmN,EAAgB,GAAI,KAC/C,OAAE5Q,EAAM,MAAEnC,GAAU4S,GAA4C7M,EAAWO,IAAIlC,GACrF,GAAe,MAAXjC,EAAgB,CAChB,MAAM8Q,EAAgB,EAAsDlN,EAAYiN,EAAoB/B,EAAiBC,GAC7H4B,EAAQnL,QAAQsL,GAEpB,GAAe,MAAX9Q,EAAgB,CAChB,MAAM8Q,EAAgB,EAAsDD,EAAoB/B,GAChG6B,EAAQnL,QAAQsL,GAEpB,GAAe,MAAX9Q,EAAgB,CAChB,MAAM8Q,EAAgB,EAAsDD,EAAoB/B,EAAiBjR,EAAOsR,GACxHwB,EAAQnL,QAAQsL,GAEpB,GAAe,MAAX9Q,EAAgB,CAChB,MAAM8Q,EAAgB,EAAsDlN,EAAYiN,EAAoB/B,EAAiBC,GAC7H4B,EAAQnL,QAAQsL,GAEpB,GAAe,MAAX9Q,EAAgB,CAChB,MAAM+Q,EAAwB,EAAsDnN,EAAYiN,EAAoB/B,EAAiBC,GAC/HiC,EAAwB,EAAsDpN,EAAYiN,EAAoB/B,EAAiBC,GACrI4B,EAAQnL,QAAQuL,KAA0BC,GAE9C,GAAe,MAAXhR,EAAgB,CAChB,MAAM8Q,EAAgB,EAAsDD,EAAoB/B,GAChG6B,EAAQnL,QAAQsL,GAEpB,OAAOH,EAGX,8BAA8BM,GAAY,GACtC,IAEAzT,KAAK0T,uBAEL,MAAMtN,EAAapG,KAAKwL,aAAatD,gBACrC9B,EAAW3E,SAAQ,CAACkS,EAAiBC,KACjC,IAAIhD,EAAe,EACfC,EAAc,EACdgD,EAAO,GACXzN,EAAW3E,SAAQ,CAACqS,EAAiBC,KACjC,MAAMC,EAAQF,EACTE,GAG0BhU,KAAKmQ,6BAA6B4D,GACtClO,SAAS+N,KAC5BD,GAAmBG,GAAmBH,EAAgBtT,QAAUyT,EAAgBzT,OAChFuQ,GAAgB,EAEe,MAA3BkD,EAAgBtR,SAChBqR,EAAO,MAGJF,GAAmBG,GAAmBH,EAAgBtT,QAAUyT,EAAgBzT,MACvFwQ,GAAe,EACP8C,IACJK,EAAM3T,QAAUoT,EAChB7C,GAAgB,EAEhBC,GAAe,OAK/B,MAAME,EAAY,EAAsCH,EAAcC,EAAa8C,EAAiBF,GACpG,EAAmCG,EAAe,GAAGC,IAAOjD,KAAgBC,IAAeE,MAInG,oBAAoBtM,GAChB,IAAKA,EACD,OAEJ,IAEA,MAAM2B,EAAapG,KAAKwL,aAAatD,gBACrC,IAAI+L,GAAoB,EACxB,MAAMvN,EAAcN,EAAWO,IAAIlC,GAC/BiC,IACAN,EAAW3E,SAAQ,CAACyS,EAAgBC,KAChC,GAAIA,IAAiB1P,GAAcyP,GAAkBA,EAAe7T,QAAUqG,EAAYrG,OACvDL,KAAKmQ,6BAA6BgE,GAEtCtO,SAASpB,GAAa,CAC7CwP,GAAoB,EACpB,MAAMG,EAAkB,EAA0CF,EAAe7T,OACjFL,KAAKqU,kBAAkBF,EAAcC,GACrCpU,KAAKsU,mBAAmBH,OAIhCF,EACAjU,KAAKqU,kBAAkB5P,EAAY,kBAEnCzE,KAAKqU,kBAAkB5P,EAAY,sBAK/C,yBAAyBA,GACrB,IAAKA,EACD,OAEJ,IAEA,MAAM2B,EAAapG,KAAKwL,aAAatD,gBACrC,IAAIqM,GAAe,EACnB,MAAM7N,EAAcN,EAAWO,IAAIlC,GACnC,GAAIiC,EAAa,CACb,MAAM8N,EAA2BxU,KAAKmQ,6BAA6B1L,GACnE+P,EAAyB/S,SAAQ,KAC7BzB,KAAKsU,mBAAmB7P,GACxB2B,EAAW3E,SAAQ,CAACyS,EAAgBC,KAChC,GAAIA,IAAiB1P,GAAcyP,GAAkBA,EAAe7T,QAAUqG,EAAYrG,MAAO,CAC7F,MAAMoU,EAAyBzU,KAAKmQ,6BAA6BgE,GAI3DO,EAAUF,EAAyBG,QAAO7F,GAAS2F,EAAuB5O,SAASiJ,KACzF4F,EAAQjT,SAASmT,IACb,MAAMR,EAAkB,EAA0CF,EAAe7T,OACjFL,KAAKqU,kBAAkBF,EAAcC,GACrCpU,KAAKqU,kBAAkBO,EAAcR,MAGrCM,EAAQ5N,OAAS,IACjByN,GAAe,UAK3BA,EACAvU,KAAKqU,kBAAkB5P,EAAY,kBAGnCzE,KAAKqU,kBAAkB5P,EAAY,0BAK/C,mBAAmBA,GACf,IAAKA,EACD,OAEJ,IAEA,MAAM2B,EAAapG,KAAKwL,aAAatD,gBACrC,IAAIqM,GAAe,EACnB,MAAM7N,EAAcN,EAAWO,IAAIlC,GACnC,GAAIiC,EAaA,GAZAN,EAAW3E,SAAQ,CAACyS,EAAgBC,KAChC,GAAIA,IAAiB1P,GAAcyP,GAAkBA,EAAe7T,QAAUqG,EAAYrG,OACvDL,KAAKmQ,6BAA6BgE,GAEtCtO,SAASpB,GAAa,CAC7C8P,GAAe,EACf,MAAMH,EAAkB,EAA0CF,EAAe7T,OACjFL,KAAKqU,kBAAkBF,EAAcC,GACrCpU,KAAKsU,mBAAmBH,OAIhCI,EACAvU,KAAKqU,kBAAkB5P,EAAY,sBAChC,CACH,MAAMoQ,EAAwB,EAA0CnO,EAAYrG,OACpFL,KAAKqU,kBAAkB5P,EAAYoQ,IAK/C,2BAA2BpQ,GACvB,IAAKA,EACD,OAEJ,IAEA,MAAM2B,EAAapG,KAAKwL,aAAatD,gBAC/BxB,EAAcN,EAAWO,IAAIlC,GACnC,GAAIiC,EAAa,CACb,MAAM0N,EAAkB,EAA0C1N,EAAYrG,OACxEiT,EAAgBtT,KAAKmQ,6BAA6B1L,GACxDzE,KAAKsU,mBAAmB7P,GACxB6O,EAAc7R,SAAQqT,IAClB,MAAMC,EAAqBrO,EACD1G,KAAKmQ,6BAA6B2E,EAAkBC,GAC5DtT,SAAQuT,IACtB,MAAMC,EAAsB7O,EAAWO,IAAIqO,GACvCC,GAAuBA,EAAoB5U,QAAUqG,EAAYrG,QAEjEL,KAAKqU,kBAAkB5P,EAAY,yBACnCzE,KAAKqU,kBAAkBS,EAAkBV,GACzCpU,KAAKqU,kBAAkBW,EAAsBZ,WAOjE,0BAA0B3P,GACtB,IAAKA,EACD,OAEJ,IAEA,MAAM2B,EAAapG,KAAKwL,aAAatD,gBACrC,IAAI+L,GAAoB,EACxB,MAAMvN,EAAcN,EAAWO,IAAIlC,GACnC,GAAIiC,EAAa,CACb1G,KAAKsU,mBAAmB7P,GACxB,MAAM+P,EAA2BxU,KAAKmQ,6BAA6B1L,GACnE+P,EAAyB/S,SAAQqT,IAE7B1O,EAAW3E,SAAQ,CAACyS,EAAgBC,KAChC,GAAIA,IAAiB1P,GAAcyP,GAAkBA,EAAe7T,QAAUqG,EAAYrG,MAAO,CAC7F,MAAMoU,EAAyBzU,KAAKmQ,6BAA6BgE,GAG3DO,EAAUF,EAAyBG,QAAO7F,GAAS2F,EAAuB5O,SAASiJ,KACzF4F,EAAQjT,SAASmT,IACb,MAAMR,EAAkB,EAA0CF,EAAe7T,OACjFL,KAAKqU,kBAAkBF,EAAcC,GACrCpU,KAAKqU,kBAAkBO,EAAcR,MAErCM,EAAQ5N,OAAS,IACjBmN,GAAoB,UAKhCA,EACAjU,KAAKqU,kBAAkB5P,EAAY,yBAEnCzE,KAAKqU,kBAAkB5P,EAAY,sBAK/C,kBAAkBpE,GAAQ,GACtB,MAAM+F,EAAapG,KAAKwL,aAAatD,gBACrClI,KAAKqS,iBAAiBhS,GAClBA,EACAL,KAAKuH,MAAM4K,iBAAkB,EAE7BnS,KAAKuH,MAAM6K,iBAAkB,EAEjC,MAAM8C,EAAkB,EAA2C7U,GAC7D8U,EAAkB,GAWxB,OAVA/O,EAAW3E,SAAQ,CAACoL,EAAapI,KAC7B,GAAIoI,GAAeA,EAAYxM,QAAUA,EAAO,CAC5C,MAAM+U,EAAoBpV,KAAKmQ,6BAA6B1L,GAC5D0Q,EAAgBnN,QAAQoN,OAGhCD,EAAgB1T,SAAQgD,IAEpBlD,SAASwB,eAAe,QAAQ0B,KAAcE,UAAUG,IAAIoQ,MAEzDC,EAGX,mBAAmB1Q,GACf,MACMiC,EADa1G,KAAKwL,aAAatD,gBACNvB,IAAIlC,GACnC,GAAIiC,EAAa,CACb,MAAMmO,EAAwB,EAA0CnO,EAAYrG,OACpFL,KAAKqU,kBAAkB5P,EAAYoQ,GACT7U,KAAKmQ,6BAA6B1L,GAC1ChD,SAAQqT,IACtB,MAAMO,EAAkB,EAA2C3O,EAAYrG,OAE/EkB,SAASwB,eAAe,QAAQ+R,KAAoBnQ,UAAUG,IAAIuQ,OAK9E,iBAAiBhV,GAAQ,GACrB,MAAM+F,EAAapG,KAAKwL,aAAatD,gBACjC7H,EACAL,KAAKuH,MAAM4K,iBAAkB,EAE7BnS,KAAKuH,MAAM6K,iBAAkB,EAEjC,MAAMkD,EAAiB,EAA2CjV,GAClE+F,EAAW3E,SAAQ,CAAC8T,EAAG9Q,KAEDlD,SAASwB,eAAe,QAAQ0B,KAAcE,UACtDE,OAAOyQ,MAIzB,qBAAqB7Q,GACjB,IAAKA,EACD,OAEJ,IAEA,MAAM2B,EAAapG,KAAKwL,aAAatD,gBAC/BxB,EAAcN,EAAWO,IAAIlC,GACnC,GAAIiC,EAAa,CACb,MAAM4M,EAAgBtT,KAAKmQ,6BAA6B1L,GAClD2P,EAAkB,EAA0C1N,EAAYrG,OAC9EiT,EAAc7R,SAAQ+T,IAClB,MAAMP,EAAsB7O,EAAWO,IAAI6O,GACvCP,GAAuBA,EAAoB5U,QAAUqG,EAAYrG,OAEjEL,KAAKqU,kBAAkBmB,EAAiBpB,QCla5D,MAAMqB,EAAY,EAA0BxK,OAAOC,SAASV,MAE5D,IAAIkL,EAAY,KACZ,QAASD,IACTC,EAAYD,EAAUrQ,KAG1B,MAAMrF,EAAS,CACXqF,IAAKsQ,EACLrM,QAAQ,EAER6J,gBAAgB,EAChB3H,MAAM,GAGV,ICVe,MAEX,YAAYxL,GAERC,KAAKD,OAASC,KAAK2V,YAAY5V,GAE/BC,KAAKwL,aAAe,IAAIpE,EAAapH,KAAKD,OAAO6V,OAEjD5V,KAAK6V,mBAAqB,IAAIxK,EAAmBrL,KAAKD,OAAO+V,OAAQ,CAAEtK,aAAcxL,KAAKwL,eAE1FxL,KAAKsP,gBAAkB,IAAI2C,EAAgBjS,KAAKD,OAAOgW,SAAU,CAC7DvK,aAAcxL,KAAKwL,eAGvBxL,KAAKgW,kBAAoB,IAAI3G,EAAkB,KAAM,CACjD7D,aAAcxL,KAAKwL,aACnB8D,gBAAiBtP,KAAKsP,kBAG1BtP,KAAKiW,gBAAkB,IAAIhV,EAAgBjB,KAAKkW,eAEhDlW,KAAK6V,mBAAmB3J,yBAAyBiK,MAC7C,KACInW,KAAKiW,gBAAgBG,iBACrBpW,KAAKqW,SAKjB,OAIA,YAAYtW,GACR,MAAO,CACHgW,SAAU,CACN7C,eAAiB,mBAAoBnT,GAAUA,EAAOmT,gBAE1D0C,MAAO,CACHxQ,IAAM,QAASrF,EAAUA,EAAOqF,IAAM3E,GAE1CqV,OAAQ,CACJvK,KAAO,SAAUxL,GAAUA,EAAOwL,KAClClC,SAAS,WAAYtJ,IAAUA,EAAOsJ,OACtCiN,UAAU,YAAavW,IAAUA,EAAOuW,UAOpD,gBAAgBhO,EAAcC,SACpBvI,KAAKwL,aAAahE,KAAKc,EAAcC,GAC3CvI,KAAK6V,mBAAmB9J,oBACxB/L,KAAKsP,gBAAgBiH,qBAGzB,cAAcC,EAAQhU,EAAQnC,GACrBmW,IACLxW,KAAKwL,aAAa5C,kBAAkB4N,EAAQhU,EAAQnC,GACpDL,KAAK6V,mBAAmB9J,qBAG5B,kBACI/L,KAAKwL,aAAaiL,QAClBzW,KAAK6V,mBAAmB9J,oBAE5B,iBACI/L,KAAKwL,aAAa/D,OAClBzH,KAAK6V,mBAAmB9J,oBAG5B,oBACI,MAAO,CAGH5J,sBAAuB,CAACmG,EAAcC,IAAiBvI,KAAK0W,UAAUpO,EAAcC,GACpF3E,OAAQ+S,gBACE3W,KAAK6V,mBAAmBe,mBAC9B5W,KAAKiW,gBAAgBG,iBACrBpW,KAAKqW,OAET3T,MAAO,CAAC8T,EAAQhU,EAAQnC,IAAUL,KAAK6W,cAAcL,EAAQhU,EAAQnC,GACrE2C,cAAgBwT,GAAWxW,KAAK6W,cAAcL,EAAQ,MACtDrT,QAAS,IAAMnD,KAAK8W,kBACpB1T,OAAQ,IAAMpD,KAAK+W,iBAGnBxS,6BAA8B,KAC1BvE,KAAKsP,gBAAgB0H,8BAA8B,IAEvDxS,6BAA8B,KAC1BxE,KAAKsP,gBAAgB0H,8BAA8BxW,IAEvDqD,oBAAsBzC,IAClBpB,KAAKsP,gBAAgB2H,oBAAoB7V,IAE7CmC,0BAA4BnC,IACxBpB,KAAKsP,gBAAgB4H,0BAA0B9V,IAEnD6B,UAAW0T,gBACD3W,KAAKsP,gBAAgB6H,kBAAkB,IAEjDjU,UAAWyT,gBACD3W,KAAKsP,gBAAgB6H,kBAAkB3W,IAEjD6C,gBAAiBsT,gBACP3W,KAAKsP,gBAAgB8H,iBAE/B9T,gBAAiBqT,MAAMlS,IACnBzE,KAAKsP,gBAAgBgF,mBAAmB7P,IAE5ChB,qBAAuBgB,IACnBzE,KAAKsP,gBAAgB+H,yBAAyB5S,IAElDjB,sBAAuBmT,MAAMlS,IACzBzE,KAAKsP,gBAAgBgI,2BAA2B7S,IAEpDf,mBAAoBiT,MAAMlS,IACtBzE,KAAKsP,gBAAgBiI,qBAAqB9S,IAE9Cd,eAAgBgT,MAAMlS,IAClBzE,KAAKsP,gBAAgBkI,mBAAmB/S,IAI5CX,gBAAiB,KACb9D,KAAKsP,gBAAgBoE,uBACrB1T,KAAKsP,gBAAgB+C,iBAAiB,GACtCrS,KAAKsP,gBAAgB+C,iBAAiB7R,IAE1CsC,YAAa,CAAC1B,EAAcwB,KACxB5C,KAAKsP,gBAAgB+E,kBAAkBjT,EAAcwB,GAAU,IAEnEmB,gBAAiB,KACb/D,KAAKsP,gBAAgBmI,iBAIzBzT,mBAAoB,KAChBhE,KAAKgW,kBAAkB0B,mBACvB1X,KAAK6V,mBAAmB9J,qBAE5B9H,iBAAkB,KACdjE,KAAKgW,kBAAkB2B,kBAE3BzT,aAAc,KACVlE,KAAKgW,kBAAkB4B,mBAE3BtT,UAAW,KACPtE,KAAKgW,kBAAkB6B,mBACvB7X,KAAK6V,mBAAmB9J,qBAG5B1H,YAAa,KACTrE,KAAKwL,aAAa3D,YAEtB1D,UAAW,KACPnE,KAAKwL,aAAasM,WAClB9X,KAAK6V,mBAAmB9J,oBACxB/L,KAAKsP,gBAAgBiH,sBAEzBnS,UAAW,KACPpE,KAAKwL,aAAauM,WAClB/X,KAAK6V,mBAAmB9J,oBACxB/L,KAAKsP,gBAAgBiH,yBD3J3BxW,I","file":"main.03f53b5deb44a1c1ea05.js","sourcesContent":["export default class Figure {\r\n    constructor(config) {\r\n        this.letterW = config.letterW\r\n        this.iconW = config.iconW;\r\n        this.letterB = config.letterB;\r\n        this.iconB = config.iconB;\r\n    }\r\n\r\n    asLetter(color = true) {\r\n        if (color) {\r\n            return this.letterW;\r\n        }\r\n        return this.letterB;\r\n    }\r\n\r\n    asIcon(color = true) {\r\n        if (color) {\r\n            return this.iconW;\r\n        }\r\n        return this.iconB;\r\n    }\r\n}","import Figure from './Figure.js'\r\n\r\nexport const boardSize = 90; //todo:refactor -> pieces size\r\n\r\nexport const rows = [8, 7, 6, 5, 4, 3, 2, 1];\r\nexport const cols = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];\r\n\r\nexport const white = true;\r\nexport const black = false;\r\n\r\nexport const fenBase = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1';\r\n\r\nexport const figures = {\r\n    b: new Figure({ letterW: 'B', iconW: '♗', letterB: 'b', iconB: '♝' }),\r\n    r: new Figure({ letterW: 'R', iconW: '♖', letterB: 'r', iconB: '♜' }),\r\n    n: new Figure({ letterW: 'N', iconW: '♘', letterB: 'n', iconB: '♞' }),\r\n    k: new Figure({ letterW: 'K', iconW: '♔', letterB: 'k', iconB: '♚' }),\r\n    q: new Figure({ letterW: 'Q', iconW: '♕', letterB: 'q', iconB: '♛' }),\r\n    p: new Figure({ letterW: 'P', iconW: '♙', letterB: 'p', iconB: '♟' }),\r\n};","export default class ControlsService {\r\n\r\n    constructor(callBacks) {\r\n        this.buffer = {\r\n            squareTarget: null,\r\n        };\r\n        this.callBacks = callBacks;\r\n        this.panelControls();\r\n    }\r\n\r\n    squareControls() {\r\n        const self = this;\r\n        document.querySelectorAll('.square').forEach(boardSquare => {\r\n            boardSquare.addEventListener('click', function(event) {\r\n                const targetElement = event.target || event.srcElement;\r\n                const targetSquareName = targetElement.getAttribute('data-square');\r\n                self.checkOnSelectSquare(targetSquareName);\r\n            }, false);\r\n        })\r\n\r\n    }\r\n\r\n\r\n    async checkOnSelectSquare(selectedSquare) {\r\n        if (this.buffer.squareTarget) {\r\n            if (selectedSquare === this.buffer.squareTarget) {\r\n                this.clearBufferAndSelection();\r\n            } else {\r\n                const moved = this.callBacks.movePiecesFromSquares(this.buffer.squareTarget, selectedSquare);\r\n                if (moved) {\r\n                    this.clearBufferAndSelection();\r\n                } else {\r\n                    this.clearSelectedSquareFromBuffer()\r\n                    this.setBufferSquareTarget(selectedSquare);\r\n                }\r\n            }\r\n        } else {\r\n            this.setBufferSquareTarget(selectedSquare);\r\n        }\r\n    }\r\n\r\n    panelControls() {\r\n        const self = this;\r\n        document.querySelectorAll('.button-add-fig').forEach(button => {\r\n            button.addEventListener('click', function(event) {\r\n                const targetElement = event.target || event.srcElement;\r\n                const letter = targetElement.getAttribute('data-letter');\r\n                const color = letter === letter.toUpperCase();\r\n                self.callBacks.onAdd(self.buffer.squareTarget, letter.toLowerCase(), color)\r\n                self.clearSelectedSquareFromBuffer();\r\n            }, false);\r\n        })\r\n\r\n\r\n        document.querySelectorAll('.button-marker').forEach(button => {\r\n            button.addEventListener('click', function(event) {\r\n                const targetElement = event.currentTarget;\r\n                const markerId = targetElement.getAttribute('data-marker-id');\r\n                self.callBacks.onAddMarker(self.buffer.squareTarget, markerId)\r\n                self.clearSelectedSquareFromBuffer();\r\n            }, false);\r\n        })\r\n\r\n        const buttonClearSquare = document.getElementById(\"button-clear-square\");\r\n        buttonClearSquare.addEventListener('click', function() {\r\n            self.callBacks.onClearSquare(self.buffer.squareTarget);\r\n            self.clearSelectedSquareFromBuffer();\r\n        }, false);\r\n\r\n        const buttonDomainW = document.getElementById(\"button-paint-domains-w\");\r\n        buttonDomainW.addEventListener('click', function() {\r\n            self.callBacks.onDomainW();\r\n        }, false);\r\n\r\n        const buttonDomainB = document.getElementById(\"button-paint-domains-b\");\r\n        buttonDomainB.addEventListener('click', function() {\r\n            self.callBacks.onDomainB();\r\n        }, false);\r\n\r\n\r\n        const buttonClear = document.getElementById(\"button-clear\");\r\n        buttonClear.addEventListener('click', function() {\r\n            self.callBacks.onClear();\r\n        }, false);\r\n\r\n        const buttonInit = document.getElementById(\"button-init\");\r\n        buttonInit.addEventListener('click', function() {\r\n            self.callBacks.onInit();\r\n        }, false);\r\n\r\n        const buttonDomainsToggle = document.getElementById(\"button-toggle-domains\");\r\n        buttonDomainsToggle.addEventListener('click', function() {\r\n            self.callBacks.onDomainsToggle();\r\n        }, false);\r\n\r\n\r\n\r\n        const buttonSquareDomains = document.getElementById(\"button-paint-domains-square\");\r\n        buttonSquareDomains.addEventListener('click', function() {\r\n            self.callBacks.onDomainsSquare(self.buffer.squareTarget);\r\n            self.clearSelectedSquareFromBuffer();\r\n        }, false);\r\n\r\n        const buttonSquareDomainSupport = document.getElementById(\"button-paint-support-square-domain\");\r\n        buttonSquareDomainSupport.addEventListener('click', function() {\r\n            self.callBacks.onShowSquareDomainSupport(self.buffer.squareTarget);\r\n            self.clearSelectedSquareFromBuffer();\r\n        }, false);\r\n\r\n        const buttonSquareDomainAttacks = document.getElementById(\"button-paint-domain-attack-square\");\r\n        buttonSquareDomainAttacks.addEventListener('click', function() {\r\n            self.callBacks.onDomainAttacksSquare(self.buffer.squareTarget);\r\n            self.clearSelectedSquareFromBuffer();\r\n        }, false);\r\n\r\n        const buttonSquareDomainDanger = document.getElementById(\"button-paint-domain-danger-square\");\r\n        buttonSquareDomainDanger.addEventListener('click', function() {\r\n            self.callBacks.onDomainDangerSquare(self.buffer.squareTarget);\r\n            self.clearSelectedSquareFromBuffer();\r\n        }, false);\r\n\r\n\r\n        const buttonSquareAttack = document.getElementById(\"button-paint-attack-square\");\r\n        buttonSquareAttack.addEventListener('click', function() {\r\n            self.callBacks.onShowAttackSquare(self.buffer.squareTarget);\r\n            self.clearSelectedSquareFromBuffer();\r\n        }, false);\r\n\r\n        const buttonSquareDanger = document.getElementById(\"button-paint-danger-square\");\r\n        buttonSquareDanger.addEventListener('click', function() {\r\n            self.callBacks.onDangerSquare(self.buffer.squareTarget);\r\n            self.clearSelectedSquareFromBuffer();\r\n        }, false);\r\n\r\n\r\n        const buttonFlipBoard = document.getElementById(\"button-board-flip\");\r\n        buttonFlipBoard.addEventListener('click', function() {\r\n            self.callBacks.onFlip(self.buffer.squareTarget);\r\n        }, false);\r\n\r\n        const buttonSquareSupport = document.getElementById(\"button-paint-support-square\");\r\n        buttonSquareSupport.addEventListener('click', function() {\r\n            self.callBacks.onShowSquareSupport(self.buffer.squareTarget);\r\n            self.clearSelectedSquareFromBuffer();\r\n        }, false);\r\n\r\n\r\n\r\n        const buttonVisualsRemove = document.getElementById(\"button-visuals-remove\");\r\n        buttonVisualsRemove.addEventListener('click', function() {\r\n            self.callBacks.onRemoveVisuals();\r\n        }, false);\r\n\r\n        const buttonMarkersToggle = document.getElementById(\"button-markers-toggle\");\r\n        buttonMarkersToggle.addEventListener('click', function() {\r\n            self.callBacks.onToggleMarkers();\r\n        }, false);\r\n\r\n        const buttonFenCreateBoard = document.getElementById(\"button-fen-create-board\");\r\n        buttonFenCreateBoard.addEventListener('click', function() {\r\n            self.callBacks.onLoadFenFromInput();\r\n        }, false);\r\n\r\n        const buttonFenCreateFen = document.getElementById(\"button-fen-create-fen\");\r\n        buttonFenCreateFen.addEventListener('click', function() {\r\n            self.callBacks.onLoadFenToInput();\r\n        }, false);\r\n\r\n        const buttonFenCreateLink = document.getElementById(\"button-fen-create-link\");\r\n        buttonFenCreateLink.addEventListener('click', function() {\r\n            self.callBacks.onCreateLink();\r\n        }, false);\r\n\r\n        const buttonNavPrev = document.getElementById(\"button-nav-prev\");\r\n        buttonNavPrev.addEventListener('click', function() {\r\n            self.callBacks.onNavPrev();\r\n        }, false);\r\n\r\n        const buttonNavNext = document.getElementById(\"button-nav-next\");\r\n        buttonNavNext.addEventListener('click', function() {\r\n            self.callBacks.onNavNext();\r\n        }, false);\r\n\r\n        const buttonNavRecord = document.getElementById(\"button-nav-record\");\r\n        buttonNavRecord.addEventListener('click', function() {\r\n            self.callBacks.onNavRecord();\r\n        }, false);\r\n\r\n        const buttonLoadPgn = document.getElementById(\"button-pgn-import\");\r\n        buttonLoadPgn.addEventListener('click', function() {\r\n            self.callBacks.onLoadPgn();\r\n        }, false);\r\n\r\n        const buttonReportBalanceWhites = document.getElementById(\"button-paint-report-balance-whites\");\r\n        buttonReportBalanceWhites.addEventListener('click', function() {\r\n            self.callBacks.onDisplayReportBalanceWhites();\r\n        }, false);\r\n\r\n        const buttonReportBalanceBlacks = document.getElementById(\"button-paint-report-balance-blacks\");\r\n        buttonReportBalanceBlacks.addEventListener('click', function() {\r\n            self.callBacks.onDisplayReportBalanceBlacks();\r\n        }, false);\r\n\r\n    }\r\n\r\n    async setBufferSquareTarget(squareName) {\r\n        this.buffer.squareTarget = squareName;\r\n        if (squareName) {\r\n            const item = document.getElementById(`base-${squareName}`);\r\n\r\n            if (item.classList.contains('with-selection')) {\r\n                item.classList.remove('with-selection');\r\n            } else {\r\n                item.classList.add('with-selection')\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    clearSelectedSquareFromBuffer() {\r\n        const squareName = this.buffer.squareTarget;\r\n        if (squareName) {\r\n            const item = document.getElementById(`base-${squareName}`);\r\n            if (item.classList.contains('with-selection')) {\r\n                item.classList.remove('with-selection');\r\n            }\r\n            this.buffer.squareTarget = null;\r\n        }\r\n    }\r\n\r\n    clearBufferAndSelection() {\r\n        this.buffer.squareTarget = null;\r\n\r\n        document.querySelectorAll('.base').forEach(squareBase => {\r\n            squareBase.classList.remove('with-selection');\r\n        })\r\n\r\n    }\r\n}","function getSquareName(colLetter, rowNumber) {\r\n    return `${colLetter}${rowNumber}`;\r\n}\r\n\r\nfunction asMapSquare(letter, color = white) {\r\n    if (letter) {\r\n        return {\r\n            letter: letter,\r\n            color: color,\r\n        };\r\n    } else {\r\n        return null\r\n    }\r\n}\r\n\r\nexport default {\r\n    getSquareName,\r\n    asMapSquare\r\n}","import SquareUtils from '../../utils/square.utils.js';\r\nimport { rows, cols, white } from '../../utils/chess.constants.js';\r\n\r\n\r\nfunction convertSquareMapToFenStr(squaresMap) {\r\n    const rows = [8, 7, 6, 5, 4, 3, 2, 1];\r\n    const cols = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];\r\n\r\n    let fenSquarePositions = '';\r\n\r\n    let emptyAccumulator = 0;\r\n\r\n    rows.forEach((row, rowIdx) => {\r\n        emptyAccumulator = 0;\r\n        cols.forEach((col) => {\r\n            const squareName = SquareUtils.getSquareName(col, row);\r\n            const squarePiece = squaresMap.get(squareName)\r\n\r\n            if (squarePiece) {\r\n                if (emptyAccumulator !== 0) {\r\n                    fenSquarePositions += emptyAccumulator.toString();\r\n                    emptyAccumulator = 0;\r\n                }\r\n                const pieceLetter = squarePiece.color ? squarePiece.letter.toUpperCase() : squarePiece.letter.toLowerCase()\r\n                fenSquarePositions += pieceLetter;\r\n\r\n            } else {\r\n                emptyAccumulator += 1;\r\n            }\r\n        })\r\n        if (emptyAccumulator !== 0) {\r\n            fenSquarePositions += emptyAccumulator.toString();\r\n        }\r\n        if (rowIdx < rows.length - 1) {\r\n            fenSquarePositions += '/';\r\n        }\r\n    })\r\n    const fen = `${fenSquarePositions} w KQkq - 0 1`;\r\n    return fen;\r\n}\r\n\r\nfunction convertFenStrToObject(fen) {\r\n\r\n    const squaresKeyVal = {};\r\n    const allowedLetters = ['r', 'n', 'b', 'k', 'q', 'p', 'R', 'N', 'B', 'K', 'Q', 'P'];\r\n    const fenFiguresSeparator = ' ';\r\n    const fenRowsSeparator = '/';\r\n\r\n    const figuresPart = fen.split(fenFiguresSeparator)[0];\r\n    const strRows = figuresPart.split(fenRowsSeparator);\r\n\r\n    strRows.forEach((rowText, rowIdw) => {\r\n        const boardRowIdx = 8 - rowIdw; // to flip the board ->  rowIdw + 1\r\n        let currentCol = 1;\r\n        rowText.split('').forEach((character) => {\r\n            if (allowedLetters.includes(character)) {\r\n                // it´s a figure letter\r\n                const colLetter = cols[currentCol - 1];\r\n                const cellKey = SquareUtils.getSquareName(colLetter, boardRowIdx);\r\n                const color = (character == character.toUpperCase()); // R -> true\r\n                const figureLetter = character.toLowerCase();\r\n                squaresKeyVal[cellKey] = SquareUtils.asMapSquare(figureLetter, color);\r\n                currentCol += 1;\r\n\r\n            } else {\r\n                // should be a number\r\n                const jumpCols = parseInt(character, 10)\r\n                for (let c = currentCol; c < jumpCols + currentCol; c++) {\r\n                    const colLetter = cols[c - 1];\r\n                    const cellKey = SquareUtils.getSquareName(colLetter, boardRowIdx);\r\n                    squaresKeyVal[cellKey] = null;\r\n                }\r\n                currentCol += parseInt(character, 10);\r\n            }\r\n        })\r\n    });\r\n    return squaresKeyVal;\r\n}\r\n\r\nfunction fenToMap(fen) {\r\n    if (!fen || fen === '') {\r\n        return\r\n    }\r\n    const fenAsObj = this.convertFenStrToObject(fen);\r\n    return new Map(Object.entries(fenAsObj));\r\n}\r\n\r\nexport default {\r\n    convertFenStrToObject,\r\n    convertSquareMapToFenStr,\r\n    fenToMap,\r\n}","import SquareUtils from '../../utils/square.utils.js';\r\nimport ServiceUtils from './board-service.utils.js';\r\n\r\nimport { rows, cols, white, fenBase } from '../../utils/chess.constants.js';\r\n\r\nexport default class BoardService {\r\n\r\n    constructor(config = null) {\r\n        this.moves = [];\r\n        this.moveIdx = 0;\r\n\r\n        this.state = {\r\n            move: null\r\n        }\r\n\r\n        if (config && 'fen' in config && config.fen) {\r\n            this.init(config.fen);\r\n        } else {\r\n            this.createSquaresMap(rows, cols);\r\n        }\r\n    }\r\n\r\n    init(fen = fenBase) {\r\n        this.setFenToSquareMap(fen)\r\n        this.movesReset()\r\n        this.moveSave()\r\n    }\r\n\r\n    clear() {\r\n        this.createSquaresMap(rows, cols);\r\n        this.movesReset()\r\n    }\r\n\r\n\r\n    // Square Map \r\n\r\n    createSquaresMap(rows, cols) {\r\n        const listSquares = [];\r\n        rows.forEach((row) => {\r\n            cols.forEach((col) => {\r\n                const squareKey = SquareUtils.getSquareName(col, row);\r\n                listSquares.push([squareKey, null]);\r\n            })\r\n        })\r\n        this._squaresMap = new Map(listSquares);\r\n    }\r\n\r\n    getSquareMapAsFen() {\r\n        return ServiceUtils.convertSquareMapToFenStr(this.getSquaresMap());\r\n    }\r\n\r\n    setFenToSquareMap(fen) {\r\n        const resultMap = ServiceUtils.fenToMap(fen)\r\n        this.setSquaresMap(resultMap);\r\n    }\r\n\r\n    getSquaresMap() {\r\n        return this._squaresMap;\r\n    }\r\n\r\n    setSquaresMap(map) {\r\n        this._squaresMap = map;\r\n    }\r\n\r\n\r\n    // Moves State \r\n\r\n    setMoveState(originSquare, targetSquare) {\r\n        this.state.move = {\r\n            from: originSquare,\r\n            to: targetSquare,\r\n        };\r\n    }\r\n\r\n    setFigureInSquare(squareName, letter, color = white) {\r\n        this._squaresMap.set(squareName, SquareUtils.asMapSquare(letter, color));\r\n    }\r\n\r\n    async move(originSquare, targetSquare) {\r\n        const originPiece = this._squaresMap.get(originSquare);\r\n        if (originPiece) {\r\n            this.setFigureInSquare(targetSquare, originPiece.letter, originPiece.color);\r\n            this.setFigureInSquare(originSquare, null);\r\n            this.setMoveState(originSquare, targetSquare);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    // Moves Registry\r\n\r\n    movesReset() {\r\n        this.moveIdx = 0;\r\n        this.moves.length = this.moveIdx;\r\n        this.state = {\r\n            move: null\r\n        }\r\n    }\r\n\r\n    moveSave() {\r\n        const squareFrom = this.state.move ? this.state.move.from : null;\r\n        const squareTo = this.state.move ? this.state.move.to : null;\r\n\r\n        const moveEntry = {\r\n            from: squareFrom,\r\n            to: squareTo,\r\n            fen: this.getSquareMapAsFen()\r\n        }\r\n\r\n        const currentCursor = this.moveIdx;\r\n        if (this.moves.length !== 0) {\r\n\r\n            this.moves.length = currentCursor + 1;\r\n        }\r\n        this.moves.push(moveEntry);\r\n        this.moveIdx = this.moves.length - 1;\r\n    }\r\n\r\n    get currentMoveIdx() {\r\n        return this.moveIdx;\r\n    }\r\n\r\n    get currentMove() {\r\n        return this.moves[this.moveIdx];\r\n    }\r\n\r\n    moveNext() {\r\n        let cursor = this.moveIdx + 1;\r\n        if (cursor >= this.moves.length) {\r\n            cursor = this.moves.length - 1;\r\n        }\r\n        this.moveIdx = cursor;\r\n        const move = this.moves[cursor];\r\n        if (!move) {\r\n            return;\r\n        }\r\n\r\n        this.setFenToSquareMap(move.fen);\r\n    }\r\n\r\n    movePrev() {\r\n        let cursor = this.moveIdx - 1;\r\n        if (cursor <= 0) {\r\n            cursor = 0;\r\n        }\r\n        this.moveIdx = cursor;\r\n        const move = this.moves[cursor];\r\n        if (!move) {\r\n            return;\r\n        }\r\n\r\n        this.setFenToSquareMap(move.fen);\r\n    }\r\n\r\n    getMoveByIdx(moveIdx) {\r\n        if (moveIdx < this.moves.length) {\r\n            return this.moves[this.moveIdx];\r\n        }\r\n        return null;\r\n    }\r\n\r\n    // todo:feature\r\n    // movesGoTo(gameMoveIdx = 1, color = white) {\r\n    //     const cursor = (gameMoveIdx * 2) - (color ? 2 : 1) + 1; // +1, fix, because the initial position counts like a move\r\n    //     this.moveIdx = cursor;\r\n    //     return this.moves[cursor];\r\n    // }\r\n\r\n}","import SquareUtils from '../../utils/square.utils.js';\r\nimport { white, boardSize } from '../../utils/chess.constants.js';\r\n\r\nfunction createSquare(squareLetter, colIdx, rowInt, rowIdx, config) {\r\n\r\n    const squareName = SquareUtils.getSquareName(squareLetter, rowInt);\r\n\r\n    const asIcon = config.asIcon;\r\n    const div = config.svg.div;\r\n\r\n    const x = div * colIdx;\r\n    const y = div * rowIdx;\r\n\r\n    let xT = 0;\r\n    const yT = 0;\r\n\r\n    let fontSize = (boardSize / 8) * 0.6;\r\n    if (asIcon) {\r\n        fontSize = (boardSize / 8) * 0.8;\r\n    }\r\n\r\n    const dyT = asIcon ? div / 1.2 : div / 1.5;\r\n    const dxT = div / 2; // asIcon ? 0 : 0;\r\n\r\n    const content = `\r\n      <title>${squareName}</title>\r\n      <rect id=\"base-${squareName}\" \r\n          data-square=\"${squareName}\"\r\n          class=\"base\" \r\n          width=\"${div}%\" \r\n          height=\"${div}%\"  />\r\n      <g id=\"markers-${squareName}\" \r\n          data-square=\"${squareName}\"\r\n          class=\"markers\" \r\n          width=\"${div}%\" \r\n          height=\"${div}%\"  \r\n          fill=\"transparent\"\r\n          />\r\n      <text id=\"piece-${squareName}\" \r\n          data-square=\"${squareName}\"\r\n          class=\"piece ${ asIcon ? 'asIcon' : ''}\" \r\n          text-anchor=\"middle\" \r\n          x=\"${xT}\" \r\n          y=\"${yT}\" \r\n          dy=\"${dyT}\"\r\n          dx=\"${dxT}\"\r\n          font-size=\"${fontSize}\"\r\n       ></text>\r\n  `;\r\n\r\n    const squareEl = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\r\n    squareEl.setAttribute('class', 'square');\r\n    squareEl.setAttribute('id', `${squareName}`);\r\n    squareEl.setAttribute('data-square', `${squareName}`);\r\n    squareEl.setAttribute('data-square-col', `${squareLetter}`);\r\n    squareEl.setAttribute('data-square-row', `${rowInt}`);\r\n    squareEl.setAttribute('transform', `translate(${x},${y})`);\r\n\r\n    squareEl.innerHTML = content;\r\n    return squareEl;\r\n}\r\n\r\n\r\nfunction setPieceInSquare(squareName, pieceLetter = '', color = white) {\r\n    const squareNode = document.getElementById(`piece-${squareName}`);\r\n    const className = color ? 'white' : 'black';\r\n    squareNode.classList.add(className);\r\n    const notClassName = color ? 'black' : 'white';\r\n    if (color && squareNode.classList.contains(notClassName)) {\r\n        squareNode.classList.remove(notClassName);\r\n    }\r\n    squareNode.textContent = pieceLetter;\r\n}\r\n\r\nexport default {\r\n    createSquare,\r\n    setPieceInSquare\r\n}","function getParamsFromUrl(url) {\r\n    const params = {};\r\n    let parser = document.createElement('a');\r\n    parser.href = url;\r\n    const query = parser.search.substring(1);\r\n    if (!query) {\r\n        return params;\r\n    }\r\n    const vars = query.split('&');\r\n    for (let i = 0; i < vars.length; i++) {\r\n        const pair = vars[i].split('=');\r\n        params[pair[0]] = decodeURIComponent(pair[1]);\r\n    }\r\n    return params;\r\n};\r\n\r\n\r\nfunction getAbsoluteRouteWithFen(fen) {\r\n    const fenQuery = fen ? `?fen=${fen}` : '';\r\n    return `${window.location.origin}${window.location.pathname}${fenQuery}`;\r\n}\r\n\r\nexport default {\r\n    getParamsFromUrl,\r\n    getAbsoluteRouteWithFen\r\n}","import { rows, cols, boardSize, figures } from '../../utils/chess.constants.js';\r\nimport SvgBoardUtils from './board-render-svg.utils.js';\r\nimport UrlUtils from '../../utils/url.js';\r\n\r\nexport default class BoardRenderService {\r\n\r\n    constructor(config, services) {\r\n\r\n        this.config = {\r\n            flip: config.flip,\r\n            asIcon: config.asIcon,\r\n            svg: {\r\n                div: boardSize / 8\r\n            }\r\n        }\r\n\r\n        this.boardService = services.boardService;\r\n    }\r\n\r\n    changeHistoryWithFen(fen) {\r\n        const url = UrlUtils.getAbsoluteRouteWithFen(fen);\r\n        history.pushState({\r\n            id: 'game-render'\r\n        }, '', url);\r\n    }\r\n\r\n    getRows() {\r\n        return this.config.flip ? [...rows].reverse() : rows;\r\n    }\r\n\r\n    getCols() {\r\n        return this.config.flip ? [...cols].reverse() : cols;\r\n    }\r\n\r\n\r\n    async drawBoardFromSquareMap() {\r\n        this.drawCoordinates();\r\n        this.drawSquares();\r\n        this.drawPiecesFromMap();\r\n    }\r\n\r\n    async drawBoardFlipped() {\r\n        const squares = document.querySelectorAll(\".square\");\r\n        const boardCoordinate = document.querySelectorAll(\".board-coordinate\");\r\n        squares.forEach(squareNode => {\r\n            squareNode.remove();\r\n        });\r\n        boardCoordinate.forEach(squareNode => {\r\n            squareNode.remove();\r\n        })\r\n\r\n        this.config.flip = !this.config.flip;\r\n\r\n        this.drawBoardFromSquareMap();\r\n    }\r\n\r\n    drawSquares() {\r\n        const flipedRows = this.getRows();\r\n        const flipedCols = this.getCols();\r\n\r\n        const svg = document.getElementById(\"svg-squares\");\r\n\r\n        flipedRows.forEach((row, rowIdx) => {\r\n            flipedCols.forEach((colLetter, colIdx) => {\r\n                const squareEl = SvgBoardUtils.createSquare(colLetter, colIdx, row, rowIdx, this.config);\r\n                svg.appendChild(squareEl);\r\n            })\r\n        })\r\n    }\r\n\r\n    drawCoordinates() {\r\n\r\n        const flipedRows = this.getRows();\r\n        const flipedCols = this.getCols();\r\n\r\n        const svgCoordinates = document.getElementById(\"svg-coordinates\");\r\n\r\n        flipedCols.forEach((col, idx) => {\r\n            const textEl = document.createElementNS(\"http://www.w3.org/2000/svg\", \"text\");\r\n            const textNode = document.createTextNode(col);\r\n            textEl.setAttribute('x', `${this.config.svg.div * idx}%`);\r\n            textEl.setAttribute('y', '0');\r\n            textEl.setAttribute('dy', '0');\r\n            textEl.setAttribute('dx', '1');\r\n            textEl.setAttribute('data-coord-col', `${col}`);\r\n            textEl.setAttribute('class', 'board-coordinate board-coordinate-col');\r\n            textEl.setAttribute('text-anchor', 'start');\r\n            textEl.appendChild(textNode);\r\n\r\n            svgCoordinates.appendChild(textEl);\r\n        })\r\n\r\n        flipedRows.forEach((row, idx) => {\r\n            const textEl = document.createElementNS(\"http://www.w3.org/2000/svg\", \"text\");\r\n            const textNode = document.createTextNode(row);\r\n            textEl.setAttribute('x', '0');\r\n            textEl.setAttribute('y', `${this.config.svg.div * idx}%`);\r\n            textEl.setAttribute('dy', '6');\r\n            textEl.setAttribute('dx', '-3');\r\n            textEl.setAttribute('data-coord-row', `${row}`);\r\n            textEl.setAttribute('class', 'board-coordinate board-coordinate-row');\r\n            textEl.setAttribute('text-anchor', 'start');\r\n            textEl.appendChild(textNode);\r\n\r\n            svgCoordinates.appendChild(textEl);\r\n        })\r\n    }\r\n\r\n    drawPiecesFromMap() {\r\n        const squaresMap = this.boardService.getSquaresMap();\r\n        squaresMap.forEach((squareEntry, squareKey) => {\r\n            if (squareEntry) {\r\n                let figureText = '';\r\n                const entryFigure = figures[squareEntry.letter];\r\n                if (this.config.asIcon === true) {\r\n                    figureText = entryFigure.asIcon(squareEntry.color);\r\n                } else {\r\n                    figureText = entryFigure.asLetter(squareEntry.color);\r\n                }\r\n                SvgBoardUtils.setPieceInSquare(squareKey, figureText, squareEntry.color)\r\n            } else {\r\n                SvgBoardUtils.setPieceInSquare(squareKey)\r\n            }\r\n        })\r\n\r\n        const currentFen = this.boardService.getSquareMapAsFen();\r\n        this.changeHistoryWithFen(currentFen);\r\n    }\r\n\r\n\r\n\r\n\r\n}","import { white } from '../../utils/chess.constants.js';\r\n\r\nfunction addTextToClipboard(text) {\r\n    try {\r\n        let myTemporaryInputElement = document.createElement('input');\r\n        myTemporaryInputElement.type = 'text';\r\n        myTemporaryInputElement.value = text;\r\n        document.body.appendChild(myTemporaryInputElement);\r\n        myTemporaryInputElement.select();\r\n        document.execCommand('Copy');\r\n        document.body.removeChild(myTemporaryInputElement);\r\n\r\n    } catch (e) {\r\n        console.error('[Clipboard] addTextToClipboard:', e);\r\n    }\r\n}\r\n\r\n\r\nfunction parsePgn(pgnStr) {\r\n    let m;\r\n    const regex = /([0-9]{1,2}\\.)\\s?([\\S]+) ([\\S]+)/gm;\r\n    const registry = [];\r\n\r\n    const pgnStrNoHeaders = pgnStr.replace(/(\\[.+\\])/g, '');\r\n    const pgnStrNoBr = pgnStrNoHeaders.replace(/(?:\\r\\n|\\r|\\n)/g, ' ');\r\n\r\n    while ((m = regex.exec(pgnStrNoBr)) !== null) {\r\n        // avoid infinite loops\r\n        if (m.index === regex.lastIndex) {\r\n            regex.lastIndex++;\r\n        }\r\n        /*\r\n         group 0: 16.Qd3 Bc6\r\n         group 1: 16.\r\n         group 2: Qd3\r\n         group 3: Bc6\r\n        */\r\n        m.forEach((match, groupIndex) => {\r\n            // console.debug(`[UTILS] parsePgn match: , group ${groupIndex}: ${match}`);\r\n            if (groupIndex === 0) {\r\n                // Index move\r\n            }\r\n            if (groupIndex === 2) {\r\n                // Whites move\r\n\r\n                registry.push(match);\r\n            }\r\n            if (groupIndex === 3) {\r\n                // Blacks move\r\n                registry.push(match);\r\n            }\r\n        });\r\n    }\r\n\r\n    return registry;\r\n}\r\n\r\n\r\nfunction parsePgnNotation(pgnMove, color = white) {\r\n    /*\r\n     * b4!\r\n     * Sf5!?\r\n     * Ndxf6 <<< BUG !\r\n     * R8xf7 <<< BUG ?\r\n     * Nxf6\r\n     * O-O\r\n     * O-O-O\r\n     * exd5\r\n     * Bc5\r\n     * Qd2#\r\n     * g8=Q\r\n     * Rf7+\r\n     * Qh8+\r\n     * Rcc8\r\n     * end games: 1-0, ...\r\n     * mate #\r\n     * */\r\n\r\n    const pgnMoveClean1 = pgnMove.replace('#', '')\r\n        .replace('+', '')\r\n        .replace('?', '')\r\n        .replace('!', '');\r\n\r\n    // endGame case\r\n    if (['1-0', '1:0', '0-1', '0:1', '1/2-1/2', '*'].includes(pgnMoveClean1)) {\r\n        return [];\r\n    }\r\n\r\n    // Short halfMove case\r\n    if (pgnMoveClean1 === 'O-O') {\r\n        if (color === white) {\r\n\r\n            return [\r\n                { figure: 'k', squareFrom: 'e1', squareTo: 'g1', color },\r\n                { figure: 'r', squareFrom: 'h1', squareTo: 'f1', color },\r\n            ];\r\n        }\r\n        return [\r\n            { figure: 'k', squareFrom: 'e8', squareTo: 'g8', color },\r\n            { figure: 'r', squareFrom: 'h8', squareTo: 'f8', color },\r\n        ];\r\n    }\r\n\r\n    // Long halfMove case\r\n    if (pgnMoveClean1 === 'O-O-O') {\r\n        if (color === white) {\r\n            return [\r\n                { figure: 'k', squareFrom: 'e1', squareTo: 'c1', color },\r\n                { figure: 'r', squareFrom: 'a1', squareTo: 'd1', color },\r\n            ];\r\n        }\r\n        return [\r\n            { figure: 'k', squareFrom: 'e8', squareTo: 'c8', color },\r\n            { figure: 'r', squareFrom: 'a8', squareTo: 'd8', color },\r\n        ];\r\n    }\r\n\r\n    // Pawn promotion case: g8=Q\r\n    if (pgnMoveClean1.indexOf('=') > -1) {\r\n        const partsChange = pgnMoveClean1.split('=');\r\n        return [{\r\n            figure: 'p',\r\n            figureToChange: partsChange[1].toLowerCase(),\r\n            squareTo: partsChange[0],\r\n            color\r\n        }, ];\r\n    }\r\n\r\n    try {\r\n        const regExpSquare = /([a-z]{1}[0-9]{1})/g;\r\n        const matchSquare = regExpSquare.exec(pgnMoveClean1);\r\n\r\n        const pgnSquareName = matchSquare[1];\r\n        const pgnMoveClean2 = pgnMoveClean1.replace(pgnSquareName, '');\r\n\r\n        let capture = false\r\n\r\n        if (pgnMoveClean2.includes('x')) {\r\n            capture = true;\r\n        }\r\n        // Pawn case\r\n        if (pgnMoveClean2 === pgnMoveClean2.toLowerCase()) {\r\n            return [{\r\n                figure: 'p',\r\n                squareFrom: pgnMoveClean2.replace('x', ''),\r\n                squareTo: pgnSquareName,\r\n                color,\r\n                capture\r\n            }, ];\r\n        }\r\n\r\n        let squareFrom = '';\r\n        let figure = '';\r\n        if (pgnMoveClean2.length >= 2) {\r\n            squareFrom = pgnMoveClean2[1].replace('x', '');\r\n            figure = pgnMoveClean2[0].toLowerCase();\r\n        } else {\r\n            figure = pgnMoveClean2.toLowerCase();\r\n        }\r\n        return [{\r\n            figure: figure,\r\n            squareFrom: squareFrom,\r\n            squareTo: pgnSquareName,\r\n            color,\r\n            capture\r\n        }, ];\r\n    } catch (error) {\r\n        throw new Error(`${error} >> ${pgnMove} ${pgnMoveClean1}`);\r\n    }\r\n}\r\n\r\n\r\nexport default {\r\n    parsePgn,\r\n    parsePgnNotation,\r\n    addTextToClipboard\r\n}","import SquareUtils from '../../utils/square.utils.js';\r\nimport UrlUtils from '../../utils/url.js';\r\nimport { white } from '../../utils/chess.constants.js';\r\nimport GameExportUtils from './game-export.utils.js';\r\n\r\nexport default class GameExportService {\r\n\r\n    constructor(config, services) {\r\n        this.config = config\r\n        this.boardService = services.boardService\r\n        this.analysisService = services.analysisService\r\n    }\r\n\r\n\r\n    createBoardLink() {\r\n        const currentFen = this.boardService.getSquareMapAsFen()\r\n        const linkHref = UrlUtils.getAbsoluteRouteWithFen(currentFen);\r\n        GameExportUtils.addTextToClipboard(linkHref);\r\n    }\r\n\r\n    loadFenFromInput() {\r\n        const fenInputStr = document.getElementById(\"fen-input\").value;\r\n        if (fenInputStr) {\r\n            this.boardService.setFenToSquareMap(fenInputStr)\r\n        }\r\n    }\r\n\r\n    loadFenToInput() {\r\n        const currentFen = this.boardService.getSquareMapAsFen();\r\n        document.getElementById(\"fen-input\").value = currentFen;\r\n    }\r\n\r\n    loadPgnFromInput() {\r\n        // todo: pgn\r\n        const pgnInputStr = document.getElementById(\"pgn-input\").value;\r\n        this.renderPgnToBoard(pgnInputStr);\r\n    }\r\n\r\n    renderPgnToBoard(pgnInputStr) { // todo: pgn\r\n        const notations = GameExportUtils.parsePgn(pgnInputStr);\r\n        const squaresMap = this.boardService.getSquaresMap();\r\n        let cursorColor = white;\r\n        const r = [];\r\n        try {\r\n            notations.forEach(notation => {\r\n                const notationParts = GameExportUtils.parsePgnNotation(notation, cursorColor);\r\n                cursorColor = !cursorColor;\r\n                r.push(notationParts)\r\n            });\r\n            r.forEach(rItems => {\r\n                rItems.forEach(rItem => {\r\n                    const { figure, figureToChange, squareFrom, squareTo, color, capture } = rItem;\r\n                    let flag = false;\r\n                    squaresMap.forEach((squareValue, squareKey) => {\r\n                        if (!flag && squareFrom === squareKey) {\r\n                            // Like in boardService.move(), maybe use it\r\n                            this.boardService.setFigureInSquare(squareTo, figure, color);\r\n                            this.boardService.setFigureInSquare(squareFrom, null);\r\n                            this.boardService.setMoveState(squareFrom, squareTo);\r\n                            this.boardService.moveSave();\r\n                            flag = true;\r\n                        } else if (!flag && squareValue && squareValue.color === color && squareValue.letter === figure) {\r\n                            const options = this.analysisService.getSquarePieceAllowedSquares(squareKey, null, true);\r\n                            if (options.includes(squareTo)) {\r\n                                //jump if move from not contain notation origin square letter-col/row-number\r\n                                if (squareFrom && !squareKey.includes(squareFrom)) {\r\n                                    return;\r\n                                }\r\n                                // check rItem.capture for Pawns, if false, should be same column option square\r\n                                // also jump\r\n                                if (figure === 'p') {\r\n                                    const keyCol = squareKey.split('')[0];\r\n                                    const squareToCol = squareTo.split('')[0];\r\n                                    if (!capture && keyCol !== squareToCol) {\r\n                                        return\r\n                                    }\r\n                                }\r\n\r\n                                const figureToSet = figureToChange || figure;\r\n                                // Almost the same as above, todo: dry\r\n                                this.boardService.setFigureInSquare(squareTo, figureToSet, color);\r\n                                this.boardService.setFigureInSquare(squareKey, null);\r\n                                this.boardService.setMoveState(squareKey, squareTo);\r\n                                this.boardService.moveSave();\r\n                                flag = true;\r\n                            }\r\n                        }\r\n                    })\r\n\r\n                })\r\n            })\r\n\r\n        } catch (error) {\r\n            console.error('[PGN PARSER] error', error);\r\n        }\r\n\r\n    }\r\n\r\n}","import { rows, cols, white, boardSize } from '../../utils/chess.constants.js';\r\nimport SquareUtils from '../../utils/square.utils.js';\r\n\r\nfunction mapNotationColorType(\r\n    countSupport,\r\n    countDanger,\r\n    squarePiece,\r\n    targetColor = white\r\n) {\r\n    let colorType = 'default';\r\n\r\n    if (countDanger === 0 && countSupport > 0 &&\r\n        ((squarePiece && squarePiece.color !== targetColor))\r\n    ) {\r\n        colorType = 'advice';\r\n    }\r\n    if (countSupport > countDanger &&\r\n        ((squarePiece && squarePiece.color !== targetColor))\r\n    ) {\r\n        colorType = 'advice';\r\n    }\r\n    if ((countDanger > 0 && countSupport === 0) || (countDanger > countSupport)) {\r\n        colorType = 'alert';\r\n    }\r\n    if (countDanger === 0 && countSupport === 0 && !squarePiece) {\r\n        colorType = 'neutral';\r\n    }\r\n    if (countDanger === countSupport && squarePiece && squarePiece.color === targetColor) {\r\n        colorType = 'alert';\r\n    }\r\n    if (countSupport > countDanger &&\r\n        ((squarePiece && squarePiece.color === targetColor) || !squarePiece)\r\n    ) {\r\n        colorType = 'ok';\r\n    }\r\n\r\n    return colorType;\r\n}\r\n\r\nfunction toggleShowMarkersContainer() {\r\n\r\n    const markersItems = document.querySelectorAll('.markers');\r\n    const invisibleClassName = 'marker-invisible';\r\n    markersItems.forEach(markerItem => {\r\n        if (markerItem.classList.contains(invisibleClassName)) {\r\n            markerItem.classList.remove(invisibleClassName);\r\n        } else {\r\n            markerItem.classList.add(invisibleClassName);\r\n        }\r\n    });\r\n}\r\n\r\nfunction forceShowMarkers() {\r\n    const markersItems = document.querySelectorAll('.markers');\r\n    const invisibleClassName = 'marker-invisible';\r\n    markersItems.forEach(markerItem => {\r\n        if (markerItem.classList.contains(invisibleClassName)) {\r\n            markerItem.classList.remove(invisibleClassName);\r\n        }\r\n    });\r\n}\r\n\r\nfunction getMarkerCircleIdByColor(color) {\r\n    return color ? 'marker-circle-white' : 'marker-circle-black';\r\n}\r\n\r\nfunction getDomainClassNameByColor(color) {\r\n    return color ? 'with-domain-white' : 'with-domain-black';\r\n}\r\n\r\nfunction addMarkerNotation(squareName, text, type = 'default') {\r\n\r\n    const div = boardSize / 8;\r\n\r\n    const textEl = document.createElementNS(\"http://www.w3.org/2000/svg\", \"text\");\r\n    const textNode = document.createTextNode(text);\r\n    textEl.setAttribute('x', `${div}%`);\r\n    textEl.setAttribute('y', '0');\r\n    textEl.setAttribute('dx', '-0.5');\r\n    textEl.setAttribute('dy', '3');\r\n    textEl.setAttribute('data-square', `${squareName}`);\r\n    textEl.setAttribute('class', `marker-square-notation ${type}`);\r\n    textEl.setAttribute('text-anchor', 'end');\r\n    textEl.appendChild(textNode);\r\n\r\n    const squareNode = document.getElementById(`markers-${squareName}`);\r\n    squareNode.appendChild(textEl);\r\n}\r\n\r\nfunction addMarkerRect(squareName, type = true) {\r\n    let typeMarker = type ? 'ok' : 'error';\r\n    const squareNode = document.getElementById(`markers-${squareName}`);\r\n    const use = document.createElementNS(\"http://www.w3.org/2000/svg\", \"use\");\r\n    use.setAttribute('href', `#marker-rect-${typeMarker}`);\r\n    use.setAttribute('data-square', `${squareName}`);\r\n    squareNode.appendChild(use);\r\n}\r\n\r\nfunction addMarkerCircle(squareName, type = null) {\r\n    let typeMarker = 'neutral'\r\n    if (type === white) {\r\n        typeMarker = 'white';\r\n    } else if (type === false) {\r\n        typeMarker = 'black';\r\n    }\r\n    const squareNode = document.getElementById(`markers-${squareName}`);\r\n    const use = document.createElementNS(\"http://www.w3.org/2000/svg\", \"use\");\r\n    use.setAttribute('href', `#marker-circle-${typeMarker}`);\r\n    use.setAttribute('data-square', `${squareName}`);\r\n    squareNode.appendChild(use);\r\n}\r\n\r\nfunction drawMarkerInSquare(squareName, markerId) {\r\n    switch (markerId) {\r\n        case 'marker-circle-white':\r\n            addMarkerCircle(squareName, true);\r\n            break;\r\n        case 'marker-circle-neutral':\r\n            addMarkerCircle(squareName);\r\n            break;\r\n        case 'marker-circle-black':\r\n            addMarkerCircle(squareName, false);\r\n            break;\r\n        case 'marker-move-last':\r\n            addMarkerMoveLast(squareName);\r\n            break;\r\n        case 'marker-rect-ok':\r\n            addMarkerRect(squareName, true);\r\n            break;\r\n        case 'marker-rect-error':\r\n            addMarkerRect(squareName, false);\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n}\r\n\r\nfunction removeSquareMarkers(squareName) {\r\n    const children = document.getElementById(`markers-${squareName}`).children;\r\n    // Change live list, iterate reverse order\r\n    for (var i = children.length - 1; i >= 0; --i) {\r\n        children[i].remove();\r\n    }\r\n}\r\n\r\nfunction createMarkersMap() {\r\n    const listCells = [];\r\n    rows.forEach((row) => {\r\n        cols.forEach((col) => {\r\n            const cellKey = SquareUtils.getSquareName(col, row);\r\n            listCells.push([cellKey, []]);\r\n        })\r\n    })\r\n    return new Map(listCells);\r\n}\r\n\r\nfunction addMarkerMoveLast(squareName) {\r\n    const squareNode = document.getElementById(`markers-${squareName}`);\r\n    const use = document.createElementNS(\"http://www.w3.org/2000/svg\", \"use\");\r\n    use.setAttribute('href', `#marker-move-last`);\r\n    use.setAttribute('data-square', `${squareName}`);\r\n    squareNode.appendChild(use);\r\n}\r\n\r\n\r\nexport default {\r\n    mapNotationColorType,\r\n    toggleShowMarkersContainer,\r\n    getMarkerCircleIdByColor,\r\n    getDomainClassNameByColor,\r\n    addMarkerNotation,\r\n    addMarkerRect,\r\n    addMarkerCircle,\r\n    drawMarkerInSquare,\r\n    removeSquareMarkers,\r\n    createMarkersMap,\r\n    addMarkerMoveLast,\r\n    forceShowMarkers\r\n}","import { rows, cols, white } from '../../utils/chess.constants.js';\r\nimport SquareUtils from '../../utils/square.utils.js';\r\n\r\n\r\nfunction getSquaresOptionsFromSquareWithR(\r\n    squaresMap,\r\n    squareColumLetter,\r\n    squareRowNumber,\r\n    limitation = false\r\n) {\r\n    const currentColumnIdx = cols.indexOf(squareColumLetter);\r\n    const squares = [];\r\n    for (let y = squareRowNumber - 1; y >= 1; y--) {\r\n        squares.push(SquareUtils.getSquareName(squareColumLetter, y));\r\n        const lastSquare = squares[squares.length - 1];\r\n        if (squaresMap.get(lastSquare) && limitation) {\r\n            break;\r\n        }\r\n    }\r\n    for (let y = squareRowNumber + 1; y <= 8; y++) {\r\n        squares.push(SquareUtils.getSquareName(squareColumLetter, y));\r\n        const lastSquare = squares[squares.length - 1];\r\n        if (squaresMap.get(lastSquare) && limitation) {\r\n            break;\r\n        }\r\n    }\r\n    for (let x = currentColumnIdx + 1; x < cols.length; x++) {\r\n        squares.push(SquareUtils.getSquareName(cols[x], squareRowNumber));\r\n        const lastSquare = squares[squares.length - 1];\r\n        if (squaresMap.get(lastSquare) && limitation) {\r\n            break;\r\n        }\r\n    }\r\n    for (let x = currentColumnIdx - 1; x >= 0; x--) {\r\n        squares.push(SquareUtils.getSquareName(cols[x], squareRowNumber));\r\n        const lastSquare = squares[squares.length - 1];\r\n        if (squaresMap.get(lastSquare) && limitation) {\r\n            break;\r\n        }\r\n    }\r\n    return squares;\r\n}\r\n\r\n\r\nfunction getSquaresOptionsFromSquareWithN(\r\n    squareColumLetter,\r\n    squareRowNumber\r\n) {\r\n    const currentColumnIdx = cols.indexOf(squareColumLetter);\r\n    const squares = [];\r\n    const nCombisYX = [\r\n        [2, 1],\r\n        [1, 2],\r\n        [-1, 2],\r\n        [-2, 1],\r\n        [-2, -1],\r\n        [-1, -2],\r\n        [1, -2],\r\n        [2, -1],\r\n    ];\r\n    nCombisYX.forEach((yx) => {\r\n        const y = squareRowNumber + yx[0];\r\n        const x = currentColumnIdx + yx[1];\r\n        if (x >= 0 && x < cols.length && y > 0 && y <= 8) {\r\n            squares.push(SquareUtils.getSquareName(cols[x], y));\r\n        }\r\n    })\r\n    return squares;\r\n}\r\n\r\n\r\nfunction getSquaresOptionsFromSquareWithP(\r\n    squareColumLetter,\r\n    squareRowNumber,\r\n    color,\r\n    allowPawnMove\r\n) {\r\n    const currentColumnIdx = cols.indexOf(squareColumLetter);\r\n    const squares = [];\r\n    const cellY = color ? squareRowNumber + 1 : squareRowNumber - 1;\r\n    const pCombis = [\r\n        [1, cellY],\r\n        [-1, cellY]\r\n    ];\r\n    if (allowPawnMove) {\r\n        pCombis.push([0, cellY]);\r\n        const cellYplus2 = color ? squareRowNumber + 2 : squareRowNumber - 2;\r\n        pCombis.push([0, cellYplus2]);\r\n    }\r\n    pCombis.forEach((xy) => {\r\n        const x = currentColumnIdx + xy[0];\r\n        const y = xy[1];\r\n        if (x >= 0 && x < cols.length && y > 0 && y <= 8) {\r\n            squares.push(SquareUtils.getSquareName(cols[x], y));\r\n        }\r\n    });\r\n    return squares;\r\n}\r\n\r\n\r\nfunction getSquaresOptionsFromSquareWithB(\r\n    squaresMap,\r\n    squareColumLetter,\r\n    squareRowNumber,\r\n    limitation = false\r\n) {\r\n    const currentColumnIdx = cols.indexOf(squareColumLetter);\r\n    const squares = [];\r\n\r\n    let xInc = 1;\r\n    for (let y = squareRowNumber - 1; y >= 0; y--) {\r\n        const x = currentColumnIdx + xInc;\r\n        if (x >= 0 && x < cols.length && y > 0 && y <= 8) {\r\n\r\n            squares.push(SquareUtils.getSquareName(cols[x], y))\r\n            xInc++;\r\n            const lastSquare = squares[squares.length - 1];\r\n            if (squaresMap.get(lastSquare) && limitation) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    xInc = 1;\r\n    for (let y = squareRowNumber - 1; y >= 0; y--) {\r\n        const x = currentColumnIdx - xInc;\r\n        if (x >= 0 && x < cols.length && y > 0 && y <= 8) {\r\n            squares.push(SquareUtils.getSquareName(cols[x], y))\r\n            xInc++;\r\n            const lastSquare = squares[squares.length - 1];\r\n            if (squaresMap.get(lastSquare) && limitation) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    xInc = 1;\r\n    for (let y = squareRowNumber + 1; y <= 8; y++) {\r\n        const x = currentColumnIdx - xInc;\r\n        if (x >= 0 && x < cols.length && y > 0 && y <= 8) {\r\n\r\n            squares.push(SquareUtils.getSquareName(cols[x], y))\r\n            xInc++;\r\n            const lastSquare = squares[squares.length - 1];\r\n            if (squaresMap.get(lastSquare) && limitation) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    xInc = 1;\r\n    for (let y = squareRowNumber + 1; y <= 8; y++) {\r\n        const x = currentColumnIdx + xInc;\r\n        if (x >= 0 && x < cols.length && y > 0 && y <= 8) {\r\n            squares.push(SquareUtils.getSquareName(cols[x], y))\r\n            xInc++;\r\n            const lastSquare = squares[squares.length - 1];\r\n            if (squaresMap.get(lastSquare) && limitation) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return squares;\r\n}\r\n\r\n\r\nfunction getSquaresOptionsFromSquareWithK(\r\n    squareColumLetter,\r\n    squareRowNumber,\r\n) {\r\n    const currentColumnIdx = cols.indexOf(squareColumLetter);\r\n    const squares = [];\r\n    const kCombisXY = [\r\n        [-1, 0],\r\n        [-1, 1],\r\n        [0, 1],\r\n        [1, 1],\r\n        [1, 0],\r\n        [1, -1],\r\n        [0, -1],\r\n        [-1, -1],\r\n    ];\r\n    kCombisXY.forEach((xy) => {\r\n        const x = currentColumnIdx + xy[0];\r\n        const y = squareRowNumber + xy[1];\r\n        if (x >= 0 && x < cols.length && y > 0 && y <= 8) {\r\n            squares.push(SquareUtils.getSquareName(cols[x], y))\r\n        }\r\n    });\r\n    return squares;\r\n}\r\n\r\nexport default {\r\n    getSquaresOptionsFromSquareWithR,\r\n    getSquaresOptionsFromSquareWithN,\r\n    getSquaresOptionsFromSquareWithP,\r\n    getSquaresOptionsFromSquareWithB,\r\n    getSquaresOptionsFromSquareWithK\r\n}","import { white, black } from '../../utils/chess.constants.js';\r\nimport AnalysisSvgUtils from './analysis-svg.utils.js'\r\nimport AnalysisSquaresUtils from './analysis-squares.utils.js'\r\n\r\n// todo\r\n// export const flankQ = ['a', 'b', 'c', 'd', ];\r\n// export const flankK = ['e', 'f', 'g', 'h', ];\r\n// export const flankC = ['c', 'd', 'e', 'f'];\r\n\r\nexport default class AnalysisService {\r\n\r\n    constructor(config, services) {\r\n        this.markersMap = AnalysisSvgUtils.createMarkersMap();\r\n        this.boardService = services.boardService;\r\n\r\n        this.config = config;\r\n\r\n        this.state = {\r\n            isDomainWhiteOn: false,\r\n            isDomainBlackOn: false,\r\n        }\r\n    }\r\n\r\n    toggleMarkers() {\r\n        AnalysisSvgUtils.toggleShowMarkersContainer();\r\n    }\r\n\r\n    toggleColorDomain(color = white) {\r\n        const colorFlagState = color ? this.state.isDomainWhiteOn : this.state.isDomainBlackOn;\r\n        if (!colorFlagState) {\r\n            this.drawDomainByColor(color);\r\n        } else {\r\n            this.drawClearDomains(color);\r\n        }\r\n    }\r\n\r\n    toggleDomains() {\r\n        if (this.state.isDomainWhiteOn || this.state.isDomainBlackOn) {\r\n            this.drawClearDomains(white);\r\n            this.drawClearDomains(black);\r\n        } else {\r\n            this.drawDomainByColor(white);\r\n            this.drawDomainByColor(black);\r\n        }\r\n    }\r\n\r\n\r\n    drawDomainsByState() {\r\n        if (this.state.isDomainWhiteOn) {\r\n            this.drawDomainByColor(white);\r\n        }\r\n        if (this.state.isDomainBlackOn) {\r\n            this.drawDomainByColor(black);\r\n        }\r\n    }\r\n\r\n    addMarkerToSquare(squareName, markerId, forceRemove = false) {\r\n        if (!squareName) {\r\n            return\r\n        }\r\n        AnalysisSvgUtils.forceShowMarkers();\r\n        const squareMarkers = this.markersMap.get(squareName);\r\n\r\n        const selectedMarkerIdInSquare = squareMarkers.indexOf(markerId);\r\n        if (selectedMarkerIdInSquare === -1) {\r\n            squareMarkers.push(markerId);\r\n            this.markersMap.set(squareName, squareMarkers);\r\n            AnalysisSvgUtils.drawMarkerInSquare(squareName, markerId);\r\n        }\r\n        if (forceRemove && selectedMarkerIdInSquare > -1) {\r\n            squareMarkers.splice(selectedMarkerIdInSquare, 1);\r\n            this.markersMap.set(squareName, squareMarkers);\r\n            this.drawMarkersFromMapBySquareName(squareName);\r\n        }\r\n    }\r\n\r\n    drawMarkersFromMap() {\r\n        AnalysisSvgUtils.forceShowMarkers();\r\n\r\n        this.markersMap.forEach((markerEntry, squareKey) => {\r\n            AnalysisSvgUtils.removeSquareMarkers(squareKey);\r\n            markerEntry.forEach(markerItemId => {\r\n                AnalysisServiceUtils.drawMarkerInSquare(squareKey, markerItemId);\r\n            })\r\n        })\r\n    }\r\n\r\n    drawMarkersFromMapBySquareName(squareName) {\r\n        AnalysisSvgUtils.forceShowMarkers();\r\n\r\n        //remove all markers first\r\n        AnalysisSvgUtils.removeSquareMarkers(squareName);\r\n        // Redraw markers from map\r\n        const squareMarkers = this.markersMap.get(squareName);\r\n        squareMarkers.forEach(markerItemId => {\r\n            AnalysisSvgUtils.drawMarkerInSquare(squareName, markerItemId);\r\n        })\r\n    }\r\n\r\n    drawRemoveAllMarkers() {\r\n        this.markersMap = AnalysisSvgUtils.createMarkersMap();\r\n        this.drawMarkersFromMap()\r\n    }\r\n\r\n    getSquarePieceAllowedSquares(squareName, forcedPieceAndColor = null, allowPawnMove = false) {\r\n\r\n        const squaresMap = this.boardService.getSquaresMap();\r\n\r\n        const limitation = this.config.withLimitation;\r\n        const options = [];\r\n        if (!squareName) {\r\n            return;\r\n        }\r\n        const squareNameParts = squareName.split('');\r\n        const squareColumnLetter = squareNameParts[0];\r\n        const squareRowNumber = parseInt(squareNameParts[1], 10);\r\n        const { letter, color } = forcedPieceAndColor ? forcedPieceAndColor : squaresMap.get(squareName);\r\n        if (letter === 'r') {\r\n            const squareOptions = AnalysisSquaresUtils.getSquaresOptionsFromSquareWithR(squaresMap, squareColumnLetter, squareRowNumber, limitation);\r\n            options.push(...squareOptions);\r\n        }\r\n        if (letter === 'n') {\r\n            const squareOptions = AnalysisSquaresUtils.getSquaresOptionsFromSquareWithN(squareColumnLetter, squareRowNumber);\r\n            options.push(...squareOptions);\r\n        }\r\n        if (letter === 'p') {\r\n            const squareOptions = AnalysisSquaresUtils.getSquaresOptionsFromSquareWithP(squareColumnLetter, squareRowNumber, color, allowPawnMove);\r\n            options.push(...squareOptions);\r\n        }\r\n        if (letter === 'b') {\r\n            const squareOptions = AnalysisSquaresUtils.getSquaresOptionsFromSquareWithB(squaresMap, squareColumnLetter, squareRowNumber, limitation);\r\n            options.push(...squareOptions);\r\n        }\r\n        if (letter === 'q') {\r\n            const squareOptionsVertHorz = AnalysisSquaresUtils.getSquaresOptionsFromSquareWithR(squaresMap, squareColumnLetter, squareRowNumber, limitation);\r\n            const squareOptionsDiagonal = AnalysisSquaresUtils.getSquaresOptionsFromSquareWithB(squaresMap, squareColumnLetter, squareRowNumber, limitation);\r\n            options.push(...squareOptionsVertHorz, ...squareOptionsDiagonal);\r\n        }\r\n        if (letter === 'k') {\r\n            const squareOptions = AnalysisSquaresUtils.getSquaresOptionsFromSquareWithK(squareColumnLetter, squareRowNumber);\r\n            options.push(...squareOptions);\r\n        }\r\n        return options;\r\n    }\r\n\r\n    boardSquareDangerSupportRepor(selfColor = white) {\r\n        AnalysisSvgUtils.forceShowMarkers();\r\n\r\n        this.drawRemoveAllMarkers();\r\n\r\n        const squaresMap = this.boardService.getSquaresMap();\r\n        squaresMap.forEach((squareMapValueA, squareMapKeyA) => {\r\n            let countSupport = 0;\r\n            let countDanger = 0;\r\n            let note = '';\r\n            squaresMap.forEach((squareMapValueB, squareMapKeyB) => {\r\n                const piece = squareMapValueB;\r\n                if (!piece) {\r\n                    return\r\n                }\r\n                const squareMapSquareOptions = this.getSquarePieceAllowedSquares(squareMapKeyB);\r\n                if (squareMapSquareOptions.includes(squareMapKeyA)) {\r\n                    if (squareMapValueA && squareMapValueB && squareMapValueA.color === squareMapValueB.color) {\r\n                        countSupport += 1;\r\n\r\n                        if (squareMapValueB.letter === 'k') {\r\n                            note = '#';\r\n                        }\r\n\r\n                    } else if (squareMapValueA && squareMapValueB && squareMapValueA.color !== squareMapValueB.color) {\r\n                        countDanger += 1;\r\n                    } else if (!squareMapValueA) {\r\n                        if (piece.color === selfColor) {\r\n                            countSupport += 1;\r\n                        } else {\r\n                            countDanger += 1;\r\n                        }\r\n                    }\r\n                }\r\n            })\r\n            const colorType = AnalysisSvgUtils.mapNotationColorType(countSupport, countDanger, squareMapValueA, selfColor);\r\n            AnalysisSvgUtils.addMarkerNotation(squareMapKeyA, `${note}${countSupport}-${countDanger}`, colorType);\r\n        })\r\n    }\r\n\r\n    drawSupportToSquare(squareName) {\r\n        if (!squareName) {\r\n            return;\r\n        }\r\n        AnalysisSvgUtils.forceShowMarkers();\r\n\r\n        const squaresMap = this.boardService.getSquaresMap();\r\n        let isSquareSupported = false;\r\n        const squarePiece = squaresMap.get(squareName);\r\n        if (squarePiece) {\r\n            squaresMap.forEach((squareMapValue, squareMapKey) => {\r\n                if (squareMapKey !== squareName && squareMapValue && squareMapValue.color === squarePiece.color) {\r\n                    const squareMapSquareOptions = this.getSquarePieceAllowedSquares(squareMapKey);\r\n                    // console.debug('[CHESS] drawSupportToSquare: mapOptions', squareMapSquareOptions);\r\n                    if (squareMapSquareOptions.includes(squareName)) {\r\n                        isSquareSupported = true;\r\n                        const markerIdByColor = AnalysisSvgUtils.getMarkerCircleIdByColor(squareMapValue.color);\r\n                        this.addMarkerToSquare(squareMapKey, markerIdByColor)\r\n                        this.drawDomainBySquare(squareMapKey);\r\n                    }\r\n                }\r\n            })\r\n            if (isSquareSupported) {\r\n                this.addMarkerToSquare(squareName, 'marker-rect-ok');\r\n            } else {\r\n                this.addMarkerToSquare(squareName, 'marker-rect-error');\r\n            }\r\n        }\r\n    }\r\n\r\n    drawDangerToSquareDomain(squareName) {\r\n        if (!squareName) {\r\n            return;\r\n        }\r\n        AnalysisSvgUtils.forceShowMarkers();\r\n\r\n        const squaresMap = this.boardService.getSquaresMap();\r\n        let isSquareSave = true;\r\n        const squarePiece = squaresMap.get(squareName);\r\n        if (squarePiece) {\r\n            const squaresOptionsFromFigure = this.getSquarePieceAllowedSquares(squareName);\r\n            squaresOptionsFromFigure.forEach(() => {\r\n                this.drawDomainBySquare(squareName);\r\n                squaresMap.forEach((squareMapValue, squareMapKey) => {\r\n                    if (squareMapKey !== squareName && squareMapValue && squareMapValue.color !== squarePiece.color) {\r\n                        const squareMapSquareOptions = this.getSquarePieceAllowedSquares(squareMapKey);\r\n                        // console.debug('[CHESS] drawAttacksToSquareDomain: mapOptions', squareMapSquareOptions);\r\n                        // console.debug('[CHESS] drawAttacksToSquareDomain: ´fgure', squaresOptionsFromFigure);\r\n\r\n                        const uniques = squaresOptionsFromFigure.filter(value => squareMapSquareOptions.includes(value));\r\n                        uniques.forEach((commonSquare) => {\r\n                            const markerIdByColor = AnalysisSvgUtils.getMarkerCircleIdByColor(squareMapValue.color);\r\n                            this.addMarkerToSquare(squareMapKey, markerIdByColor);\r\n                            this.addMarkerToSquare(commonSquare, markerIdByColor);\r\n\r\n                        })\r\n                        if (uniques.length > 0) {\r\n                            isSquareSave = false;\r\n                        }\r\n                    }\r\n                })\r\n            })\r\n            if (isSquareSave) {\r\n                this.addMarkerToSquare(squareName, 'marker-rect-ok');\r\n            } else {\r\n\r\n                this.addMarkerToSquare(squareName, 'marker-circle-neutral');\r\n            }\r\n        }\r\n    }\r\n\r\n    drawDangerToSquare(squareName) {\r\n        if (!squareName) {\r\n            return;\r\n        }\r\n        AnalysisSvgUtils.forceShowMarkers();\r\n\r\n        const squaresMap = this.boardService.getSquaresMap();\r\n        let isSquareSave = true;\r\n        const squarePiece = squaresMap.get(squareName);\r\n        if (squarePiece) {\r\n            squaresMap.forEach((squareMapValue, squareMapKey) => {\r\n                if (squareMapKey !== squareName && squareMapValue && squareMapValue.color !== squarePiece.color) {\r\n                    const squareMapSquareOptions = this.getSquarePieceAllowedSquares(squareMapKey);\r\n                    // console.debug('[CHESS] drawAttacksToSquare: mapOptions', squareMapSquareOptions);\r\n                    if (squareMapSquareOptions.includes(squareName)) {\r\n                        isSquareSave = false;\r\n                        const markerIdByColor = AnalysisSvgUtils.getMarkerCircleIdByColor(squareMapValue.color);\r\n                        this.addMarkerToSquare(squareMapKey, markerIdByColor)\r\n                        this.drawDomainBySquare(squareMapKey);\r\n                    }\r\n                }\r\n            })\r\n            if (isSquareSave) {\r\n                this.addMarkerToSquare(squareName, 'marker-rect-ok');\r\n            } else {\r\n                const markerIdBySquareColor = AnalysisSvgUtils.getMarkerCircleIdByColor(squarePiece.color);\r\n                this.addMarkerToSquare(squareName, markerIdBySquareColor);\r\n            }\r\n        }\r\n    }\r\n\r\n    drawAttackFromSquareDomain(squareName) {\r\n        if (!squareName) {\r\n            return;\r\n        }\r\n        AnalysisSvgUtils.forceShowMarkers();\r\n\r\n        const squaresMap = this.boardService.getSquaresMap();\r\n        const squarePiece = squaresMap.get(squareName);\r\n        if (squarePiece) {\r\n            const markerIdByColor = AnalysisSvgUtils.getMarkerCircleIdByColor(squarePiece.color);\r\n            const squareOptions = this.getSquarePieceAllowedSquares(squareName);\r\n            this.drawDomainBySquare(squareName);\r\n            squareOptions.forEach(domainSquareName => {\r\n                const ghostPieceInDomain = squarePiece;\r\n                const squareNextOptions = this.getSquarePieceAllowedSquares(domainSquareName, ghostPieceInDomain);\r\n                squareNextOptions.forEach(nextDomainSquareName => {\r\n                    const pieceInOptionSquare = squaresMap.get(nextDomainSquareName);\r\n                    if (pieceInOptionSquare && pieceInOptionSquare.color !== squarePiece.color) {\r\n                        // target!\r\n                        this.addMarkerToSquare(squareName, 'marker-circle-neutral');\r\n                        this.addMarkerToSquare(domainSquareName, markerIdByColor);\r\n                        this.addMarkerToSquare(nextDomainSquareName, markerIdByColor);\r\n                    }\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    drawSupportToSquareDomain(squareName) {\r\n        if (!squareName) {\r\n            return;\r\n        }\r\n        AnalysisSvgUtils.forceShowMarkers();\r\n\r\n        const squaresMap = this.boardService.getSquaresMap();\r\n        let isSquareSupported = false;\r\n        const squarePiece = squaresMap.get(squareName);\r\n        if (squarePiece) {\r\n            this.drawDomainBySquare(squareName);\r\n            const squaresOptionsFromFigure = this.getSquarePieceAllowedSquares(squareName);\r\n            squaresOptionsFromFigure.forEach(domainSquareName => {\r\n\r\n                squaresMap.forEach((squareMapValue, squareMapKey) => {\r\n                    if (squareMapKey !== squareName && squareMapValue && squareMapValue.color === squarePiece.color) {\r\n                        const squareMapSquareOptions = this.getSquarePieceAllowedSquares(squareMapKey);\r\n                        // console.debug('[CHESS] drawSupportToSquareDomain: mapOptions', squareMapSquareOptions);\r\n                        // console.debug('[CHESS] drawSupportToSquareDomain: ´fgure', squaresOptionsFromFigure);\r\n                        const uniques = squaresOptionsFromFigure.filter(value => squareMapSquareOptions.includes(value));\r\n                        uniques.forEach((commonSquare) => {\r\n                            const markerIdByColor = AnalysisSvgUtils.getMarkerCircleIdByColor(squareMapValue.color);\r\n                            this.addMarkerToSquare(squareMapKey, markerIdByColor);\r\n                            this.addMarkerToSquare(commonSquare, markerIdByColor);\r\n                        })\r\n                        if (uniques.length > 0) {\r\n                            isSquareSupported = true;\r\n                        }\r\n                    }\r\n                })\r\n            })\r\n            if (isSquareSupported) {\r\n                this.addMarkerToSquare(squareName, 'marker-circle-neutral');\r\n            } else {\r\n                this.addMarkerToSquare(squareName, 'marker-rect-error');\r\n            }\r\n        }\r\n    }\r\n\r\n    drawDomainByColor(color = white) {\r\n        const squaresMap = this.boardService.getSquaresMap();\r\n        this.drawClearDomains(color);\r\n        if (color) {\r\n            this.state.isDomainWhiteOn = true;\r\n        } else {\r\n            this.state.isDomainBlackOn = true;\r\n        }\r\n        const domainClassName = AnalysisSvgUtils.getDomainClassNameByColor(color);\r\n        const squaresInDomain = []\r\n        squaresMap.forEach((squareEntry, squareName) => {\r\n            if (squareEntry && squareEntry.color === color) {\r\n                const squaresFromFigure = this.getSquarePieceAllowedSquares(squareName);\r\n                squaresInDomain.push(...squaresFromFigure);\r\n            }\r\n        })\r\n        squaresInDomain.forEach(squareName => {\r\n            // todo: domain from map\r\n            document.getElementById(`base-${squareName}`).classList.add(domainClassName);\r\n        })\r\n        return squaresInDomain;\r\n    }\r\n\r\n    drawDomainBySquare(squareName) {\r\n        const squaresMap = this.boardService.getSquaresMap();\r\n        const squarePiece = squaresMap.get(squareName);\r\n        if (squarePiece) {\r\n            const markerIdBySquareColor = AnalysisSvgUtils.getMarkerCircleIdByColor(squarePiece.color);\r\n            this.addMarkerToSquare(squareName, markerIdBySquareColor);\r\n            const squaresFromFigure = this.getSquarePieceAllowedSquares(squareName);\r\n            squaresFromFigure.forEach(domainSquareName => {\r\n                const classNameDomain = AnalysisSvgUtils.getDomainClassNameByColor(squarePiece.color);\r\n                // todo: domain from map\r\n                document.getElementById(`base-${domainSquareName}`).classList.add(classNameDomain);\r\n            })\r\n        }\r\n    }\r\n\r\n    drawClearDomains(color = white) {\r\n        const squaresMap = this.boardService.getSquaresMap();\r\n        if (color) {\r\n            this.state.isDomainWhiteOn = false;\r\n        } else {\r\n            this.state.isDomainBlackOn = false;\r\n        }\r\n        const classNameColor = AnalysisSvgUtils.getDomainClassNameByColor(color);\r\n        squaresMap.forEach((_, squareName) => {\r\n            // todo: domain from map\r\n            const classList = document.getElementById(`base-${squareName}`).classList;\r\n            classList.remove(classNameColor);\r\n        });\r\n    }\r\n\r\n    drawAttackFromSquare(squareName) {\r\n        if (!squareName) {\r\n            return;\r\n        }\r\n        AnalysisSvgUtils.forceShowMarkers();\r\n\r\n        const squaresMap = this.boardService.getSquaresMap();\r\n        const squarePiece = squaresMap.get(squareName);\r\n        if (squarePiece) {\r\n            const squareOptions = this.getSquarePieceAllowedSquares(squareName);\r\n            const markerIdByColor = AnalysisSvgUtils.getMarkerCircleIdByColor(squarePiece.color);\r\n            squareOptions.forEach(optionSquareKey => {\r\n                const pieceInOptionSquare = squaresMap.get(optionSquareKey);\r\n                if (pieceInOptionSquare && pieceInOptionSquare.color !== squarePiece.color) {\r\n                    // target!\r\n                    this.addMarkerToSquare(optionSquareKey, markerIdByColor);\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    //todo \r\n    // drawFlankCenterDomains() {\r\n    //     const targetRows = [6, 5, 4, 3];\r\n    //     const classNameDomain = 'with-flank';\r\n    //     flankC.forEach(flankCColLetter => {\r\n    //         targetRows.forEach(row => {\r\n    //             const squareName = Utils.getCellKey(flankCColLetter, row);\r\n    //             document.getElementById(`base-${squareName}`).classList.add(classNameDomain);\r\n    //         })\r\n    //     })\r\n    // }\r\n    // drawRemoveLastStepMoveMarker() {\r\n    //     this.markersMap.forEach(markerItemList => {\r\n    //         const markerIdx = markerItemList.indexOf('marker-move-last');\r\n    //         if (markerIdx > -1) {\r\n    //             markerItemList.splice(markerIdx, 1);\r\n    //         }\r\n    //     })\r\n    //     this.drawMarkersFromMap();\r\n    // }\r\n\r\n}","import Chess from './js/chess.js'\r\nimport UrlUtils from './js/utils/url.js'\r\nimport './index.scss';\r\n\r\nconst urlParams = UrlUtils.getParamsFromUrl(window.location.href);\r\n\r\nlet fenToLoad = null;\r\nif ('fen' in urlParams) {\r\n    fenToLoad = urlParams.fen;\r\n}\r\n\r\nconst config = {\r\n    fen: fenToLoad,\r\n    asIcon: true,\r\n    // asLines: false, // todo: check param\r\n    withLimitation: true,\r\n    flip: false\r\n};\r\n\r\nnew Chess(config);","import { fenBase, white, black } from './utils/chess.constants.js';\r\n\r\nimport ControlsService from './services/controls-service/controls.service.js'\r\nimport BoardService from './services/board-service/board.service.js';\r\nimport BoardRenderService from './services/board-render-service/board-render.service.js';\r\nimport GameExportService from './services/game-export-service/game-export.service.js';\r\nimport AnalysisService from './services/analysis-service/analysis.service.js';\r\n\r\n\r\nexport default class Chess {\r\n\r\n    constructor(config) {\r\n\r\n        this.config = this.parseConfig(config);\r\n\r\n        this.boardService = new BoardService(this.config.board);\r\n\r\n        this.boardRenderService = new BoardRenderService(this.config.render, { boardService: this.boardService });\r\n\r\n        this.analysisService = new AnalysisService(this.config.analysis, {\r\n            boardService: this.boardService,\r\n        });\r\n\r\n        this.gameExportService = new GameExportService(null, {\r\n            boardService: this.boardService,\r\n            analysisService: this.analysisService\r\n        });\r\n\r\n        this.controlsService = new ControlsService(this.actionsBridge);\r\n\r\n        this.boardRenderService.drawBoardFromSquareMap().then(\r\n            () => {\r\n                this.controlsService.squareControls();\r\n                this.lab();\r\n            }\r\n        )\r\n    }\r\n\r\n    lab() {\r\n        //this.actionsBridge.onDomainDangerSquare('e2');\r\n    }\r\n\r\n    parseConfig(config) {\r\n        return {\r\n            analysis: {\r\n                withLimitation: ('withLimitation' in config) ? config.withLimitation : false,\r\n            },\r\n            board: {\r\n                fen: ('fen' in config) ? config.fen : fenBase,\r\n            },\r\n            render: {\r\n                flip: ('flip' in config) ? config.flip : false,\r\n                asIcon: ('asIcon' in config) ? config.asIcon : true,\r\n                asLines: ('asLines' in config) ? config.asLines : true,\r\n            }\r\n        };\r\n    }\r\n\r\n    // Main methods\r\n\r\n    async chessMove(originSquare, targetSquare) {\r\n        await this.boardService.move(originSquare, targetSquare);\r\n        this.boardRenderService.drawPiecesFromMap();\r\n        this.analysisService.drawDomainsByState();\r\n    }\r\n\r\n    chessAddPiece(square, letter, color) {\r\n        if (!square) { return; }\r\n        this.boardService.setFigureInSquare(square, letter, color);\r\n        this.boardRenderService.drawPiecesFromMap();\r\n    }\r\n\r\n    chessClearBoard() {\r\n        this.boardService.clear();\r\n        this.boardRenderService.drawPiecesFromMap();\r\n    }\r\n    chessInitBoard() {\r\n        this.boardService.init();\r\n        this.boardRenderService.drawPiecesFromMap();\r\n    }\r\n\r\n    get actionsBridge() {\r\n        return {\r\n\r\n            // Board\r\n            movePiecesFromSquares: (originSquare, targetSquare) => this.chessMove(originSquare, targetSquare),\r\n            onFlip: async() => {\r\n                await this.boardRenderService.drawBoardFlipped();\r\n                this.controlsService.squareControls();\r\n                this.lab();\r\n            },\r\n            onAdd: (square, letter, color) => this.chessAddPiece(square, letter, color),\r\n            onClearSquare: (square) => this.chessAddPiece(square, null),\r\n            onClear: () => this.chessClearBoard(),\r\n            onInit: () => this.chessInitBoard(),\r\n\r\n            // Analyse\r\n            onDisplayReportBalanceWhites: () => {\r\n                this.analysisService.boardSquareDangerSupportRepor(white);\r\n            },\r\n            onDisplayReportBalanceBlacks: () => {\r\n                this.analysisService.boardSquareDangerSupportRepor(black);\r\n            },\r\n            onShowSquareSupport: (squareTarget) => {\r\n                this.analysisService.drawSupportToSquare(squareTarget);\r\n            },\r\n            onShowSquareDomainSupport: (squareTarget) => {\r\n                this.analysisService.drawSupportToSquareDomain(squareTarget);\r\n            },\r\n            onDomainW: async() => {\r\n                await this.analysisService.toggleColorDomain(white)\r\n            },\r\n            onDomainB: async() => {\r\n                await this.analysisService.toggleColorDomain(black)\r\n            },\r\n            onDomainsToggle: async() => {\r\n                await this.analysisService.toggleDomains()\r\n            },\r\n            onDomainsSquare: async(squareName) => {\r\n                this.analysisService.drawDomainBySquare(squareName);\r\n            },\r\n            onDomainDangerSquare: (squareName) => {\r\n                this.analysisService.drawDangerToSquareDomain(squareName);\r\n            },\r\n            onDomainAttacksSquare: async(squareName) => {\r\n                this.analysisService.drawAttackFromSquareDomain(squareName);\r\n            },\r\n            onShowAttackSquare: async(squareName) => {\r\n                this.analysisService.drawAttackFromSquare(squareName)\r\n            },\r\n            onDangerSquare: async(squareName) => {\r\n                this.analysisService.drawDangerToSquare(squareName)\r\n            },\r\n\r\n            // Visuals\r\n            onRemoveVisuals: () => {\r\n                this.analysisService.drawRemoveAllMarkers();\r\n                this.analysisService.drawClearDomains(white);\r\n                this.analysisService.drawClearDomains(black);\r\n            },\r\n            onAddMarker: (squareTarget, markerId) => {\r\n                this.analysisService.addMarkerToSquare(squareTarget, markerId, true);\r\n            },\r\n            onToggleMarkers: () => {\r\n                this.analysisService.toggleMarkers();\r\n            },\r\n\r\n            // Imports, Extras\r\n            onLoadFenFromInput: () => {\r\n                this.gameExportService.loadFenFromInput();\r\n                this.boardRenderService.drawPiecesFromMap();\r\n            },\r\n            onLoadFenToInput: () => {\r\n                this.gameExportService.loadFenToInput();\r\n            },\r\n            onCreateLink: () => {\r\n                this.gameExportService.createBoardLink();\r\n            },\r\n            onLoadPgn: () => {\r\n                this.gameExportService.loadPgnFromInput();\r\n                this.boardRenderService.drawPiecesFromMap();\r\n            },\r\n            // Navigation\r\n            onNavRecord: () => {\r\n                this.boardService.moveSave();\r\n            },\r\n            onNavPrev: () => {\r\n                this.boardService.movePrev();\r\n                this.boardRenderService.drawPiecesFromMap();\r\n                this.analysisService.drawDomainsByState();\r\n            },\r\n            onNavNext: () => {\r\n                this.boardService.moveNext();\r\n                this.boardRenderService.drawPiecesFromMap();\r\n                this.analysisService.drawDomainsByState();\r\n\r\n            },\r\n\r\n        }\r\n    }\r\n}"],"sourceRoot":""}